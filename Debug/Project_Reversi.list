
Project_Reversi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6fc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c40  0800f8fc  0800f8fc  0001f8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801253c  0801253c  000302d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801253c  0801253c  0002253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012544  08012544  000302d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012544  08012544  00022544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012548  08012548  00022548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0801254c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b88  200002d8  08012824  000302d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e60  08012824  00030e60  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a851  00000000  00000000  00030306  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d90  00000000  00000000  0005ab57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020c8  00000000  00000000  0005f8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e60  00000000  00000000  000619b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032929  00000000  00000000  00063810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cd48  00000000  00000000  00096139  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012acdd  00000000  00000000  000b2e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ddb5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ec8  00000000  00000000  001ddbdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  001e6aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001e6ac8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002d8 	.word	0x200002d8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f8e4 	.word	0x0800f8e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002dc 	.word	0x200002dc
 800023c:	0800f8e4 	.word	0x0800f8e4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f90d 	bl	800081c <ft6x06_GetInstance>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2bff      	cmp	r3, #255	; 0xff
 800060a:	d10e      	bne.n	800062a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 f905 	bl	800081c <ft6x06_GetInstance>
 8000612:	4603      	mov	r3, r0
 8000614:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d806      	bhi.n	800062a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 800061c:	7bbb      	ldrb	r3, [r7, #14]
 800061e:	88fa      	ldrh	r2, [r7, #6]
 8000620:	b2d1      	uxtb	r1, r2
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <ft6x06_Init+0x44>)
 8000624:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8000626:	f000 fd73 	bl	8001110 <TS_IO_Init>
    }
  }
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200002f4 	.word	0x200002f4

08000638 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	4603      	mov	r3, r0
 8000656:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8000658:	f000 fd5a 	bl	8001110 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	21a8      	movs	r1, #168	; 0xa8
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fd78 	bl	8001158 <TS_IO_Read>
 8000668:	4603      	mov	r3, r0
 800066a:	b29b      	uxth	r3, r3
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f8bc 	bl	80007fe <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f88d 	bl	80007a8 <ft6x06_TS_DisableIT>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fd53 	bl	8001158 <TS_IO_Read>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d901      	bls.n	80006ce <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <ft6x06_TS_DetectTouch+0x50>)
 80006d4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <ft6x06_TS_DetectTouch+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b2db      	uxtb	r3, r3
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200002f8 	.word	0x200002f8

080006ec <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000700:	789a      	ldrb	r2, [r3, #2]
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	429a      	cmp	r2, r3
 8000708:	d234      	bcs.n	8000774 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <ft6x06_TS_GetXY+0x90>)
 800070c:	789b      	ldrb	r3, [r3, #2]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d002      	beq.n	8000718 <ft6x06_TS_GetXY+0x2c>
 8000712:	2b01      	cmp	r3, #1
 8000714:	d003      	beq.n	800071e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8000716:	e005      	b.n	8000724 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000718:	2303      	movs	r3, #3
 800071a:	75fb      	strb	r3, [r7, #23]
      break;
 800071c:	e002      	b.n	8000724 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 800071e:	2309      	movs	r3, #9
 8000720:	75fb      	strb	r3, [r7, #23]
      break;
 8000722:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000724:	89fb      	ldrh	r3, [r7, #14]
 8000726:	b2d8      	uxtb	r0, r3
 8000728:	f107 0210 	add.w	r2, r7, #16
 800072c:	7df9      	ldrb	r1, [r7, #23]
 800072e:	2304      	movs	r3, #4
 8000730:	f000 fd30 	bl	8001194 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000734:	7c3b      	ldrb	r3, [r7, #16]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	b21b      	sxth	r3, r3
 800073a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800073e:	b21a      	sxth	r2, r3
 8000740:	7c7b      	ldrb	r3, [r7, #17]
 8000742:	b21b      	sxth	r3, r3
 8000744:	4313      	orrs	r3, r2
 8000746:	b21b      	sxth	r3, r3
 8000748:	b29a      	uxth	r2, r3
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800074e:	7cbb      	ldrb	r3, [r7, #18]
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	b21b      	sxth	r3, r3
 8000754:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000758:	b21a      	sxth	r2, r3
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	b21b      	sxth	r3, r3
 800075e:	4313      	orrs	r3, r2
 8000760:	b21b      	sxth	r3, r3
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <ft6x06_TS_GetXY+0x90>)
 800076a:	789b      	ldrb	r3, [r3, #2]
 800076c:	3301      	adds	r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000772:	709a      	strb	r2, [r3, #2]
  }
}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200002f8 	.word	0x200002f8

08000780 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	7bfa      	ldrb	r2, [r7, #15]
 8000798:	21a4      	movs	r1, #164	; 0xa4
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fcc2 	bl	8001124 <TS_IO_Write>
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	7bfa      	ldrb	r2, [r7, #15]
 80007c0:	21a4      	movs	r1, #164	; 0xa4
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fcae 	bl	8001124 <TS_IO_Write>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80007fe:	b480      	push	{r7}
 8000800:	b085      	sub	sp, #20
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 800080c:	68fb      	ldr	r3, [r7, #12]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e00b      	b.n	8000848 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <ft6x06_GetInstance+0x40>)
 8000834:	5cd3      	ldrb	r3, [r2, r3]
 8000836:	b29b      	uxth	r3, r3
 8000838:	88fa      	ldrh	r2, [r7, #6]
 800083a:	429a      	cmp	r2, r3
 800083c:	d101      	bne.n	8000842 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	e006      	b.n	8000850 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d9f0      	bls.n	8000830 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800084e:	23ff      	movs	r3, #255	; 0xff
}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	200002f4 	.word	0x200002f4

08000860 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800086a:	49be      	ldr	r1, [pc, #760]	; (8000b64 <OTM8009A_Init+0x304>)
 800086c:	2000      	movs	r0, #0
 800086e:	f001 fb2f 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000872:	49bd      	ldr	r1, [pc, #756]	; (8000b68 <OTM8009A_Init+0x308>)
 8000874:	2003      	movs	r0, #3
 8000876:	f001 fb2b 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800087a:	49bc      	ldr	r1, [pc, #752]	; (8000b6c <OTM8009A_Init+0x30c>)
 800087c:	2000      	movs	r0, #0
 800087e:	f001 fb27 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000882:	49bb      	ldr	r1, [pc, #748]	; (8000b70 <OTM8009A_Init+0x310>)
 8000884:	2002      	movs	r0, #2
 8000886:	f001 fb23 	bl	8001ed0 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800088a:	49b8      	ldr	r1, [pc, #736]	; (8000b6c <OTM8009A_Init+0x30c>)
 800088c:	2000      	movs	r0, #0
 800088e:	f001 fb1f 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000892:	49b8      	ldr	r1, [pc, #736]	; (8000b74 <OTM8009A_Init+0x314>)
 8000894:	2000      	movs	r0, #0
 8000896:	f001 fb1b 	bl	8001ed0 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800089a:	200a      	movs	r0, #10
 800089c:	f000 fc98 	bl	80011d0 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80008a0:	49b5      	ldr	r1, [pc, #724]	; (8000b78 <OTM8009A_Init+0x318>)
 80008a2:	2000      	movs	r0, #0
 80008a4:	f001 fb14 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80008a8:	49b4      	ldr	r1, [pc, #720]	; (8000b7c <OTM8009A_Init+0x31c>)
 80008aa:	2000      	movs	r0, #0
 80008ac:	f001 fb10 	bl	8001ed0 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80008b0:	200a      	movs	r0, #10
 80008b2:	f000 fc8d 	bl	80011d0 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80008b6:	49b2      	ldr	r1, [pc, #712]	; (8000b80 <OTM8009A_Init+0x320>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 fb09 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80008be:	49b1      	ldr	r1, [pc, #708]	; (8000b84 <OTM8009A_Init+0x324>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 fb05 	bl	8001ed0 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80008c6:	49b0      	ldr	r1, [pc, #704]	; (8000b88 <OTM8009A_Init+0x328>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 fb01 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80008ce:	49af      	ldr	r1, [pc, #700]	; (8000b8c <OTM8009A_Init+0x32c>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 fafd 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80008d6:	49ae      	ldr	r1, [pc, #696]	; (8000b90 <OTM8009A_Init+0x330>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 faf9 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80008de:	49ad      	ldr	r1, [pc, #692]	; (8000b94 <OTM8009A_Init+0x334>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 faf5 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008e6:	499f      	ldr	r1, [pc, #636]	; (8000b64 <OTM8009A_Init+0x304>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 faf1 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80008ee:	49aa      	ldr	r1, [pc, #680]	; (8000b98 <OTM8009A_Init+0x338>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 faed 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008f6:	49a9      	ldr	r1, [pc, #676]	; (8000b9c <OTM8009A_Init+0x33c>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 fae9 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80008fe:	49a8      	ldr	r1, [pc, #672]	; (8000ba0 <OTM8009A_Init+0x340>)
 8000900:	2000      	movs	r0, #0
 8000902:	f001 fae5 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000906:	49a7      	ldr	r1, [pc, #668]	; (8000ba4 <OTM8009A_Init+0x344>)
 8000908:	2000      	movs	r0, #0
 800090a:	f001 fae1 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800090e:	49a6      	ldr	r1, [pc, #664]	; (8000ba8 <OTM8009A_Init+0x348>)
 8000910:	2000      	movs	r0, #0
 8000912:	f001 fadd 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000916:	49a5      	ldr	r1, [pc, #660]	; (8000bac <OTM8009A_Init+0x34c>)
 8000918:	2000      	movs	r0, #0
 800091a:	f001 fad9 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800091e:	49a4      	ldr	r1, [pc, #656]	; (8000bb0 <OTM8009A_Init+0x350>)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 fad5 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000926:	49a3      	ldr	r1, [pc, #652]	; (8000bb4 <OTM8009A_Init+0x354>)
 8000928:	2000      	movs	r0, #0
 800092a:	f001 fad1 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800092e:	4997      	ldr	r1, [pc, #604]	; (8000b8c <OTM8009A_Init+0x32c>)
 8000930:	2000      	movs	r0, #0
 8000932:	f001 facd 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000936:	498b      	ldr	r1, [pc, #556]	; (8000b64 <OTM8009A_Init+0x304>)
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fac9 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800093e:	499e      	ldr	r1, [pc, #632]	; (8000bb8 <OTM8009A_Init+0x358>)
 8000940:	2002      	movs	r0, #2
 8000942:	f001 fac5 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000946:	499d      	ldr	r1, [pc, #628]	; (8000bbc <OTM8009A_Init+0x35c>)
 8000948:	2000      	movs	r0, #0
 800094a:	f001 fac1 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800094e:	499c      	ldr	r1, [pc, #624]	; (8000bc0 <OTM8009A_Init+0x360>)
 8000950:	2000      	movs	r0, #0
 8000952:	f001 fabd 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000956:	499b      	ldr	r1, [pc, #620]	; (8000bc4 <OTM8009A_Init+0x364>)
 8000958:	2000      	movs	r0, #0
 800095a:	f001 fab9 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800095e:	499a      	ldr	r1, [pc, #616]	; (8000bc8 <OTM8009A_Init+0x368>)
 8000960:	2000      	movs	r0, #0
 8000962:	f001 fab5 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000966:	4999      	ldr	r1, [pc, #612]	; (8000bcc <OTM8009A_Init+0x36c>)
 8000968:	2000      	movs	r0, #0
 800096a:	f001 fab1 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800096e:	4998      	ldr	r1, [pc, #608]	; (8000bd0 <OTM8009A_Init+0x370>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 faad 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000976:	4989      	ldr	r1, [pc, #548]	; (8000b9c <OTM8009A_Init+0x33c>)
 8000978:	2000      	movs	r0, #0
 800097a:	f001 faa9 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800097e:	4995      	ldr	r1, [pc, #596]	; (8000bd4 <OTM8009A_Init+0x374>)
 8000980:	2000      	movs	r0, #0
 8000982:	f001 faa5 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000986:	4987      	ldr	r1, [pc, #540]	; (8000ba4 <OTM8009A_Init+0x344>)
 8000988:	2000      	movs	r0, #0
 800098a:	f001 faa1 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800098e:	4992      	ldr	r1, [pc, #584]	; (8000bd8 <OTM8009A_Init+0x378>)
 8000990:	2000      	movs	r0, #0
 8000992:	f001 fa9d 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000996:	4991      	ldr	r1, [pc, #580]	; (8000bdc <OTM8009A_Init+0x37c>)
 8000998:	2000      	movs	r0, #0
 800099a:	f001 fa99 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800099e:	4990      	ldr	r1, [pc, #576]	; (8000be0 <OTM8009A_Init+0x380>)
 80009a0:	2002      	movs	r0, #2
 80009a2:	f001 fa95 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009a6:	4971      	ldr	r1, [pc, #452]	; (8000b6c <OTM8009A_Init+0x30c>)
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 fa91 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80009ae:	498d      	ldr	r1, [pc, #564]	; (8000be4 <OTM8009A_Init+0x384>)
 80009b0:	2006      	movs	r0, #6
 80009b2:	f001 fa8d 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009b6:	498c      	ldr	r1, [pc, #560]	; (8000be8 <OTM8009A_Init+0x388>)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 fa89 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80009be:	498b      	ldr	r1, [pc, #556]	; (8000bec <OTM8009A_Init+0x38c>)
 80009c0:	200e      	movs	r0, #14
 80009c2:	f001 fa85 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009c6:	498a      	ldr	r1, [pc, #552]	; (8000bf0 <OTM8009A_Init+0x390>)
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 fa81 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80009ce:	4989      	ldr	r1, [pc, #548]	; (8000bf4 <OTM8009A_Init+0x394>)
 80009d0:	200e      	movs	r0, #14
 80009d2:	f001 fa7d 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009d6:	4988      	ldr	r1, [pc, #544]	; (8000bf8 <OTM8009A_Init+0x398>)
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 fa79 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80009de:	4987      	ldr	r1, [pc, #540]	; (8000bfc <OTM8009A_Init+0x39c>)
 80009e0:	200a      	movs	r0, #10
 80009e2:	f001 fa75 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80009e6:	4986      	ldr	r1, [pc, #536]	; (8000c00 <OTM8009A_Init+0x3a0>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 fa71 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80009ee:	4985      	ldr	r1, [pc, #532]	; (8000c04 <OTM8009A_Init+0x3a4>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f001 fa6d 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009f6:	495d      	ldr	r1, [pc, #372]	; (8000b6c <OTM8009A_Init+0x30c>)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 fa69 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80009fe:	4982      	ldr	r1, [pc, #520]	; (8000c08 <OTM8009A_Init+0x3a8>)
 8000a00:	200a      	movs	r0, #10
 8000a02:	f001 fa65 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a06:	4981      	ldr	r1, [pc, #516]	; (8000c0c <OTM8009A_Init+0x3ac>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 fa61 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8000a0e:	4980      	ldr	r1, [pc, #512]	; (8000c10 <OTM8009A_Init+0x3b0>)
 8000a10:	200f      	movs	r0, #15
 8000a12:	f001 fa5d 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a16:	4974      	ldr	r1, [pc, #464]	; (8000be8 <OTM8009A_Init+0x388>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 fa59 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000a1e:	497d      	ldr	r1, [pc, #500]	; (8000c14 <OTM8009A_Init+0x3b4>)
 8000a20:	200f      	movs	r0, #15
 8000a22:	f001 fa55 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a26:	4972      	ldr	r1, [pc, #456]	; (8000bf0 <OTM8009A_Init+0x390>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 fa51 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000a2e:	497a      	ldr	r1, [pc, #488]	; (8000c18 <OTM8009A_Init+0x3b8>)
 8000a30:	200a      	movs	r0, #10
 8000a32:	f001 fa4d 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000a36:	4970      	ldr	r1, [pc, #448]	; (8000bf8 <OTM8009A_Init+0x398>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 fa49 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000a3e:	4977      	ldr	r1, [pc, #476]	; (8000c1c <OTM8009A_Init+0x3bc>)
 8000a40:	200f      	movs	r0, #15
 8000a42:	f001 fa45 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a46:	496e      	ldr	r1, [pc, #440]	; (8000c00 <OTM8009A_Init+0x3a0>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 fa41 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000a4e:	4974      	ldr	r1, [pc, #464]	; (8000c20 <OTM8009A_Init+0x3c0>)
 8000a50:	200f      	movs	r0, #15
 8000a52:	f001 fa3d 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000a56:	4973      	ldr	r1, [pc, #460]	; (8000c24 <OTM8009A_Init+0x3c4>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 fa39 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000a5e:	4972      	ldr	r1, [pc, #456]	; (8000c28 <OTM8009A_Init+0x3c8>)
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 fa35 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000a66:	4971      	ldr	r1, [pc, #452]	; (8000c2c <OTM8009A_Init+0x3cc>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 fa31 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000a6e:	4970      	ldr	r1, [pc, #448]	; (8000c30 <OTM8009A_Init+0x3d0>)
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 fa2d 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000a76:	493d      	ldr	r1, [pc, #244]	; (8000b6c <OTM8009A_Init+0x30c>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 fa29 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000a7e:	496d      	ldr	r1, [pc, #436]	; (8000c34 <OTM8009A_Init+0x3d4>)
 8000a80:	200a      	movs	r0, #10
 8000a82:	f001 fa25 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a86:	4961      	ldr	r1, [pc, #388]	; (8000c0c <OTM8009A_Init+0x3ac>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 fa21 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000a8e:	496a      	ldr	r1, [pc, #424]	; (8000c38 <OTM8009A_Init+0x3d8>)
 8000a90:	200f      	movs	r0, #15
 8000a92:	f001 fa1d 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a96:	4954      	ldr	r1, [pc, #336]	; (8000be8 <OTM8009A_Init+0x388>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f001 fa19 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000a9e:	4967      	ldr	r1, [pc, #412]	; (8000c3c <OTM8009A_Init+0x3dc>)
 8000aa0:	200f      	movs	r0, #15
 8000aa2:	f001 fa15 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000aa6:	4952      	ldr	r1, [pc, #328]	; (8000bf0 <OTM8009A_Init+0x390>)
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 fa11 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000aae:	4964      	ldr	r1, [pc, #400]	; (8000c40 <OTM8009A_Init+0x3e0>)
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	f001 fa0d 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000ab6:	4950      	ldr	r1, [pc, #320]	; (8000bf8 <OTM8009A_Init+0x398>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f001 fa09 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000abe:	4961      	ldr	r1, [pc, #388]	; (8000c44 <OTM8009A_Init+0x3e4>)
 8000ac0:	200f      	movs	r0, #15
 8000ac2:	f001 fa05 	bl	8001ed0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000ac6:	494e      	ldr	r1, [pc, #312]	; (8000c00 <OTM8009A_Init+0x3a0>)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f001 fa01 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000ace:	495e      	ldr	r1, [pc, #376]	; (8000c48 <OTM8009A_Init+0x3e8>)
 8000ad0:	200f      	movs	r0, #15
 8000ad2:	f001 f9fd 	bl	8001ed0 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000ad6:	4931      	ldr	r1, [pc, #196]	; (8000b9c <OTM8009A_Init+0x33c>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f9f9 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000ade:	495b      	ldr	r1, [pc, #364]	; (8000c4c <OTM8009A_Init+0x3ec>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 f9f5 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000ae6:	495a      	ldr	r1, [pc, #360]	; (8000c50 <OTM8009A_Init+0x3f0>)
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f001 f9f1 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000aee:	4959      	ldr	r1, [pc, #356]	; (8000c54 <OTM8009A_Init+0x3f4>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 f9ed 	bl	8001ed0 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000af6:	4958      	ldr	r1, [pc, #352]	; (8000c58 <OTM8009A_Init+0x3f8>)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f9e9 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000afe:	4957      	ldr	r1, [pc, #348]	; (8000c5c <OTM8009A_Init+0x3fc>)
 8000b00:	2000      	movs	r0, #0
 8000b02:	f001 f9e5 	bl	8001ed0 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b06:	4917      	ldr	r1, [pc, #92]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f001 f9e1 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000b0e:	4954      	ldr	r1, [pc, #336]	; (8000c60 <OTM8009A_Init+0x400>)
 8000b10:	2003      	movs	r0, #3
 8000b12:	f001 f9dd 	bl	8001ed0 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b16:	4913      	ldr	r1, [pc, #76]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f001 f9d9 	bl	8001ed0 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b1e:	4911      	ldr	r1, [pc, #68]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f9d5 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000b26:	494f      	ldr	r1, [pc, #316]	; (8000c64 <OTM8009A_Init+0x404>)
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f001 f9d1 	bl	8001ed0 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f001 f9cd 	bl	8001ed0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000b36:	494c      	ldr	r1, [pc, #304]	; (8000c68 <OTM8009A_Init+0x408>)
 8000b38:	2010      	movs	r0, #16
 8000b3a:	f001 f9c9 	bl	8001ed0 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000b3e:	494b      	ldr	r1, [pc, #300]	; (8000c6c <OTM8009A_Init+0x40c>)
 8000b40:	2000      	movs	r0, #0
 8000b42:	f001 f9c5 	bl	8001ed0 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000b46:	2078      	movs	r0, #120	; 0x78
 8000b48:	f000 fb42 	bl	80011d0 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 8090 	beq.w	8000c74 <OTM8009A_Init+0x414>
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d000      	beq.n	8000b5a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000b58:	e091      	b.n	8000c7e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000b5a:	4945      	ldr	r1, [pc, #276]	; (8000c70 <OTM8009A_Init+0x410>)
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f001 f9b7 	bl	8001ed0 <DSI_IO_WriteCmd>
    break;
 8000b62:	e08c      	b.n	8000c7e <OTM8009A_Init+0x41e>
 8000b64:	0800fcf8 	.word	0x0800fcf8
 8000b68:	0800fbb0 	.word	0x0800fbb0
 8000b6c:	0800fcfc 	.word	0x0800fcfc
 8000b70:	0800fbb4 	.word	0x0800fbb4
 8000b74:	0800fd00 	.word	0x0800fd00
 8000b78:	0800fd04 	.word	0x0800fd04
 8000b7c:	0800fd08 	.word	0x0800fd08
 8000b80:	0800fd0c 	.word	0x0800fd0c
 8000b84:	0800fd10 	.word	0x0800fd10
 8000b88:	0800fd14 	.word	0x0800fd14
 8000b8c:	0800fd18 	.word	0x0800fd18
 8000b90:	0800fd1c 	.word	0x0800fd1c
 8000b94:	0800fd20 	.word	0x0800fd20
 8000b98:	0800fd24 	.word	0x0800fd24
 8000b9c:	0800fd28 	.word	0x0800fd28
 8000ba0:	0800fd2c 	.word	0x0800fd2c
 8000ba4:	0800fd30 	.word	0x0800fd30
 8000ba8:	0800fd34 	.word	0x0800fd34
 8000bac:	0800fd38 	.word	0x0800fd38
 8000bb0:	0800fd3c 	.word	0x0800fd3c
 8000bb4:	0800fd40 	.word	0x0800fd40
 8000bb8:	0800fbe0 	.word	0x0800fbe0
 8000bbc:	0800fd44 	.word	0x0800fd44
 8000bc0:	0800fd48 	.word	0x0800fd48
 8000bc4:	0800fd4c 	.word	0x0800fd4c
 8000bc8:	0800fd50 	.word	0x0800fd50
 8000bcc:	0800fd54 	.word	0x0800fd54
 8000bd0:	0800fd58 	.word	0x0800fd58
 8000bd4:	0800fd5c 	.word	0x0800fd5c
 8000bd8:	0800fd60 	.word	0x0800fd60
 8000bdc:	0800fd64 	.word	0x0800fd64
 8000be0:	0800fbe4 	.word	0x0800fbe4
 8000be4:	0800fbe8 	.word	0x0800fbe8
 8000be8:	0800fd68 	.word	0x0800fd68
 8000bec:	0800fbf0 	.word	0x0800fbf0
 8000bf0:	0800fd6c 	.word	0x0800fd6c
 8000bf4:	0800fc00 	.word	0x0800fc00
 8000bf8:	0800fd70 	.word	0x0800fd70
 8000bfc:	0800fc10 	.word	0x0800fc10
 8000c00:	0800fd74 	.word	0x0800fd74
 8000c04:	0800fdac 	.word	0x0800fdac
 8000c08:	0800fc1c 	.word	0x0800fc1c
 8000c0c:	0800fd78 	.word	0x0800fd78
 8000c10:	0800fc28 	.word	0x0800fc28
 8000c14:	0800fc38 	.word	0x0800fc38
 8000c18:	0800fc48 	.word	0x0800fc48
 8000c1c:	0800fc54 	.word	0x0800fc54
 8000c20:	0800fc64 	.word	0x0800fc64
 8000c24:	0800fd7c 	.word	0x0800fd7c
 8000c28:	0800fc74 	.word	0x0800fc74
 8000c2c:	0800fd80 	.word	0x0800fd80
 8000c30:	0800fc80 	.word	0x0800fc80
 8000c34:	0800fc8c 	.word	0x0800fc8c
 8000c38:	0800fc98 	.word	0x0800fc98
 8000c3c:	0800fca8 	.word	0x0800fca8
 8000c40:	0800fcb8 	.word	0x0800fcb8
 8000c44:	0800fcc4 	.word	0x0800fcc4
 8000c48:	0800fcd4 	.word	0x0800fcd4
 8000c4c:	0800fdb0 	.word	0x0800fdb0
 8000c50:	0800fdb4 	.word	0x0800fdb4
 8000c54:	0800fdb8 	.word	0x0800fdb8
 8000c58:	0800fdbc 	.word	0x0800fdbc
 8000c5c:	0800fdc0 	.word	0x0800fdc0
 8000c60:	0800fce4 	.word	0x0800fce4
 8000c64:	0800fbb8 	.word	0x0800fbb8
 8000c68:	0800fbcc 	.word	0x0800fbcc
 8000c6c:	0800fd84 	.word	0x0800fd84
 8000c70:	0800fd88 	.word	0x0800fd88
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000c74:	491a      	ldr	r1, [pc, #104]	; (8000ce0 <OTM8009A_Init+0x480>)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f001 f92a 	bl	8001ed0 <DSI_IO_WriteCmd>
    break;
 8000c7c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d10b      	bne.n	8000c9c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000c84:	4917      	ldr	r1, [pc, #92]	; (8000ce4 <OTM8009A_Init+0x484>)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f001 f922 	bl	8001ed0 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000c8c:	4916      	ldr	r1, [pc, #88]	; (8000ce8 <OTM8009A_Init+0x488>)
 8000c8e:	2004      	movs	r0, #4
 8000c90:	f001 f91e 	bl	8001ed0 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000c94:	4915      	ldr	r1, [pc, #84]	; (8000cec <OTM8009A_Init+0x48c>)
 8000c96:	2004      	movs	r0, #4
 8000c98:	f001 f91a 	bl	8001ed0 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000c9c:	4914      	ldr	r1, [pc, #80]	; (8000cf0 <OTM8009A_Init+0x490>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f001 f916 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000ca4:	4913      	ldr	r1, [pc, #76]	; (8000cf4 <OTM8009A_Init+0x494>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f001 f912 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000cac:	4912      	ldr	r1, [pc, #72]	; (8000cf8 <OTM8009A_Init+0x498>)
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 f90e 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000cb4:	4911      	ldr	r1, [pc, #68]	; (8000cfc <OTM8009A_Init+0x49c>)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f001 f90a 	bl	8001ed0 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000cbc:	4910      	ldr	r1, [pc, #64]	; (8000d00 <OTM8009A_Init+0x4a0>)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 f906 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000cc4:	490f      	ldr	r1, [pc, #60]	; (8000d04 <OTM8009A_Init+0x4a4>)
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f001 f902 	bl	8001ed0 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000ccc:	490e      	ldr	r1, [pc, #56]	; (8000d08 <OTM8009A_Init+0x4a8>)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f001 f8fe 	bl	8001ed0 <DSI_IO_WriteCmd>

  return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	0800fd8c 	.word	0x0800fd8c
 8000ce4:	0800fd90 	.word	0x0800fd90
 8000ce8:	0800fce8 	.word	0x0800fce8
 8000cec:	0800fcf0 	.word	0x0800fcf0
 8000cf0:	0800fd94 	.word	0x0800fd94
 8000cf4:	0800fd98 	.word	0x0800fd98
 8000cf8:	0800fd9c 	.word	0x0800fd9c
 8000cfc:	0800fda0 	.word	0x0800fda0
 8000d00:	0800fda4 	.word	0x0800fda4
 8000d04:	0800fcf8 	.word	0x0800fcf8
 8000d08:	0800fda8 	.word	0x0800fda8

08000d0c <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <BSP_LED_Init+0x54>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <BSP_LED_Init+0x54>)
 8000d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <BSP_LED_Init+0x54>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4a0c      	ldr	r2, [pc, #48]	; (8000d64 <BSP_LED_Init+0x58>)
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <BSP_LED_Init+0x5c>)
 8000d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4c:	f107 020c 	add.w	r2, r7, #12
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f004 f91a 	bl	8004f8c <HAL_GPIO_Init>

}
 8000d58:	bf00      	nop
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	20000028 	.word	0x20000028
 8000d68:	20000030 	.word	0x20000030

08000d6c <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <BSP_LED_Toggle+0x2c>)
 8000d7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <BSP_LED_Toggle+0x30>)
 8000d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f004 fbe4 	bl	8005556 <HAL_GPIO_TogglePin>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000030 	.word	0x20000030
 8000d9c:	20000028 	.word	0x20000028

08000da0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	460a      	mov	r2, r1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  BUTTON_GPIO_CLK_ENABLE();
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <BSP_PB_Init+0x9c>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <BSP_PB_Init+0x9c>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <BSP_PB_Init+0x9c>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]

  if(Button_Mode == BUTTON_MODE_GPIO)
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d111      	bne.n	8000df2 <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000dce:	2301      	movs	r3, #1
 8000dd0:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <BSP_PB_Init+0xa0>)
 8000de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de6:	f107 020c 	add.w	r2, r7, #12
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f004 f8cd 	bl	8004f8c <HAL_GPIO_Init>
  }

  if(Button_Mode == BUTTON_MODE_EXTI)
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d11d      	bne.n	8000e34 <BSP_PB_Init+0x94>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000df8:	2301      	movs	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <BSP_PB_Init+0xa4>)
 8000e06:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <BSP_PB_Init+0xa0>)
 8000e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e10:	f107 020c 	add.w	r2, r7, #12
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f004 f8b8 	bl	8004f8c <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000e1c:	2306      	movs	r3, #6
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	2200      	movs	r2, #0
 8000e22:	210f      	movs	r1, #15
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fba6 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 fbbd 	bl	80035ae <HAL_NVIC_EnableIRQ>
  }
}
 8000e34:	bf00      	nop
 8000e36:	3720      	adds	r7, #32
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	20000038 	.word	0x20000038
 8000e44:	10110000 	.word	0x10110000

08000e48 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	; 0x30
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a58      	ldr	r2, [pc, #352]	; (8000fb4 <I2Cx_MspInit+0x16c>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d15b      	bne.n	8000f10 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000e58:	4b57      	ldr	r3, [pc, #348]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a56      	ldr	r2, [pc, #344]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
 8000e64:	4b54      	ldr	r3, [pc, #336]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	f003 0308 	and.w	r3, r3, #8
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000e70:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a50      	ldr	r2, [pc, #320]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7c:	4b4e      	ldr	r3, [pc, #312]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e8e:	2312      	movs	r3, #18
 8000e90:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e96:	2302      	movs	r3, #2
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4845      	ldr	r0, [pc, #276]	; (8000fbc <I2Cx_MspInit+0x174>)
 8000ea6:	f004 f871 	bl	8004f8c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000eae:	230b      	movs	r3, #11
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4841      	ldr	r0, [pc, #260]	; (8000fc0 <I2Cx_MspInit+0x178>)
 8000eba:	f004 f867 	bl	8004f8c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000ebe:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a3d      	ldr	r2, [pc, #244]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000ec4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000ed6:	4b38      	ldr	r3, [pc, #224]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	4a37      	ldr	r2, [pc, #220]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000edc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ee0:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000ee2:	4b35      	ldr	r3, [pc, #212]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	4a34      	ldr	r2, [pc, #208]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000ee8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000eec:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	210f      	movs	r1, #15
 8000ef2:	205f      	movs	r0, #95	; 0x5f
 8000ef4:	f002 fb3f 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000ef8:	205f      	movs	r0, #95	; 0x5f
 8000efa:	f002 fb58 	bl	80035ae <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	210f      	movs	r1, #15
 8000f02:	2060      	movs	r0, #96	; 0x60
 8000f04:	f002 fb37 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000f08:	2060      	movs	r0, #96	; 0x60
 8000f0a:	f002 fb50 	bl	80035ae <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000f0e:	e04d      	b.n	8000fac <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000f10:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	4a28      	ldr	r2, [pc, #160]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1c:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f2e:	2312      	movs	r3, #18
 8000f30:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000f36:	2302      	movs	r3, #2
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	481e      	ldr	r0, [pc, #120]	; (8000fc0 <I2Cx_MspInit+0x178>)
 8000f46:	f004 f821 	bl	8004f8c <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	481a      	ldr	r0, [pc, #104]	; (8000fc0 <I2Cx_MspInit+0x178>)
 8000f58:	f004 f818 	bl	8004f8c <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000f62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000f7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f7e:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <I2Cx_MspInit+0x170>)
 8000f86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f8a:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	210f      	movs	r1, #15
 8000f90:	201f      	movs	r0, #31
 8000f92:	f002 faf0 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000f96:	201f      	movs	r0, #31
 8000f98:	f002 fb09 	bl	80035ae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	2020      	movs	r0, #32
 8000fa2:	f002 fae8 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000fa6:	2020      	movs	r0, #32
 8000fa8:	f002 fb01 	bl	80035ae <HAL_NVIC_EnableIRQ>
}
 8000fac:	bf00      	nop
 8000fae:	3730      	adds	r7, #48	; 0x30
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200002fc 	.word	0x200002fc
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020c00 	.word	0x40020c00
 8000fc0:	40020400 	.word	0x40020400

08000fc4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f004 fdf7 	bl	8005bc0 <HAL_I2C_GetState>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d125      	bne.n	8001024 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <I2Cx_Init+0x68>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d103      	bne.n	8000fe8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a13      	ldr	r2, [pc, #76]	; (8001030 <I2Cx_Init+0x6c>)
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e002      	b.n	8000fee <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a12      	ldr	r2, [pc, #72]	; (8001034 <I2Cx_Init+0x70>)
 8000fec:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a11      	ldr	r2, [pc, #68]	; (8001038 <I2Cx_Init+0x74>)
 8000ff2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff15 	bl	8000e48 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f004 facc 	bl	80055bc <HAL_I2C_Init>
  }
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200002fc 	.word	0x200002fc
 8001030:	40006000 	.word	0x40006000
 8001034:	40005400 	.word	0x40005400
 8001038:	40912732 	.word	0x40912732

0800103c <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af04      	add	r7, sp, #16
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	4608      	mov	r0, r1
 8001046:	4611      	mov	r1, r2
 8001048:	461a      	mov	r2, r3
 800104a:	4603      	mov	r3, r0
 800104c:	72fb      	strb	r3, [r7, #11]
 800104e:	460b      	mov	r3, r1
 8001050:	813b      	strh	r3, [r7, #8]
 8001052:	4613      	mov	r3, r2
 8001054:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b299      	uxth	r1, r3
 800105e:	88f8      	ldrh	r0, [r7, #6]
 8001060:	893a      	ldrh	r2, [r7, #8]
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	4603      	mov	r3, r0
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f004 fc8a 	bl	800598c <HAL_I2C_Mem_Read>
 8001078:	4603      	mov	r3, r0
 800107a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800107c:	7dfb      	ldrb	r3, [r7, #23]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d004      	beq.n	800108c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001082:	7afb      	ldrb	r3, [r7, #11]
 8001084:	4619      	mov	r1, r3
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f000 f832 	bl	80010f0 <I2Cx_Error>
  }
  return status;
 800108c:	7dfb      	ldrb	r3, [r7, #23]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b08a      	sub	sp, #40	; 0x28
 800109a:	af04      	add	r7, sp, #16
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	4608      	mov	r0, r1
 80010a0:	4611      	mov	r1, r2
 80010a2:	461a      	mov	r2, r3
 80010a4:	4603      	mov	r3, r0
 80010a6:	72fb      	strb	r3, [r7, #11]
 80010a8:	460b      	mov	r3, r1
 80010aa:	813b      	strh	r3, [r7, #8]
 80010ac:	4613      	mov	r3, r2
 80010ae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80010b4:	7afb      	ldrb	r3, [r7, #11]
 80010b6:	b299      	uxth	r1, r3
 80010b8:	88f8      	ldrh	r0, [r7, #6]
 80010ba:	893a      	ldrh	r2, [r7, #8]
 80010bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	4603      	mov	r3, r0
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f004 fb49 	bl	8005764 <HAL_I2C_Mem_Write>
 80010d2:	4603      	mov	r3, r0
 80010d4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d004      	beq.n	80010e6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	4619      	mov	r1, r3
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f000 f805 	bl	80010f0 <I2Cx_Error>
  }
  return status;
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f004 faed 	bl	80056dc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff5e 	bl	8000fc4 <I2Cx_Init>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <TS_IO_Init+0x10>)
 8001116:	f7ff ff55 	bl	8000fc4 <I2Cx_Init>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200002fc 	.word	0x200002fc

08001124 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af02      	add	r7, sp, #8
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
 800112e:	460b      	mov	r3, r1
 8001130:	71bb      	strb	r3, [r7, #6]
 8001132:	4613      	mov	r3, r2
 8001134:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	b29a      	uxth	r2, r3
 800113a:	79f9      	ldrb	r1, [r7, #7]
 800113c:	2301      	movs	r3, #1
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	1d7b      	adds	r3, r7, #5
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	4803      	ldr	r0, [pc, #12]	; (8001154 <TS_IO_Write+0x30>)
 8001148:	f7ff ffa5 	bl	8001096 <I2Cx_WriteMultiple>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200002fc 	.word	0x200002fc

08001158 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af02      	add	r7, sp, #8
 800115e:	4603      	mov	r3, r0
 8001160:	460a      	mov	r2, r1
 8001162:	71fb      	strb	r3, [r7, #7]
 8001164:	4613      	mov	r3, r2
 8001166:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	b29a      	uxth	r2, r3
 8001170:	79f9      	ldrb	r1, [r7, #7]
 8001172:	2301      	movs	r3, #1
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	f107 030f 	add.w	r3, r7, #15
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2301      	movs	r3, #1
 800117e:	4804      	ldr	r0, [pc, #16]	; (8001190 <TS_IO_Read+0x38>)
 8001180:	f7ff ff5c 	bl	800103c <I2Cx_ReadMultiple>

  return read_value;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200002fc 	.word	0x200002fc

08001194 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af02      	add	r7, sp, #8
 800119a:	603a      	str	r2, [r7, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
 80011a2:	460b      	mov	r3, r1
 80011a4:	71bb      	strb	r3, [r7, #6]
 80011a6:	4613      	mov	r3, r2
 80011a8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80011aa:	79bb      	ldrb	r3, [r7, #6]
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	79f9      	ldrb	r1, [r7, #7]
 80011b0:	88bb      	ldrh	r3, [r7, #4]
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	4804      	ldr	r0, [pc, #16]	; (80011cc <TS_IO_ReadMultiple+0x38>)
 80011bc:	f7ff ff3e 	bl	800103c <I2Cx_ReadMultiple>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b29b      	uxth	r3, r3
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200002fc 	.word	0x200002fc

080011d0 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f001 fc1d 	bl	8002a18 <HAL_Delay>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80011ea:	2001      	movs	r0, #1
 80011ec:	f000 f804 	bl	80011f8 <BSP_LCD_InitEx>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b090      	sub	sp, #64	; 0x40
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8001202:	f646 3325 	movw	r3, #27429	; 0x6b25
 8001206:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8001210:	f000 f936 	bl	8001480 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8001214:	f000 fe86 	bl	8001f24 <LCD_IO_GetID>
 8001218:	4603      	mov	r3, r0
 800121a:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 800121c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800121e:	2b11      	cmp	r3, #17
 8001220:	d001      	beq.n	8001226 <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8001222:	2301      	movs	r3, #1
 8001224:	e113      	b.n	800144e <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8001226:	f000 fe85 	bl	8001f34 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 800122a:	4b8b      	ldr	r3, [pc, #556]	; (8001458 <BSP_LCD_InitEx+0x260>)
 800122c:	4a8b      	ldr	r2, [pc, #556]	; (800145c <BSP_LCD_InitEx+0x264>)
 800122e:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8001230:	4889      	ldr	r0, [pc, #548]	; (8001458 <BSP_LCD_InitEx+0x260>)
 8001232:	f002 ff9d 	bl	8004170 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8001236:	2364      	movs	r3, #100	; 0x64
 8001238:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800123a:	2305      	movs	r3, #5
 800123c:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8001242:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001246:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001248:	4b83      	ldr	r3, [pc, #524]	; (8001458 <BSP_LCD_InitEx+0x260>)
 800124a:	2201      	movs	r2, #1
 800124c:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 800124e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	4a83      	ldr	r2, [pc, #524]	; (8001460 <BSP_LCD_InitEx+0x268>)
 8001254:	fba2 2303 	umull	r2, r3, r2, r3
 8001258:	0a9b      	lsrs	r3, r3, #10
 800125a:	4a7f      	ldr	r2, [pc, #508]	; (8001458 <BSP_LCD_InitEx+0x260>)
 800125c:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	4619      	mov	r1, r3
 8001264:	487c      	ldr	r0, [pc, #496]	; (8001458 <BSP_LCD_InitEx+0x260>)
 8001266:	f002 fe69 	bl	8003f3c <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d108      	bne.n	8001282 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001270:	4b7c      	ldr	r3, [pc, #496]	; (8001464 <BSP_LCD_InitEx+0x26c>)
 8001272:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001276:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8001278:	4b7b      	ldr	r3, [pc, #492]	; (8001468 <BSP_LCD_InitEx+0x270>)
 800127a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e007      	b.n	8001292 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8001282:	4b78      	ldr	r3, [pc, #480]	; (8001464 <BSP_LCD_InitEx+0x26c>)
 8001284:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001288:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800128a:	4b77      	ldr	r3, [pc, #476]	; (8001468 <BSP_LCD_InitEx+0x270>)
 800128c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001290:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8001292:	4b74      	ldr	r3, [pc, #464]	; (8001464 <BSP_LCD_InitEx+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 8001298:	4b73      	ldr	r3, [pc, #460]	; (8001468 <BSP_LCD_InitEx+0x270>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 800129e:	2301      	movs	r3, #1
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 80012a2:	230f      	movs	r3, #15
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 80012a6:	2310      	movs	r3, #16
 80012a8:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 80012aa:	2302      	movs	r3, #2
 80012ac:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 80012ae:	2322      	movs	r3, #34	; 0x22
 80012b0:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 80012b2:	2322      	movs	r3, #34	; 0x22
 80012b4:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80012b6:	4b6d      	ldr	r3, [pc, #436]	; (800146c <BSP_LCD_InitEx+0x274>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80012bc:	4b6b      	ldr	r3, [pc, #428]	; (800146c <BSP_LCD_InitEx+0x274>)
 80012be:	2205      	movs	r2, #5
 80012c0:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80012c2:	4b6a      	ldr	r3, [pc, #424]	; (800146c <BSP_LCD_InitEx+0x274>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80012c8:	4b68      	ldr	r3, [pc, #416]	; (800146c <BSP_LCD_InitEx+0x274>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80012ce:	4b67      	ldr	r3, [pc, #412]	; (800146c <BSP_LCD_InitEx+0x274>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80012d4:	4b65      	ldr	r3, [pc, #404]	; (800146c <BSP_LCD_InitEx+0x274>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80012da:	4b64      	ldr	r3, [pc, #400]	; (800146c <BSP_LCD_InitEx+0x274>)
 80012dc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80012e0:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80012e2:	4b62      	ldr	r3, [pc, #392]	; (800146c <BSP_LCD_InitEx+0x274>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80012e8:	4a60      	ldr	r2, [pc, #384]	; (800146c <BSP_LCD_InitEx+0x274>)
 80012ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ec:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012f2:	fb02 f203 	mul.w	r2, r2, r3
 80012f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fc:	4a5b      	ldr	r2, [pc, #364]	; (800146c <BSP_LCD_InitEx+0x274>)
 80012fe:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001304:	fb02 f203 	mul.w	r2, r2, r3
 8001308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4a57      	ldr	r2, [pc, #348]	; (800146c <BSP_LCD_InitEx+0x274>)
 8001310:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8001312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	441a      	add	r2, r3
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	441a      	add	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	4413      	add	r3, r2
 8001320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001322:	fb02 f203 	mul.w	r2, r2, r3
 8001326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001328:	fbb2 f3f3 	udiv	r3, r2, r3
 800132c:	4a4f      	ldr	r2, [pc, #316]	; (800146c <BSP_LCD_InitEx+0x274>)
 800132e:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8001330:	4a4e      	ldr	r2, [pc, #312]	; (800146c <BSP_LCD_InitEx+0x274>)
 8001332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001334:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8001336:	4a4d      	ldr	r2, [pc, #308]	; (800146c <BSP_LCD_InitEx+0x274>)
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 800133c:	4a4b      	ldr	r2, [pc, #300]	; (800146c <BSP_LCD_InitEx+0x274>)
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8001342:	4a4a      	ldr	r2, [pc, #296]	; (800146c <BSP_LCD_InitEx+0x274>)
 8001344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001346:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8001348:	4b48      	ldr	r3, [pc, #288]	; (800146c <BSP_LCD_InitEx+0x274>)
 800134a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800134e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001350:	4b46      	ldr	r3, [pc, #280]	; (800146c <BSP_LCD_InitEx+0x274>)
 8001352:	2210      	movs	r2, #16
 8001354:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8001356:	4b45      	ldr	r3, [pc, #276]	; (800146c <BSP_LCD_InitEx+0x274>)
 8001358:	2200      	movs	r2, #0
 800135a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 800135c:	4b43      	ldr	r3, [pc, #268]	; (800146c <BSP_LCD_InitEx+0x274>)
 800135e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001362:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001364:	4b41      	ldr	r3, [pc, #260]	; (800146c <BSP_LCD_InitEx+0x274>)
 8001366:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800136a:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 800136c:	4b3f      	ldr	r3, [pc, #252]	; (800146c <BSP_LCD_InitEx+0x274>)
 800136e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001372:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001374:	4b3d      	ldr	r3, [pc, #244]	; (800146c <BSP_LCD_InitEx+0x274>)
 8001376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137a:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 800137c:	4b3b      	ldr	r3, [pc, #236]	; (800146c <BSP_LCD_InitEx+0x274>)
 800137e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001382:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001384:	4b39      	ldr	r3, [pc, #228]	; (800146c <BSP_LCD_InitEx+0x274>)
 8001386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800138a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 800138c:	4937      	ldr	r1, [pc, #220]	; (800146c <BSP_LCD_InitEx+0x274>)
 800138e:	4832      	ldr	r0, [pc, #200]	; (8001458 <BSP_LCD_InitEx+0x260>)
 8001390:	f003 f846 	bl	8004420 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	3b01      	subs	r3, #1
 8001398:	4a35      	ldr	r2, [pc, #212]	; (8001470 <BSP_LCD_InitEx+0x278>)
 800139a:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4413      	add	r3, r2
 80013a2:	3b01      	subs	r3, #1
 80013a4:	4a32      	ldr	r2, [pc, #200]	; (8001470 <BSP_LCD_InitEx+0x278>)
 80013a6:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80013a8:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <BSP_LCD_InitEx+0x26c>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	441a      	add	r2, r3
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	4413      	add	r3, r2
 80013b4:	3b01      	subs	r3, #1
 80013b6:	4a2e      	ldr	r2, [pc, #184]	; (8001470 <BSP_LCD_InitEx+0x278>)
 80013b8:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <BSP_LCD_InitEx+0x26c>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	441a      	add	r2, r3
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	441a      	add	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	4413      	add	r3, r2
 80013ca:	3b01      	subs	r3, #1
 80013cc:	4a28      	ldr	r2, [pc, #160]	; (8001470 <BSP_LCD_InitEx+0x278>)
 80013ce:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <BSP_LCD_InitEx+0x26c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a26      	ldr	r2, [pc, #152]	; (8001470 <BSP_LCD_InitEx+0x278>)
 80013d6:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80013d8:	4b23      	ldr	r3, [pc, #140]	; (8001468 <BSP_LCD_InitEx+0x270>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a24      	ldr	r2, [pc, #144]	; (8001470 <BSP_LCD_InitEx+0x278>)
 80013de:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <BSP_LCD_InitEx+0x27c>)
 80013e2:	2208      	movs	r2, #8
 80013e4:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <BSP_LCD_InitEx+0x27c>)
 80013e8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80013ec:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <BSP_LCD_InitEx+0x27c>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <BSP_LCD_InitEx+0x27c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80013fa:	481e      	ldr	r0, [pc, #120]	; (8001474 <BSP_LCD_InitEx+0x27c>)
 80013fc:	f005 fd5e 	bl	8006ebc <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <BSP_LCD_InitEx+0x278>)
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <BSP_LCD_InitEx+0x278>)
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <BSP_LCD_InitEx+0x278>)
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <BSP_LCD_InitEx+0x278>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 800141e:	4b14      	ldr	r3, [pc, #80]	; (8001470 <BSP_LCD_InitEx+0x278>)
 8001420:	4a15      	ldr	r2, [pc, #84]	; (8001478 <BSP_LCD_InitEx+0x280>)
 8001422:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8001424:	4911      	ldr	r1, [pc, #68]	; (800146c <BSP_LCD_InitEx+0x274>)
 8001426:	4812      	ldr	r0, [pc, #72]	; (8001470 <BSP_LCD_InitEx+0x278>)
 8001428:	f005 f89c 	bl	8006564 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 800142c:	4810      	ldr	r0, [pc, #64]	; (8001470 <BSP_LCD_InitEx+0x278>)
 800142e:	f004 fdf1 	bl	8006014 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8001432:	4809      	ldr	r0, [pc, #36]	; (8001458 <BSP_LCD_InitEx+0x260>)
 8001434:	f003 fc86 	bl	8004d44 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001438:	f000 fefc 	bl	8002234 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800143c:	480f      	ldr	r0, [pc, #60]	; (800147c <BSP_LCD_InitEx+0x284>)
 800143e:	f000 f8e7 	bl	8001610 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4619      	mov	r1, r3
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff fa0a 	bl	8000860 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3740      	adds	r7, #64	; 0x40
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000664 	.word	0x20000664
 800145c:	40016c00 	.word	0x40016c00
 8001460:	43215e57 	.word	0x43215e57
 8001464:	2000004c 	.word	0x2000004c
 8001468:	20000050 	.word	0x20000050
 800146c:	20000348 	.word	0x20000348
 8001470:	200005bc 	.word	0x200005bc
 8001474:	200003d0 	.word	0x200003d0
 8001478:	40016800 	.word	0x40016800
 800147c:	2000003c 	.word	0x2000003c

08001480 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <BSP_LCD_Reset+0x68>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <BSP_LCD_Reset+0x68>)
 800148c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <BSP_LCD_Reset+0x68>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 800149e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a2:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	4619      	mov	r1, r3
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <BSP_LCD_Reset+0x6c>)
 80014b6:	f003 fd69 	bl	8004f8c <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c0:	480a      	ldr	r0, [pc, #40]	; (80014ec <BSP_LCD_Reset+0x6c>)
 80014c2:	f004 f82f 	bl	8005524 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 80014c6:	2014      	movs	r0, #20
 80014c8:	f001 faa6 	bl	8002a18 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <BSP_LCD_Reset+0x6c>)
 80014d4:	f004 f826 	bl	8005524 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80014d8:	200a      	movs	r0, #10
 80014da:	f001 fa9d 	bl	8002a18 <HAL_Delay>
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40022400 	.word	0x40022400

080014f0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <BSP_LCD_GetXSize+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	2000004c 	.word	0x2000004c

08001508 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <BSP_LCD_GetYSize+0x14>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000050 	.word	0x20000050

08001520 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b090      	sub	sp, #64	; 0x40
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001530:	f7ff ffde 	bl	80014f0 <BSP_LCD_GetXSize>
 8001534:	4603      	mov	r3, r0
 8001536:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800153c:	f7ff ffe4 	bl	8001508 <BSP_LCD_GetYSize>
 8001540:	4603      	mov	r3, r0
 8001542:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800154c:	23ff      	movs	r3, #255	; 0xff
 800154e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001566:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800156c:	2307      	movs	r3, #7
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001570:	f7ff ffbe 	bl	80014f0 <BSP_LCD_GetXSize>
 8001574:	4603      	mov	r3, r0
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001578:	f7ff ffc6 	bl	8001508 <BSP_LCD_GetYSize>
 800157c:	4603      	mov	r3, r0
 800157e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	4619      	mov	r1, r3
 8001588:	4812      	ldr	r0, [pc, #72]	; (80015d4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800158a:	f004 fe13 	bl	80061b4 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	4911      	ldr	r1, [pc, #68]	; (80015d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	3304      	adds	r3, #4
 800159e:	f04f 32ff 	mov.w	r2, #4294967295
 80015a2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80015a4:	88fa      	ldrh	r2, [r7, #6]
 80015a6:	490c      	ldr	r1, [pc, #48]	; (80015d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	3308      	adds	r3, #8
 80015b4:	4a09      	ldr	r2, [pc, #36]	; (80015dc <BSP_LCD_LayerDefaultInit+0xbc>)
 80015b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80015b8:	88fa      	ldrh	r2, [r7, #6]
 80015ba:	4907      	ldr	r1, [pc, #28]	; (80015d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80015ca:	601a      	str	r2, [r3, #0]
}
 80015cc:	bf00      	nop
 80015ce:	3740      	adds	r7, #64	; 0x40
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200005bc 	.word	0x200005bc
 80015d8:	200003b8 	.word	0x200003b8
 80015dc:	2000003c 	.word	0x2000003c

080015e0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <BSP_LCD_SetTextColor+0x28>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4907      	ldr	r1, [pc, #28]	; (800160c <BSP_LCD_SetTextColor+0x2c>)
 80015ee:	4613      	mov	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	601a      	str	r2, [r3, #0]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	200003b4 	.word	0x200003b4
 800160c:	200003b8 	.word	0x200003b8

08001610 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <BSP_LCD_SetFont+0x2c>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4908      	ldr	r1, [pc, #32]	; (8001640 <BSP_LCD_SetFont+0x30>)
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	3308      	adds	r3, #8
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	601a      	str	r2, [r3, #0]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	200003b4 	.word	0x200003b4
 8001640:	200003b8 	.word	0x200003b8

08001644 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <BSP_LCD_GetFont+0x24>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4907      	ldr	r1, [pc, #28]	; (800166c <BSP_LCD_GetFont+0x28>)
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	3308      	adds	r3, #8
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	200003b4 	.word	0x200003b4
 800166c:	200003b8 	.word	0x200003b8

08001670 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	b085      	sub	sp, #20
 8001674:	af02      	add	r7, sp, #8
 8001676:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <BSP_LCD_Clear+0x48>)
 800167a:	681c      	ldr	r4, [r3, #0]
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <BSP_LCD_Clear+0x48>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <BSP_LCD_Clear+0x4c>)
 8001682:	2134      	movs	r1, #52	; 0x34
 8001684:	fb01 f303 	mul.w	r3, r1, r3
 8001688:	4413      	add	r3, r2
 800168a:	335c      	adds	r3, #92	; 0x5c
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	461d      	mov	r5, r3
 8001690:	f7ff ff2e 	bl	80014f0 <BSP_LCD_GetXSize>
 8001694:	4606      	mov	r6, r0
 8001696:	f7ff ff37 	bl	8001508 <BSP_LCD_GetYSize>
 800169a:	4602      	mov	r2, r0
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	2300      	movs	r3, #0
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	4613      	mov	r3, r2
 80016a6:	4632      	mov	r2, r6
 80016a8:	4629      	mov	r1, r5
 80016aa:	4620      	mov	r0, r4
 80016ac:	f000 fd8a 	bl	80021c4 <LL_FillBuffer>
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b8:	200003b4 	.word	0x200003b4
 80016bc:	200005bc 	.word	0x200005bc

080016c0 <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line in currently active layer.
  * @param  Line: Line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 80016c8:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <BSP_LCD_ClearStringLine+0xc0>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	492d      	ldr	r1, [pc, #180]	; (8001784 <BSP_LCD_ClearStringLine+0xc4>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <BSP_LCD_ClearStringLine+0xc0>)
 80016de:	6819      	ldr	r1, [r3, #0]
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <BSP_LCD_ClearStringLine+0xc0>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4827      	ldr	r0, [pc, #156]	; (8001784 <BSP_LCD_ClearStringLine+0xc4>)
 80016e6:	460b      	mov	r3, r1
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	440b      	add	r3, r1
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4403      	add	r3, r0
 80016f0:	3304      	adds	r3, #4
 80016f2:	6819      	ldr	r1, [r3, #0]
 80016f4:	4823      	ldr	r0, [pc, #140]	; (8001784 <BSP_LCD_ClearStringLine+0xc4>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4403      	add	r3, r0
 8001700:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8001702:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <BSP_LCD_ClearStringLine+0xc0>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	491f      	ldr	r1, [pc, #124]	; (8001784 <BSP_LCD_ClearStringLine+0xc4>)
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	3308      	adds	r3, #8
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	88da      	ldrh	r2, [r3, #6]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	b29b      	uxth	r3, r3
 800171c:	fb12 f303 	smulbb	r3, r2, r3
 8001720:	b29c      	uxth	r4, r3
 8001722:	f7ff fee5 	bl	80014f0 <BSP_LCD_GetXSize>
 8001726:	4603      	mov	r3, r0
 8001728:	b298      	uxth	r0, r3
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <BSP_LCD_ClearStringLine+0xc0>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4915      	ldr	r1, [pc, #84]	; (8001784 <BSP_LCD_ClearStringLine+0xc4>)
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	3308      	adds	r3, #8
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	88db      	ldrh	r3, [r3, #6]
 8001740:	4602      	mov	r2, r0
 8001742:	4621      	mov	r1, r4
 8001744:	2000      	movs	r0, #0
 8001746:	f000 fac9 	bl	8001cdc <BSP_LCD_FillRect>

  DrawProp[ActiveLayer].TextColor = color_backup;
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <BSP_LCD_ClearStringLine+0xc0>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	490d      	ldr	r1, [pc, #52]	; (8001784 <BSP_LCD_ClearStringLine+0xc4>)
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <BSP_LCD_ClearStringLine+0xc0>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4908      	ldr	r1, [pc, #32]	; (8001784 <BSP_LCD_ClearStringLine+0xc4>)
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff35 	bl	80015e0 <BSP_LCD_SetTextColor>
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bd90      	pop	{r4, r7, pc}
 800177e:	bf00      	nop
 8001780:	200003b4 	.word	0x200003b4
 8001784:	200003b8 	.word	0x200003b8

08001788 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
 8001792:	460b      	mov	r3, r1
 8001794:	80bb      	strh	r3, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <BSP_LCD_DisplayChar+0x80>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	491b      	ldr	r1, [pc, #108]	; (800180c <BSP_LCD_DisplayChar+0x84>)
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	3308      	adds	r3, #8
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6819      	ldr	r1, [r3, #0]
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <BSP_LCD_DisplayChar+0x80>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4c14      	ldr	r4, [pc, #80]	; (800180c <BSP_LCD_DisplayChar+0x84>)
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4423      	add	r3, r4
 80017c6:	3308      	adds	r3, #8
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80017cc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <BSP_LCD_DisplayChar+0x80>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4c0d      	ldr	r4, [pc, #52]	; (800180c <BSP_LCD_DisplayChar+0x84>)
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4423      	add	r3, r4
 80017e0:	3308      	adds	r3, #8
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	889b      	ldrh	r3, [r3, #4]
 80017e6:	3307      	adds	r3, #7
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	da00      	bge.n	80017ee <BSP_LCD_DisplayChar+0x66>
 80017ec:	3307      	adds	r3, #7
 80017ee:	10db      	asrs	r3, r3, #3
 80017f0:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80017f4:	18ca      	adds	r2, r1, r3
 80017f6:	88b9      	ldrh	r1, [r7, #4]
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fc2a 	bl	8002054 <DrawChar>
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bd90      	pop	{r4, r7, pc}
 8001808:	200003b4 	.word	0x200003b4
 800180c:	200003b8 	.word	0x200003b8

08001810 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001810:	b5b0      	push	{r4, r5, r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	60ba      	str	r2, [r7, #8]
 8001818:	461a      	mov	r2, r3
 800181a:	4603      	mov	r3, r0
 800181c:	81fb      	strh	r3, [r7, #14]
 800181e:	460b      	mov	r3, r1
 8001820:	81bb      	strh	r3, [r7, #12]
 8001822:	4613      	mov	r3, r2
 8001824:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001826:	2301      	movs	r3, #1
 8001828:	83fb      	strh	r3, [r7, #30]
 800182a:	2300      	movs	r3, #0
 800182c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800183a:	e002      	b.n	8001842 <BSP_LCD_DisplayStringAt+0x32>
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	3301      	adds	r3, #1
 8001840:	61bb      	str	r3, [r7, #24]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	617a      	str	r2, [r7, #20]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f6      	bne.n	800183c <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800184e:	f7ff fe4f 	bl	80014f0 <BSP_LCD_GetXSize>
 8001852:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <BSP_LCD_DisplayStringAt+0x180>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	494f      	ldr	r1, [pc, #316]	; (8001994 <BSP_LCD_DisplayStringAt+0x184>)
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	3308      	adds	r3, #8
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	889b      	ldrh	r3, [r3, #4]
 8001868:	fbb0 f3f3 	udiv	r3, r0, r3
 800186c:	613b      	str	r3, [r7, #16]

  switch (Mode)
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d01c      	beq.n	80018ae <BSP_LCD_DisplayStringAt+0x9e>
 8001874:	2b03      	cmp	r3, #3
 8001876:	d017      	beq.n	80018a8 <BSP_LCD_DisplayStringAt+0x98>
 8001878:	2b01      	cmp	r3, #1
 800187a:	d12e      	bne.n	80018da <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	1ad1      	subs	r1, r2, r3
 8001882:	4b43      	ldr	r3, [pc, #268]	; (8001990 <BSP_LCD_DisplayStringAt+0x180>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4843      	ldr	r0, [pc, #268]	; (8001994 <BSP_LCD_DisplayStringAt+0x184>)
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4403      	add	r3, r0
 8001892:	3308      	adds	r3, #8
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	889b      	ldrh	r3, [r3, #4]
 8001898:	fb03 f301 	mul.w	r3, r3, r1
 800189c:	085b      	lsrs	r3, r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	89fb      	ldrh	r3, [r7, #14]
 80018a2:	4413      	add	r3, r2
 80018a4:	83fb      	strh	r3, [r7, #30]
      break;
 80018a6:	e01b      	b.n	80018e0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80018a8:	89fb      	ldrh	r3, [r7, #14]
 80018aa:	83fb      	strh	r3, [r7, #30]
      break;
 80018ac:	e018      	b.n	80018e0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	b299      	uxth	r1, r3
 80018b6:	4b36      	ldr	r3, [pc, #216]	; (8001990 <BSP_LCD_DisplayStringAt+0x180>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4836      	ldr	r0, [pc, #216]	; (8001994 <BSP_LCD_DisplayStringAt+0x184>)
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4403      	add	r3, r0
 80018c6:	3308      	adds	r3, #8
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	889b      	ldrh	r3, [r3, #4]
 80018cc:	fb11 f303 	smulbb	r3, r1, r3
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	89fb      	ldrh	r3, [r7, #14]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	83fb      	strh	r3, [r7, #30]
      break;
 80018d8:	e002      	b.n	80018e0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 80018da:	89fb      	ldrh	r3, [r7, #14]
 80018dc:	83fb      	strh	r3, [r7, #30]
      break;
 80018de:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80018e0:	8bfb      	ldrh	r3, [r7, #30]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <BSP_LCD_DisplayStringAt+0xde>
 80018e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	da1d      	bge.n	800192a <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 80018ee:	2301      	movs	r3, #1
 80018f0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80018f2:	e01a      	b.n	800192a <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	781a      	ldrb	r2, [r3, #0]
 80018f8:	89b9      	ldrh	r1, [r7, #12]
 80018fa:	8bfb      	ldrh	r3, [r7, #30]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff43 	bl	8001788 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <BSP_LCD_DisplayStringAt+0x180>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4923      	ldr	r1, [pc, #140]	; (8001994 <BSP_LCD_DisplayStringAt+0x184>)
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	3308      	adds	r3, #8
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	889a      	ldrh	r2, [r3, #4]
 8001918:	8bfb      	ldrh	r3, [r7, #30]
 800191a:	4413      	add	r3, r2
 800191c:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	3301      	adds	r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
    i++;
 8001924:	8bbb      	ldrh	r3, [r7, #28]
 8001926:	3301      	adds	r3, #1
 8001928:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf14      	ite	ne
 8001932:	2301      	movne	r3, #1
 8001934:	2300      	moveq	r3, #0
 8001936:	b2dc      	uxtb	r4, r3
 8001938:	f7ff fdda 	bl	80014f0 <BSP_LCD_GetXSize>
 800193c:	4605      	mov	r5, r0
 800193e:	8bb9      	ldrh	r1, [r7, #28]
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <BSP_LCD_DisplayStringAt+0x180>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4813      	ldr	r0, [pc, #76]	; (8001994 <BSP_LCD_DisplayStringAt+0x184>)
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4403      	add	r3, r0
 8001950:	3308      	adds	r3, #8
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	889b      	ldrh	r3, [r3, #4]
 8001956:	fb03 f301 	mul.w	r3, r3, r1
 800195a:	1aeb      	subs	r3, r5, r3
 800195c:	b299      	uxth	r1, r3
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <BSP_LCD_DisplayStringAt+0x180>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	480c      	ldr	r0, [pc, #48]	; (8001994 <BSP_LCD_DisplayStringAt+0x184>)
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4403      	add	r3, r0
 800196e:	3308      	adds	r3, #8
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	889b      	ldrh	r3, [r3, #4]
 8001974:	4299      	cmp	r1, r3
 8001976:	bf2c      	ite	cs
 8001978:	2301      	movcs	r3, #1
 800197a:	2300      	movcc	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	4023      	ands	r3, r4
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1b6      	bne.n	80018f4 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 8001986:	bf00      	nop
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bdb0      	pop	{r4, r5, r7, pc}
 800198e:	bf00      	nop
 8001990:	200003b4 	.word	0x200003b4
 8001994:	200003b8 	.word	0x200003b8

08001998 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af02      	add	r7, sp, #8
 800199e:	4603      	mov	r3, r0
 80019a0:	80fb      	strh	r3, [r7, #6]
 80019a2:	460b      	mov	r3, r1
 80019a4:	80bb      	strh	r3, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <BSP_LCD_DrawHLine+0x70>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a16      	ldr	r2, [pc, #88]	; (8001a0c <BSP_LCD_DrawHLine+0x74>)
 80019b4:	2134      	movs	r1, #52	; 0x34
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	335c      	adds	r3, #92	; 0x5c
 80019be:	681c      	ldr	r4, [r3, #0]
 80019c0:	f7ff fd96 	bl	80014f0 <BSP_LCD_GetXSize>
 80019c4:	4602      	mov	r2, r0
 80019c6:	88bb      	ldrh	r3, [r7, #4]
 80019c8:	fb03 f202 	mul.w	r2, r3, r2
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4423      	add	r3, r4
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <BSP_LCD_DrawHLine+0x70>)
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	68fc      	ldr	r4, [r7, #12]
 80019dc:	887d      	ldrh	r5, [r7, #2]
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <BSP_LCD_DrawHLine+0x70>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	490b      	ldr	r1, [pc, #44]	; (8001a10 <BSP_LCD_DrawHLine+0x78>)
 80019e4:	4613      	mov	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	2300      	movs	r3, #0
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	462a      	mov	r2, r5
 80019fa:	4621      	mov	r1, r4
 80019fc:	f000 fbe2 	bl	80021c4 <LL_FillBuffer>
}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bdb0      	pop	{r4, r5, r7, pc}
 8001a08:	200003b4 	.word	0x200003b4
 8001a0c:	200005bc 	.word	0x200005bc
 8001a10:	200003b8 	.word	0x200003b8

08001a14 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af02      	add	r7, sp, #8
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	80fb      	strh	r3, [r7, #6]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	80bb      	strh	r3, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <BSP_LCD_DrawVLine+0x78>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <BSP_LCD_DrawVLine+0x7c>)
 8001a30:	2134      	movs	r1, #52	; 0x34
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	335c      	adds	r3, #92	; 0x5c
 8001a3a:	681c      	ldr	r4, [r3, #0]
 8001a3c:	f7ff fd58 	bl	80014f0 <BSP_LCD_GetXSize>
 8001a40:	4602      	mov	r2, r0
 8001a42:	88bb      	ldrh	r3, [r7, #4]
 8001a44:	fb03 f202 	mul.w	r2, r3, r2
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4423      	add	r3, r4
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <BSP_LCD_DrawVLine+0x78>)
 8001a54:	681c      	ldr	r4, [r3, #0]
 8001a56:	68fd      	ldr	r5, [r7, #12]
 8001a58:	887e      	ldrh	r6, [r7, #2]
 8001a5a:	f7ff fd49 	bl	80014f0 <BSP_LCD_GetXSize>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	1e59      	subs	r1, r3, #1
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <BSP_LCD_DrawVLine+0x78>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	480b      	ldr	r0, [pc, #44]	; (8001a94 <BSP_LCD_DrawVLine+0x80>)
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4403      	add	r3, r0
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	9100      	str	r1, [sp, #0]
 8001a78:	4633      	mov	r3, r6
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4629      	mov	r1, r5
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f000 fba0 	bl	80021c4 <LL_FillBuffer>
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a8c:	200003b4 	.word	0x200003b4
 8001a90:	200005bc 	.word	0x200005bc
 8001a94:	200003b8 	.word	0x200003b8

08001a98 <BSP_LCD_DrawRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	4608      	mov	r0, r1
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4623      	mov	r3, r4
 8001aa8:	80fb      	strh	r3, [r7, #6]
 8001aaa:	4603      	mov	r3, r0
 8001aac:	80bb      	strh	r3, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	807b      	strh	r3, [r7, #2]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	88b9      	ldrh	r1, [r7, #4]
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff6b 	bl	8001998 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001ac2:	88ba      	ldrh	r2, [r7, #4]
 8001ac4:	883b      	ldrh	r3, [r7, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	b299      	uxth	r1, r3
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff62 	bl	8001998 <BSP_LCD_DrawHLine>

  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001ad4:	883a      	ldrh	r2, [r7, #0]
 8001ad6:	88b9      	ldrh	r1, [r7, #4]
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff9a 	bl	8001a14 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001ae0:	88fa      	ldrh	r2, [r7, #6]
 8001ae2:	887b      	ldrh	r3, [r7, #2]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	883a      	ldrh	r2, [r7, #0]
 8001aea:	88b9      	ldrh	r1, [r7, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff91 	bl	8001a14 <BSP_LCD_DrawVLine>
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd90      	pop	{r4, r7, pc}
	...

08001afc <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	80fb      	strh	r3, [r7, #6]
 8001b06:	460b      	mov	r3, r1
 8001b08:	80bb      	strh	r3, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	f1c3 0303 	rsb	r3, r3, #3
 8001b16:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001b1c:	887b      	ldrh	r3, [r7, #2]
 8001b1e:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8001b20:	e0cf      	b.n	8001cc2 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	4413      	add	r3, r2
 8001b2a:	b298      	uxth	r0, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	88ba      	ldrh	r2, [r7, #4]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	b29c      	uxth	r4, r3
 8001b36:	4b67      	ldr	r3, [pc, #412]	; (8001cd4 <BSP_LCD_DrawCircle+0x1d8>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4967      	ldr	r1, [pc, #412]	; (8001cd8 <BSP_LCD_DrawCircle+0x1dc>)
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	f000 fa5c 	bl	8002008 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	88fa      	ldrh	r2, [r7, #6]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	b298      	uxth	r0, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	88ba      	ldrh	r2, [r7, #4]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	b29c      	uxth	r4, r3
 8001b64:	4b5b      	ldr	r3, [pc, #364]	; (8001cd4 <BSP_LCD_DrawCircle+0x1d8>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	495b      	ldr	r1, [pc, #364]	; (8001cd8 <BSP_LCD_DrawCircle+0x1dc>)
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	440b      	add	r3, r1
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	4621      	mov	r1, r4
 8001b7a:	f000 fa45 	bl	8002008 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	4413      	add	r3, r2
 8001b86:	b298      	uxth	r0, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	88ba      	ldrh	r2, [r7, #4]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	b29c      	uxth	r4, r3
 8001b92:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <BSP_LCD_DrawCircle+0x1d8>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4950      	ldr	r1, [pc, #320]	; (8001cd8 <BSP_LCD_DrawCircle+0x1dc>)
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	f000 fa2e 	bl	8002008 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	88fa      	ldrh	r2, [r7, #6]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	b298      	uxth	r0, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	88ba      	ldrh	r2, [r7, #4]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	b29c      	uxth	r4, r3
 8001bc0:	4b44      	ldr	r3, [pc, #272]	; (8001cd4 <BSP_LCD_DrawCircle+0x1d8>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4944      	ldr	r1, [pc, #272]	; (8001cd8 <BSP_LCD_DrawCircle+0x1dc>)
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	f000 fa17 	bl	8002008 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	4413      	add	r3, r2
 8001be2:	b298      	uxth	r0, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	4413      	add	r3, r2
 8001bec:	b29c      	uxth	r4, r3
 8001bee:	4b39      	ldr	r3, [pc, #228]	; (8001cd4 <BSP_LCD_DrawCircle+0x1d8>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4939      	ldr	r1, [pc, #228]	; (8001cd8 <BSP_LCD_DrawCircle+0x1dc>)
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4621      	mov	r1, r4
 8001c04:	f000 fa00 	bl	8002008 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	88fa      	ldrh	r2, [r7, #6]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	b298      	uxth	r0, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	88bb      	ldrh	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	b29c      	uxth	r4, r3
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <BSP_LCD_DrawCircle+0x1d8>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	492d      	ldr	r1, [pc, #180]	; (8001cd8 <BSP_LCD_DrawCircle+0x1dc>)
 8001c22:	4613      	mov	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4621      	mov	r1, r4
 8001c32:	f000 f9e9 	bl	8002008 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b298      	uxth	r0, r3
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	88bb      	ldrh	r3, [r7, #4]
 8001c46:	4413      	add	r3, r2
 8001c48:	b29c      	uxth	r4, r3
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <BSP_LCD_DrawCircle+0x1d8>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4922      	ldr	r1, [pc, #136]	; (8001cd8 <BSP_LCD_DrawCircle+0x1dc>)
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4621      	mov	r1, r4
 8001c60:	f000 f9d2 	bl	8002008 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	88fa      	ldrh	r2, [r7, #6]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	b298      	uxth	r0, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	88bb      	ldrh	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	b29c      	uxth	r4, r3
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <BSP_LCD_DrawCircle+0x1d8>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4916      	ldr	r1, [pc, #88]	; (8001cd8 <BSP_LCD_DrawCircle+0x1dc>)
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	f000 f9bb 	bl	8002008 <BSP_LCD_DrawPixel>

    if (D < 0)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	da06      	bge.n	8001ca6 <BSP_LCD_DrawCircle+0x1aa>
    {
      D += (CurX << 2) + 6;
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	009a      	lsls	r2, r3, #2
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3306      	adds	r3, #6
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	e00a      	b.n	8001cbc <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	009a      	lsls	r2, r3, #2
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	330a      	adds	r3, #10
 8001cb4:	617b      	str	r3, [r7, #20]
      CurY--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	f67f af2b 	bls.w	8001b22 <BSP_LCD_DrawCircle+0x26>
  }
}
 8001ccc:	bf00      	nop
 8001cce:	371c      	adds	r7, #28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd90      	pop	{r4, r7, pc}
 8001cd4:	200003b4 	.word	0x200003b4
 8001cd8:	200003b8 	.word	0x200003b8

08001cdc <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af02      	add	r7, sp, #8
 8001ce4:	4604      	mov	r4, r0
 8001ce6:	4608      	mov	r0, r1
 8001ce8:	4611      	mov	r1, r2
 8001cea:	461a      	mov	r2, r3
 8001cec:	4623      	mov	r3, r4
 8001cee:	80fb      	strh	r3, [r7, #6]
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	80bb      	strh	r3, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d00:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <BSP_LCD_FillRect+0xa8>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4920      	ldr	r1, [pc, #128]	; (8001d88 <BSP_LCD_FillRect+0xac>)
 8001d06:	4613      	mov	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fc64 	bl	80015e0 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001d18:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <BSP_LCD_FillRect+0xa8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <BSP_LCD_FillRect+0xb0>)
 8001d1e:	2134      	movs	r1, #52	; 0x34
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	335c      	adds	r3, #92	; 0x5c
 8001d28:	681c      	ldr	r4, [r3, #0]
 8001d2a:	f7ff fbe1 	bl	80014f0 <BSP_LCD_GetXSize>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	88bb      	ldrh	r3, [r7, #4]
 8001d32:	fb03 f202 	mul.w	r2, r3, r2
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4423      	add	r3, r4
 8001d3e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001d40:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <BSP_LCD_FillRect+0xa8>)
 8001d42:	681c      	ldr	r4, [r3, #0]
 8001d44:	68fd      	ldr	r5, [r7, #12]
 8001d46:	887e      	ldrh	r6, [r7, #2]
 8001d48:	f8b7 8000 	ldrh.w	r8, [r7]
 8001d4c:	f7ff fbd0 	bl	80014f0 <BSP_LCD_GetXSize>
 8001d50:	4602      	mov	r2, r0
 8001d52:	887b      	ldrh	r3, [r7, #2]
 8001d54:	1ad1      	subs	r1, r2, r3
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <BSP_LCD_FillRect+0xa8>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	480b      	ldr	r0, [pc, #44]	; (8001d88 <BSP_LCD_FillRect+0xac>)
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4403      	add	r3, r0
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	9100      	str	r1, [sp, #0]
 8001d6c:	4643      	mov	r3, r8
 8001d6e:	4632      	mov	r2, r6
 8001d70:	4629      	mov	r1, r5
 8001d72:	4620      	mov	r0, r4
 8001d74:	f000 fa26 	bl	80021c4 <LL_FillBuffer>
}
 8001d78:	bf00      	nop
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d82:	bf00      	nop
 8001d84:	200003b4 	.word	0x200003b4
 8001d88:	200003b8 	.word	0x200003b8
 8001d8c:	200005bc 	.word	0x200005bc

08001d90 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	80bb      	strh	r3, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	f1c3 0303 	rsb	r3, r3, #3
 8001daa:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001db0:	887b      	ldrh	r3, [r7, #2]
 8001db2:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001db4:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <BSP_LCD_FillCircle+0x138>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4944      	ldr	r1, [pc, #272]	; (8001ecc <BSP_LCD_FillCircle+0x13c>)
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fc0a 	bl	80015e0 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8001dcc:	e061      	b.n	8001e92 <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d021      	beq.n	8001e18 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	88fa      	ldrh	r2, [r7, #6]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	b298      	uxth	r0, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	88bb      	ldrh	r3, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	b299      	uxth	r1, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	f7ff fdd1 	bl	8001998 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	88fa      	ldrh	r2, [r7, #6]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	b298      	uxth	r0, r3
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	88ba      	ldrh	r2, [r7, #4]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	b299      	uxth	r1, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	f7ff fdc0 	bl	8001998 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d021      	beq.n	8001e62 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	88fa      	ldrh	r2, [r7, #6]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	b298      	uxth	r0, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	88ba      	ldrh	r2, [r7, #4]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	b299      	uxth	r1, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f7ff fdac 	bl	8001998 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	88fa      	ldrh	r2, [r7, #6]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	b298      	uxth	r0, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	88bb      	ldrh	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	b299      	uxth	r1, r3
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f7ff fd9b 	bl	8001998 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	da06      	bge.n	8001e76 <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	009a      	lsls	r2, r3, #2
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	4413      	add	r3, r2
 8001e70:	3306      	adds	r3, #6
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	e00a      	b.n	8001e8c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	009a      	lsls	r2, r3, #2
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	4413      	add	r3, r2
 8001e82:	330a      	adds	r3, #10
 8001e84:	617b      	str	r3, [r7, #20]
      CurY--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d999      	bls.n	8001dce <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <BSP_LCD_FillCircle+0x138>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	490b      	ldr	r1, [pc, #44]	; (8001ecc <BSP_LCD_FillCircle+0x13c>)
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fb97 	bl	80015e0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	88b9      	ldrh	r1, [r7, #4]
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fe1f 	bl	8001afc <BSP_LCD_DrawCircle>
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200003b4 	.word	0x200003b4
 8001ecc:	200003b8 	.word	0x200003b8

08001ed0 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d80d      	bhi.n	8001efc <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	2215      	movs	r2, #21
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	480a      	ldr	r0, [pc, #40]	; (8001f20 <DSI_IO_WriteCmd+0x50>)
 8001ef6:	f002 ff61 	bl	8004dbc <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001efa:	e00d      	b.n	8001f18 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	9200      	str	r2, [sp, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2239      	movs	r2, #57	; 0x39
 8001f10:	2100      	movs	r1, #0
 8001f12:	4803      	ldr	r0, [pc, #12]	; (8001f20 <DSI_IO_WriteCmd+0x50>)
 8001f14:	f002 ff74 	bl	8004e00 <HAL_DSI_LongWrite>
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000664 	.word	0x20000664

08001f24 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001f28:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001f3a:	4b32      	ldr	r3, [pc, #200]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a31      	ldr	r2, [pc, #196]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001f40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	4a2b      	ldr	r2, [pc, #172]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001f58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f5c:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001f5e:	4b29      	ldr	r3, [pc, #164]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	4a28      	ldr	r2, [pc, #160]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001f64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f68:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a25      	ldr	r2, [pc, #148]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001f70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b23      	ldr	r3, [pc, #140]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001f88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f8c:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	4a1c      	ldr	r2, [pc, #112]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001f94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f98:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a19      	ldr	r2, [pc, #100]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001fa0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	4a13      	ldr	r2, [pc, #76]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001fb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fbc:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <BSP_LCD_MspInit+0xd0>)
 8001fc4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001fc8:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2103      	movs	r1, #3
 8001fce:	2058      	movs	r0, #88	; 0x58
 8001fd0:	f001 fad1 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001fd4:	2058      	movs	r0, #88	; 0x58
 8001fd6:	f001 faea 	bl	80035ae <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2103      	movs	r1, #3
 8001fde:	205a      	movs	r0, #90	; 0x5a
 8001fe0:	f001 fac9 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001fe4:	205a      	movs	r0, #90	; 0x5a
 8001fe6:	f001 fae2 	bl	80035ae <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2103      	movs	r1, #3
 8001fee:	2062      	movs	r0, #98	; 0x62
 8001ff0:	f001 fac1 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001ff4:	2062      	movs	r0, #98	; 0x62
 8001ff6:	f001 fada 	bl	80035ae <HAL_NVIC_EnableIRQ>
}
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800

08002008 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002008:	b5b0      	push	{r4, r5, r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	603a      	str	r2, [r7, #0]
 8002012:	80fb      	strh	r3, [r7, #6]
 8002014:	460b      	mov	r3, r1
 8002016:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <BSP_LCD_DrawPixel+0x44>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <BSP_LCD_DrawPixel+0x48>)
 800201e:	2134      	movs	r1, #52	; 0x34
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	335c      	adds	r3, #92	; 0x5c
 8002028:	681c      	ldr	r4, [r3, #0]
 800202a:	88bd      	ldrh	r5, [r7, #4]
 800202c:	f7ff fa60 	bl	80014f0 <BSP_LCD_GetXSize>
 8002030:	4603      	mov	r3, r0
 8002032:	fb03 f205 	mul.w	r2, r3, r5
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4423      	add	r3, r4
 800203e:	461a      	mov	r2, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	6013      	str	r3, [r2, #0]
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bdb0      	pop	{r4, r5, r7, pc}
 800204c:	200003b4 	.word	0x200003b4
 8002050:	200005bc 	.word	0x200005bc

08002054 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	603a      	str	r2, [r7, #0]
 800205e:	80fb      	strh	r3, [r7, #6]
 8002060:	460b      	mov	r3, r1
 8002062:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 800206c:	4b53      	ldr	r3, [pc, #332]	; (80021bc <DrawChar+0x168>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4953      	ldr	r1, [pc, #332]	; (80021c0 <DrawChar+0x16c>)
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	3308      	adds	r3, #8
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	88db      	ldrh	r3, [r3, #6]
 8002082:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002084:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <DrawChar+0x168>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	494d      	ldr	r1, [pc, #308]	; (80021c0 <DrawChar+0x16c>)
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	3308      	adds	r3, #8
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	889b      	ldrh	r3, [r3, #4]
 800209a:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 800209c:	8a3b      	ldrh	r3, [r7, #16]
 800209e:	3307      	adds	r3, #7
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	da00      	bge.n	80020a6 <DrawChar+0x52>
 80020a4:	3307      	adds	r3, #7
 80020a6:	10db      	asrs	r3, r3, #3
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	8a3b      	ldrh	r3, [r7, #16]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	e076      	b.n	80021aa <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80020bc:	8a3b      	ldrh	r3, [r7, #16]
 80020be:	3307      	adds	r3, #7
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	da00      	bge.n	80020c6 <DrawChar+0x72>
 80020c4:	3307      	adds	r3, #7
 80020c6:	10db      	asrs	r3, r3, #3
 80020c8:	461a      	mov	r2, r3
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fb03 f302 	mul.w	r3, r3, r2
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80020d6:	8a3b      	ldrh	r3, [r7, #16]
 80020d8:	3307      	adds	r3, #7
 80020da:	2b00      	cmp	r3, #0
 80020dc:	da00      	bge.n	80020e0 <DrawChar+0x8c>
 80020de:	3307      	adds	r3, #7
 80020e0:	10db      	asrs	r3, r3, #3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d002      	beq.n	80020ec <DrawChar+0x98>
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d004      	beq.n	80020f4 <DrawChar+0xa0>
 80020ea:	e00c      	b.n	8002106 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	617b      	str	r3, [r7, #20]
      break;
 80020f2:	e016      	b.n	8002122 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	3201      	adds	r2, #1
 80020fe:	7812      	ldrb	r2, [r2, #0]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
      break;
 8002104:	e00d      	b.n	8002122 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	041a      	lsls	r2, r3, #16
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	3301      	adds	r3, #1
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	4313      	orrs	r3, r2
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	3202      	adds	r2, #2
 800211a:	7812      	ldrb	r2, [r2, #0]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
      break;
 8002120:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
 8002126:	e036      	b.n	8002196 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8002128:	8a3a      	ldrh	r2, [r7, #16]
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	1ad2      	subs	r2, r2, r3
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	4413      	add	r3, r2
 8002132:	3b01      	subs	r3, #1
 8002134:	2201      	movs	r2, #1
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	461a      	mov	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d012      	beq.n	800216a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	b29a      	uxth	r2, r3
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	4413      	add	r3, r2
 800214c:	b298      	uxth	r0, r3
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <DrawChar+0x168>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	491b      	ldr	r1, [pc, #108]	; (80021c0 <DrawChar+0x16c>)
 8002154:	4613      	mov	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	88bb      	ldrh	r3, [r7, #4]
 8002162:	4619      	mov	r1, r3
 8002164:	f7ff ff50 	bl	8002008 <BSP_LCD_DrawPixel>
 8002168:	e012      	b.n	8002190 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	b29a      	uxth	r2, r3
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	4413      	add	r3, r2
 8002172:	b298      	uxth	r0, r3
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <DrawChar+0x168>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4911      	ldr	r1, [pc, #68]	; (80021c0 <DrawChar+0x16c>)
 800217a:	4613      	mov	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	3304      	adds	r3, #4
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	88bb      	ldrh	r3, [r7, #4]
 800218a:	4619      	mov	r1, r3
 800218c:	f7ff ff3c 	bl	8002008 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	3301      	adds	r3, #1
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	8a3b      	ldrh	r3, [r7, #16]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	429a      	cmp	r2, r3
 800219c:	d3c4      	bcc.n	8002128 <DrawChar+0xd4>
      }
    }
    Ypos++;
 800219e:	88bb      	ldrh	r3, [r7, #4]
 80021a0:	3301      	adds	r3, #1
 80021a2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	3301      	adds	r3, #1
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	8a7b      	ldrh	r3, [r7, #18]
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d384      	bcc.n	80020bc <DrawChar+0x68>
  }
}
 80021b2:	bf00      	nop
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200003b4 	.word	0x200003b4
 80021c0:	200003b8 	.word	0x200003b8

080021c4 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80021d2:	4b16      	ldr	r3, [pc, #88]	; (800222c <LL_FillBuffer+0x68>)
 80021d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80021d8:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <LL_FillBuffer+0x68>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 80021e0:	4a12      	ldr	r2, [pc, #72]	; (800222c <LL_FillBuffer+0x68>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <LL_FillBuffer+0x68>)
 80021e8:	4a11      	ldr	r2, [pc, #68]	; (8002230 <LL_FillBuffer+0x6c>)
 80021ea:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80021ec:	480f      	ldr	r0, [pc, #60]	; (800222c <LL_FillBuffer+0x68>)
 80021ee:	f001 fbb5 	bl	800395c <HAL_DMA2D_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d115      	bne.n	8002224 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 80021f8:	68f9      	ldr	r1, [r7, #12]
 80021fa:	480c      	ldr	r0, [pc, #48]	; (800222c <LL_FillBuffer+0x68>)
 80021fc:	f001 fd1c 	bl	8003c38 <HAL_DMA2D_ConfigLayer>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10e      	bne.n	8002224 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69f9      	ldr	r1, [r7, #28]
 8002210:	4806      	ldr	r0, [pc, #24]	; (800222c <LL_FillBuffer+0x68>)
 8002212:	f001 fbfd 	bl	8003a10 <HAL_DMA2D_Start>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d103      	bne.n	8002224 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 800221c:	210a      	movs	r1, #10
 800221e:	4803      	ldr	r0, [pc, #12]	; (800222c <LL_FillBuffer+0x68>)
 8002220:	f001 fc21 	bl	8003a66 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000564 	.word	0x20000564
 8002230:	4002b000 	.word	0x4002b000

08002234 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002238:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <BSP_SDRAM_Init+0xac>)
 800223a:	4a2a      	ldr	r2, [pc, #168]	; (80022e4 <BSP_SDRAM_Init+0xb0>)
 800223c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800223e:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <BSP_SDRAM_Init+0xb4>)
 8002240:	2202      	movs	r2, #2
 8002242:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002244:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <BSP_SDRAM_Init+0xb4>)
 8002246:	2207      	movs	r2, #7
 8002248:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800224a:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <BSP_SDRAM_Init+0xb4>)
 800224c:	2204      	movs	r2, #4
 800224e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002250:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <BSP_SDRAM_Init+0xb4>)
 8002252:	2207      	movs	r2, #7
 8002254:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <BSP_SDRAM_Init+0xb4>)
 8002258:	2202      	movs	r2, #2
 800225a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800225c:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <BSP_SDRAM_Init+0xb4>)
 800225e:	2202      	movs	r2, #2
 8002260:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002262:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <BSP_SDRAM_Init+0xb4>)
 8002264:	2202      	movs	r2, #2
 8002266:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002268:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <BSP_SDRAM_Init+0xac>)
 800226a:	2200      	movs	r2, #0
 800226c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <BSP_SDRAM_Init+0xac>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <BSP_SDRAM_Init+0xac>)
 8002276:	2204      	movs	r2, #4
 8002278:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <BSP_SDRAM_Init+0xac>)
 800227c:	2220      	movs	r2, #32
 800227e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002280:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <BSP_SDRAM_Init+0xac>)
 8002282:	2240      	movs	r2, #64	; 0x40
 8002284:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002286:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <BSP_SDRAM_Init+0xac>)
 8002288:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800228c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800228e:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <BSP_SDRAM_Init+0xac>)
 8002290:	2200      	movs	r2, #0
 8002292:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <BSP_SDRAM_Init+0xac>)
 8002296:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800229a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800229c:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <BSP_SDRAM_Init+0xac>)
 800229e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <BSP_SDRAM_Init+0xac>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80022aa:	2100      	movs	r1, #0
 80022ac:	480c      	ldr	r0, [pc, #48]	; (80022e0 <BSP_SDRAM_Init+0xac>)
 80022ae:	f000 f87f 	bl	80023b0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80022b2:	490d      	ldr	r1, [pc, #52]	; (80022e8 <BSP_SDRAM_Init+0xb4>)
 80022b4:	480a      	ldr	r0, [pc, #40]	; (80022e0 <BSP_SDRAM_Init+0xac>)
 80022b6:	f006 fba6 	bl	8008a06 <HAL_SDRAM_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80022c0:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <BSP_SDRAM_Init+0xb8>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	e002      	b.n	80022ce <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <BSP_SDRAM_Init+0xb8>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80022ce:	f240 6003 	movw	r0, #1539	; 0x603
 80022d2:	f000 f80d 	bl	80022f0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <BSP_SDRAM_Init+0xb8>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000680 	.word	0x20000680
 80022e4:	a0000140 	.word	0xa0000140
 80022e8:	20000460 	.word	0x20000460
 80022ec:	20000054 	.word	0x20000054

080022f0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80022fc:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002302:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002304:	2210      	movs	r2, #16
 8002306:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800230a:	2201      	movs	r2, #1
 800230c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800230e:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002310:	2200      	movs	r2, #0
 8002312:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002318:	4923      	ldr	r1, [pc, #140]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800231a:	4824      	ldr	r0, [pc, #144]	; (80023ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 800231c:	f006 fba7 	bl	8008a6e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002320:	2001      	movs	r0, #1
 8002322:	f000 fb79 	bl	8002a18 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002328:	2202      	movs	r2, #2
 800232a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800232c:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800232e:	2210      	movs	r2, #16
 8002330:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002332:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002334:	2201      	movs	r2, #1
 8002336:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800233e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002342:	4919      	ldr	r1, [pc, #100]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002344:	4819      	ldr	r0, [pc, #100]	; (80023ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002346:	f006 fb92 	bl	8008a6e <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800234c:	2203      	movs	r2, #3
 800234e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002350:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002352:	2210      	movs	r2, #16
 8002354:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002356:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002358:	2208      	movs	r2, #8
 800235a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800235e:	2200      	movs	r2, #0
 8002360:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002366:	4910      	ldr	r1, [pc, #64]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002368:	4810      	ldr	r0, [pc, #64]	; (80023ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 800236a:	f006 fb80 	bl	8008a6e <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800236e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002372:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002376:	2204      	movs	r2, #4
 8002378:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800237c:	2210      	movs	r2, #16
 800237e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002382:	2201      	movs	r2, #1
 8002384:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800238a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800238c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002390:	4905      	ldr	r1, [pc, #20]	; (80023a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002392:	4806      	ldr	r0, [pc, #24]	; (80023ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002394:	f006 fb6b 	bl	8008a6e <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4804      	ldr	r0, [pc, #16]	; (80023ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 800239c:	f006 fb92 	bl	8008ac4 <HAL_SDRAM_ProgramRefreshRate>
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	2000047c 	.word	0x2000047c
 80023ac:	20000680 	.word	0x20000680

080023b0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b090      	sub	sp, #64	; 0x40
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80023ba:	4b71      	ldr	r3, [pc, #452]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	4a70      	ldr	r2, [pc, #448]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6393      	str	r3, [r2, #56]	; 0x38
 80023c6:	4b6e      	ldr	r3, [pc, #440]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80023d2:	4b6b      	ldr	r3, [pc, #428]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a6a      	ldr	r2, [pc, #424]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 80023d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b68      	ldr	r3, [pc, #416]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ea:	4b65      	ldr	r3, [pc, #404]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a64      	ldr	r2, [pc, #400]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 80023f0:	f043 0308 	orr.w	r3, r3, #8
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b62      	ldr	r3, [pc, #392]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	623b      	str	r3, [r7, #32]
 8002400:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002402:	4b5f      	ldr	r3, [pc, #380]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a5e      	ldr	r2, [pc, #376]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 8002408:	f043 0310 	orr.w	r3, r3, #16
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b5c      	ldr	r3, [pc, #368]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800241a:	4b59      	ldr	r3, [pc, #356]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a58      	ldr	r2, [pc, #352]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 8002420:	f043 0320 	orr.w	r3, r3, #32
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b56      	ldr	r3, [pc, #344]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002432:	4b53      	ldr	r3, [pc, #332]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a52      	ldr	r2, [pc, #328]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 8002438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b50      	ldr	r3, [pc, #320]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800244a:	4b4d      	ldr	r3, [pc, #308]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a4c      	ldr	r2, [pc, #304]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 8002450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002462:	4b47      	ldr	r3, [pc, #284]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a46      	ldr	r2, [pc, #280]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 8002468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b44      	ldr	r3, [pc, #272]	; (8002580 <BSP_SDRAM_MspInit+0x1d0>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800247e:	2301      	movs	r3, #1
 8002480:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002482:	2303      	movs	r3, #3
 8002484:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002486:	230c      	movs	r3, #12
 8002488:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800248a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002494:	4619      	mov	r1, r3
 8002496:	483b      	ldr	r0, [pc, #236]	; (8002584 <BSP_SDRAM_MspInit+0x1d4>)
 8002498:	f002 fd78 	bl	8004f8c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800249c:	f64f 7383 	movw	r3, #65411	; 0xff83
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80024a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a6:	4619      	mov	r1, r3
 80024a8:	4837      	ldr	r0, [pc, #220]	; (8002588 <BSP_SDRAM_MspInit+0x1d8>)
 80024aa:	f002 fd6f 	bl	8004f8c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80024ae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80024b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b8:	4619      	mov	r1, r3
 80024ba:	4834      	ldr	r0, [pc, #208]	; (800258c <BSP_SDRAM_MspInit+0x1dc>)
 80024bc:	f002 fd66 	bl	8004f8c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 80024c0:	f248 1337 	movw	r3, #33079	; 0x8137
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80024c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ca:	4619      	mov	r1, r3
 80024cc:	4830      	ldr	r0, [pc, #192]	; (8002590 <BSP_SDRAM_MspInit+0x1e0>)
 80024ce:	f002 fd5d 	bl	8004f8c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80024d2:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80024d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024dc:	4619      	mov	r1, r3
 80024de:	482d      	ldr	r0, [pc, #180]	; (8002594 <BSP_SDRAM_MspInit+0x1e4>)
 80024e0:	f002 fd54 	bl	8004f8c <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80024e4:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 80024ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ee:	4619      	mov	r1, r3
 80024f0:	4829      	ldr	r0, [pc, #164]	; (8002598 <BSP_SDRAM_MspInit+0x1e8>)
 80024f2:	f002 fd4b 	bl	8004f8c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002502:	4b26      	ldr	r3, [pc, #152]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 8002504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002508:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 800250c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002510:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002512:	4b22      	ldr	r3, [pc, #136]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 8002514:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002518:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 800251c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002520:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 8002524:	2200      	movs	r2, #0
 8002526:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002528:	4b1c      	ldr	r3, [pc, #112]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 800252a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800252e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002530:	4b1a      	ldr	r3, [pc, #104]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 8002532:	2200      	movs	r2, #0
 8002534:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 8002538:	2203      	movs	r2, #3
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800253c:	4b17      	ldr	r3, [pc, #92]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 800253e:	2200      	movs	r2, #0
 8002540:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002542:	4b16      	ldr	r3, [pc, #88]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 8002544:	2200      	movs	r2, #0
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 800254a:	4a15      	ldr	r2, [pc, #84]	; (80025a0 <BSP_SDRAM_MspInit+0x1f0>)
 800254c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a12      	ldr	r2, [pc, #72]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
 8002554:	4a11      	ldr	r2, [pc, #68]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800255a:	4810      	ldr	r0, [pc, #64]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 800255c:	f001 f8f0 	bl	8003740 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002560:	480e      	ldr	r0, [pc, #56]	; (800259c <BSP_SDRAM_MspInit+0x1ec>)
 8002562:	f001 f83f 	bl	80035e4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	210f      	movs	r1, #15
 800256a:	2038      	movs	r0, #56	; 0x38
 800256c:	f001 f803 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002570:	2038      	movs	r0, #56	; 0x38
 8002572:	f001 f81c 	bl	80035ae <HAL_NVIC_EnableIRQ>
}
 8002576:	bf00      	nop
 8002578:	3740      	adds	r7, #64	; 0x40
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	40020c00 	.word	0x40020c00
 8002588:	40021000 	.word	0x40021000
 800258c:	40021400 	.word	0x40021400
 8002590:	40021800 	.word	0x40021800
 8002594:	40021c00 	.word	0x40021c00
 8002598:	40022000 	.word	0x40022000
 800259c:	2000048c 	.word	0x2000048c
 80025a0:	40026410 	.word	0x40026410

080025a4 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	460a      	mov	r2, r1
 80025ae:	80fb      	strh	r3, [r7, #6]
 80025b0:	4613      	mov	r3, r2
 80025b2:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80025bc:	4b25      	ldr	r3, [pc, #148]	; (8002654 <BSP_TS_Init+0xb0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a25      	ldr	r2, [pc, #148]	; (8002658 <BSP_TS_Init+0xb4>)
 80025c2:	7812      	ldrb	r2, [r2, #0]
 80025c4:	b292      	uxth	r2, r2
 80025c6:	4610      	mov	r0, r2
 80025c8:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 80025ca:	4b22      	ldr	r3, [pc, #136]	; (8002654 <BSP_TS_Init+0xb0>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2054      	movs	r0, #84	; 0x54
 80025d0:	4798      	blx	r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 80025d6:	7b7b      	ldrb	r3, [r7, #13]
 80025d8:	2b11      	cmp	r3, #17
 80025da:	d009      	beq.n	80025f0 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <BSP_TS_Init+0xb0>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2070      	movs	r0, #112	; 0x70
 80025e2:	4798      	blx	r3
 80025e4:	4603      	mov	r3, r0
 80025e6:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <BSP_TS_Init+0xb4>)
 80025ea:	2270      	movs	r2, #112	; 0x70
 80025ec:	701a      	strb	r2, [r3, #0]
 80025ee:	e002      	b.n	80025f6 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <BSP_TS_Init+0xb4>)
 80025f2:	2254      	movs	r2, #84	; 0x54
 80025f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 80025f6:	7b7b      	ldrb	r3, [r7, #13]
 80025f8:	2b11      	cmp	r3, #17
 80025fa:	d002      	beq.n	8002602 <BSP_TS_Init+0x5e>
 80025fc:	7bbb      	ldrb	r3, [r7, #14]
 80025fe:	2b11      	cmp	r3, #17
 8002600:	d121      	bne.n	8002646 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8002602:	4b16      	ldr	r3, [pc, #88]	; (800265c <BSP_TS_Init+0xb8>)
 8002604:	4a13      	ldr	r2, [pc, #76]	; (8002654 <BSP_TS_Init+0xb0>)
 8002606:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8002608:	88fa      	ldrh	r2, [r7, #6]
 800260a:	88bb      	ldrh	r3, [r7, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	d203      	bcs.n	8002618 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8002610:	4b13      	ldr	r3, [pc, #76]	; (8002660 <BSP_TS_Init+0xbc>)
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	e002      	b.n	800261e <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <BSP_TS_Init+0xbc>)
 800261a:	220c      	movs	r2, #12
 800261c:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d112      	bne.n	800264a <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8002624:	4b0d      	ldr	r3, [pc, #52]	; (800265c <BSP_TS_Init+0xb8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	4a0b      	ldr	r2, [pc, #44]	; (8002658 <BSP_TS_Init+0xb4>)
 800262c:	7812      	ldrb	r2, [r2, #0]
 800262e:	b292      	uxth	r2, r2
 8002630:	4610      	mov	r0, r2
 8002632:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <BSP_TS_Init+0xb8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	4a07      	ldr	r2, [pc, #28]	; (8002658 <BSP_TS_Init+0xb4>)
 800263c:	7812      	ldrb	r2, [r2, #0]
 800263e:	b292      	uxth	r2, r2
 8002640:	4610      	mov	r0, r2
 8002642:	4798      	blx	r3
    if(ts_status == TS_OK)
 8002644:	e001      	b.n	800264a <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8002646:	2303      	movs	r3, #3
 8002648:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 800264a:	7bfb      	ldrb	r3, [r7, #15]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000000 	.word	0x20000000
 8002658:	200004f1 	.word	0x200004f1
 800265c:	200004ec 	.word	0x200004ec
 8002660:	200004f0 	.word	0x200004f0

08002664 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 800266e:	f000 f94f 	bl	8002910 <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 8002672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002676:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002678:	2301      	movs	r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800267c:	2302      	movs	r3, #2
 800267e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002680:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <BSP_TS_ITConfig+0x54>)
 8002682:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002684:	463b      	mov	r3, r7
 8002686:	4619      	mov	r1, r3
 8002688:	480c      	ldr	r0, [pc, #48]	; (80026bc <BSP_TS_ITConfig+0x58>)
 800268a:	f002 fc7f 	bl	8004f8c <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 800268e:	2200      	movs	r2, #0
 8002690:	210f      	movs	r1, #15
 8002692:	2028      	movs	r0, #40	; 0x28
 8002694:	f000 ff6f 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8002698:	2028      	movs	r0, #40	; 0x28
 800269a:	f000 ff88 	bl	80035ae <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <BSP_TS_ITConfig+0x5c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <BSP_TS_ITConfig+0x60>)
 80026a6:	7812      	ldrb	r2, [r2, #0]
 80026a8:	b292      	uxth	r2, r2
 80026aa:	4610      	mov	r0, r2
 80026ac:	4798      	blx	r3

  return (ts_status);
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	10210000 	.word	0x10210000
 80026bc:	40022000 	.word	0x40022000
 80026c0:	200004ec 	.word	0x200004ec
 80026c4:	200004f1 	.word	0x200004f1

080026c8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 80026d4:	4b89      	ldr	r3, [pc, #548]	; (80028fc <BSP_TS_GetState+0x234>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	4a89      	ldr	r2, [pc, #548]	; (8002900 <BSP_TS_GetState+0x238>)
 80026dc:	7812      	ldrb	r2, [r2, #0]
 80026de:	b292      	uxth	r2, r2
 80026e0:	4610      	mov	r0, r2
 80026e2:	4798      	blx	r3
 80026e4:	4603      	mov	r3, r0
 80026e6:	461a      	mov	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80fe 	beq.w	80028f2 <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	e0f3      	b.n	80028e4 <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80026fc:	4b7f      	ldr	r3, [pc, #508]	; (80028fc <BSP_TS_GetState+0x234>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	4a7f      	ldr	r2, [pc, #508]	; (8002900 <BSP_TS_GetState+0x238>)
 8002704:	7812      	ldrb	r2, [r2, #0]
 8002706:	b290      	uxth	r0, r2
 8002708:	f107 0110 	add.w	r1, r7, #16
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	0052      	lsls	r2, r2, #1
 8002710:	188c      	adds	r4, r1, r2
 8002712:	f107 010c 	add.w	r1, r7, #12
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	0052      	lsls	r2, r2, #1
 800271a:	440a      	add	r2, r1
 800271c:	4621      	mov	r1, r4
 800271e:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8002720:	4b78      	ldr	r3, [pc, #480]	; (8002904 <BSP_TS_GetState+0x23c>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01d      	beq.n	8002768 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	f107 0220 	add.w	r2, r7, #32
 8002734:	4413      	add	r3, r2
 8002736:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800273a:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	f107 0220 	add.w	r2, r7, #32
 8002744:	4413      	add	r3, r2
 8002746:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	f107 0120 	add.w	r1, r7, #32
 8002752:	440b      	add	r3, r1
 8002754:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	f107 0220 	add.w	r2, r7, #32
 8002760:	4413      	add	r3, r2
 8002762:	8b3a      	ldrh	r2, [r7, #24]
 8002764:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8002768:	4b66      	ldr	r3, [pc, #408]	; (8002904 <BSP_TS_GetState+0x23c>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d011      	beq.n	8002798 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	f107 0220 	add.w	r2, r7, #32
 800277c:	4413      	add	r3, r2
 800277e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8002782:	f240 331f 	movw	r3, #799	; 0x31f
 8002786:	1a9b      	subs	r3, r3, r2
 8002788:	b29a      	uxth	r2, r3
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	f107 0120 	add.w	r1, r7, #32
 8002792:	440b      	add	r3, r1
 8002794:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8002798:	4b5a      	ldr	r3, [pc, #360]	; (8002904 <BSP_TS_GetState+0x23c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d011      	beq.n	80027c8 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	f107 0220 	add.w	r2, r7, #32
 80027ac:	4413      	add	r3, r2
 80027ae:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80027b2:	f240 13df 	movw	r3, #479	; 0x1df
 80027b6:	1a9b      	subs	r3, r3, r2
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	f107 0120 	add.w	r1, r7, #32
 80027c2:	440b      	add	r3, r1
 80027c4:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	f107 0220 	add.w	r2, r7, #32
 80027d0:	4413      	add	r3, r2
 80027d2:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80027d6:	4619      	mov	r1, r3
 80027d8:	4a4b      	ldr	r2, [pc, #300]	; (8002908 <BSP_TS_GetState+0x240>)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e0:	4299      	cmp	r1, r3
 80027e2:	d90e      	bls.n	8002802 <BSP_TS_GetState+0x13a>
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	f107 0220 	add.w	r2, r7, #32
 80027ec:	4413      	add	r3, r2
 80027ee:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80027f2:	4945      	ldr	r1, [pc, #276]	; (8002908 <BSP_TS_GetState+0x240>)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	b29b      	uxth	r3, r3
 8002800:	e00d      	b.n	800281e <BSP_TS_GetState+0x156>
 8002802:	4a41      	ldr	r2, [pc, #260]	; (8002908 <BSP_TS_GetState+0x240>)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280a:	b29a      	uxth	r2, r3
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	f107 0120 	add.w	r1, r7, #32
 8002814:	440b      	add	r3, r1
 8002816:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	b29b      	uxth	r3, r3
 800281e:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	f107 0220 	add.w	r2, r7, #32
 8002828:	4413      	add	r3, r2
 800282a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800282e:	4619      	mov	r1, r3
 8002830:	4a36      	ldr	r2, [pc, #216]	; (800290c <BSP_TS_GetState+0x244>)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002838:	4299      	cmp	r1, r3
 800283a:	d90e      	bls.n	800285a <BSP_TS_GetState+0x192>
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	f107 0220 	add.w	r2, r7, #32
 8002844:	4413      	add	r3, r2
 8002846:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800284a:	4930      	ldr	r1, [pc, #192]	; (800290c <BSP_TS_GetState+0x244>)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002852:	b29b      	uxth	r3, r3
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	b29b      	uxth	r3, r3
 8002858:	e00d      	b.n	8002876 <BSP_TS_GetState+0x1ae>
 800285a:	4a2c      	ldr	r2, [pc, #176]	; (800290c <BSP_TS_GetState+0x244>)
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002862:	b29a      	uxth	r2, r3
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	f107 0120 	add.w	r1, r7, #32
 800286c:	440b      	add	r3, r1
 800286e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	b29b      	uxth	r3, r3
 8002876:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8002878:	8afa      	ldrh	r2, [r7, #22]
 800287a:	8abb      	ldrh	r3, [r7, #20]
 800287c:	4413      	add	r3, r2
 800287e:	2b05      	cmp	r3, #5
 8002880:	dd17      	ble.n	80028b2 <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	f107 0220 	add.w	r2, r7, #32
 800288a:	4413      	add	r3, r2
 800288c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002890:	4619      	mov	r1, r3
 8002892:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <BSP_TS_GetState+0x240>)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	f107 0220 	add.w	r2, r7, #32
 80028a2:	4413      	add	r3, r2
 80028a4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80028a8:	4619      	mov	r1, r3
 80028aa:	4a18      	ldr	r2, [pc, #96]	; (800290c <BSP_TS_GetState+0x244>)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 80028b2:	4a15      	ldr	r2, [pc, #84]	; (8002908 <BSP_TS_GetState+0x240>)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ba:	b299      	uxth	r1, r3
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	460a      	mov	r2, r1
 80028c6:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 80028c8:	4a10      	ldr	r2, [pc, #64]	; (800290c <BSP_TS_GetState+0x244>)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d0:	b299      	uxth	r1, r3
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	460a      	mov	r2, r1
 80028dc:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3301      	adds	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	4293      	cmp	r3, r2
 80028ee:	f4ff af05 	bcc.w	80026fc <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80028f2:	7efb      	ldrb	r3, [r7, #27]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3724      	adds	r7, #36	; 0x24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd90      	pop	{r4, r7, pc}
 80028fc:	200004ec 	.word	0x200004ec
 8002900:	200004f1 	.word	0x200004f1
 8002904:	200004f0 	.word	0x200004f0
 8002908:	200004f4 	.word	0x200004f4
 800290c:	200004fc 	.word	0x200004fc

08002910 <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <BSP_TS_INT_MspInit+0x44>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <BSP_TS_INT_MspInit+0x44>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <BSP_TS_INT_MspInit+0x44>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800292e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002932:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002934:	2300      	movs	r3, #0
 8002936:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002938:	2301      	movs	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800293c:	2303      	movs	r3, #3
 800293e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	4619      	mov	r1, r3
 8002944:	4804      	ldr	r0, [pc, #16]	; (8002958 <BSP_TS_INT_MspInit+0x48>)
 8002946:	f002 fb21 	bl	8004f8c <HAL_GPIO_Init>
}
 800294a:	bf00      	nop
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40022000 	.word	0x40022000

0800295c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002960:	2003      	movs	r0, #3
 8002962:	f000 fdfd 	bl	8003560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002966:	2000      	movs	r0, #0
 8002968:	f000 f806 	bl	8002978 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800296c:	f00b ffaa 	bl	800e8c4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_InitTick+0x54>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_InitTick+0x58>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
 800298a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800298e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fe17 	bl	80035ca <HAL_SYSTICK_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00e      	b.n	80029c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b0f      	cmp	r3, #15
 80029aa:	d80a      	bhi.n	80029c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ac:	2200      	movs	r2, #0
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295
 80029b4:	f000 fddf 	bl	8003576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029b8:	4a06      	ldr	r2, [pc, #24]	; (80029d4 <HAL_InitTick+0x5c>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000270 	.word	0x20000270
 80029d0:	2000005c 	.word	0x2000005c
 80029d4:	20000058 	.word	0x20000058

080029d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_IncTick+0x20>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_IncTick+0x24>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_IncTick+0x24>)
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	2000005c 	.word	0x2000005c
 80029fc:	200006b4 	.word	0x200006b4

08002a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return uwTick;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_GetTick+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	200006b4 	.word	0x200006b4

08002a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a20:	f7ff ffee 	bl	8002a00 <HAL_GetTick>
 8002a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d005      	beq.n	8002a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_Delay+0x40>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a3e:	bf00      	nop
 8002a40:	f7ff ffde 	bl	8002a00 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d8f7      	bhi.n	8002a40 <HAL_Delay+0x28>
  {
  }
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	2000005c 	.word	0x2000005c

08002a5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e031      	b.n	8002ad6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f00b ff46 	bl	800e90c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d116      	bne.n	8002ac8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a9e:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <HAL_ADC_Init+0x84>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	f043 0202 	orr.w	r2, r3, #2
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fb84 	bl	80031b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f023 0303 	bic.w	r3, r3, #3
 8002abe:	f043 0201 	orr.w	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ac6:	e001      	b.n	8002acc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	ffffeefd 	.word	0xffffeefd

08002ae4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_Start_IT+0x1a>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e0a8      	b.n	8002c50 <HAL_ADC_Start_IT+0x16c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d018      	beq.n	8002b46 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002b24:	4b4d      	ldr	r3, [pc, #308]	; (8002c5c <HAL_ADC_Start_IT+0x178>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a4d      	ldr	r2, [pc, #308]	; (8002c60 <HAL_ADC_Start_IT+0x17c>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	0c9a      	lsrs	r2, r3, #18
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002b38:	e002      	b.n	8002b40 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f9      	bne.n	8002b3a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d17c      	bne.n	8002c4e <HAL_ADC_Start_IT+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b58:	4b42      	ldr	r3, [pc, #264]	; (8002c64 <HAL_ADC_Start_IT+0x180>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8e:	d106      	bne.n	8002b9e <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	f023 0206 	bic.w	r2, r3, #6
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	645a      	str	r2, [r3, #68]	; 0x44
 8002b9c:	e002      	b.n	8002ba4 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002bb4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <HAL_ADC_Start_IT+0x184>)
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002bc6:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <HAL_ADC_Start_IT+0x188>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10f      	bne.n	8002bf2 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d136      	bne.n	8002c4e <HAL_ADC_Start_IT+0x16a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	e02d      	b.n	8002c4e <HAL_ADC_Start_IT+0x16a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1e      	ldr	r2, [pc, #120]	; (8002c70 <HAL_ADC_Start_IT+0x18c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d10e      	bne.n	8002c1a <HAL_ADC_Start_IT+0x136>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d107      	bne.n	8002c1a <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c18:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002c1a:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <HAL_ADC_Start_IT+0x188>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d113      	bne.n	8002c4e <HAL_ADC_Start_IT+0x16a>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a12      	ldr	r2, [pc, #72]	; (8002c74 <HAL_ADC_Start_IT+0x190>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d10e      	bne.n	8002c4e <HAL_ADC_Start_IT+0x16a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d107      	bne.n	8002c4e <HAL_ADC_Start_IT+0x16a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c4c:	609a      	str	r2, [r3, #8]
      } 
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	20000270 	.word	0x20000270
 8002c60:	431bde83 	.word	0x431bde83
 8002c64:	fffff8fe 	.word	0xfffff8fe
 8002c68:	04000020 	.word	0x04000020
 8002c6c:	40012300 	.word	0x40012300
 8002c70:	40012000 	.word	0x40012000
 8002c74:	40012200 	.word	0x40012200

08002c78 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	bf0c      	ite	eq
 8002c96:	2301      	moveq	r3, #1
 8002c98:	2300      	movne	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d049      	beq.n	8002d4e <HAL_ADC_IRQHandler+0xd6>
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d046      	beq.n	8002d4e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d12b      	bne.n	8002d3e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d127      	bne.n	8002d3e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d119      	bne.n	8002d3e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0220 	bic.w	r2, r2, #32
 8002d18:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d105      	bne.n	8002d3e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f043 0201 	orr.w	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f8e8 	bl	8002f14 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0212 	mvn.w	r2, #18
 8002d4c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6e:	2b80      	cmp	r3, #128	; 0x80
 8002d70:	bf0c      	ite	eq
 8002d72:	2301      	moveq	r3, #1
 8002d74:	2300      	movne	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d057      	beq.n	8002e30 <HAL_ADC_IRQHandler+0x1b8>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d054      	beq.n	8002e30 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d105      	bne.n	8002d9e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d139      	bne.n	8002e20 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d006      	beq.n	8002dc8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d12b      	bne.n	8002e20 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d124      	bne.n	8002e20 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d11d      	bne.n	8002e20 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d119      	bne.n	8002e20 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dfa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f043 0201 	orr.w	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fac3 	bl	80033ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 020c 	mvn.w	r2, #12
 8002e2e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	bf0c      	ite	eq
 8002e3e:	2301      	moveq	r3, #1
 8002e40:	2300      	movne	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e50:	2b40      	cmp	r3, #64	; 0x40
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d017      	beq.n	8002e92 <HAL_ADC_IRQHandler+0x21a>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d014      	beq.n	8002e92 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d10d      	bne.n	8002e92 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f850 	bl	8002f28 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0201 	mvn.w	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d015      	beq.n	8002ef2 <HAL_ADC_IRQHandler+0x27a>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d012      	beq.n	8002ef2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	f043 0202 	orr.w	r2, r3, #2
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0220 	mvn.w	r2, #32
 8002ee0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f82a 	bl	8002f3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0220 	mvn.w	r2, #32
 8002ef0:	601a      	str	r2, [r3, #0]
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x1c>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e115      	b.n	8003198 <HAL_ADC_ConfigChannel+0x248>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b09      	cmp	r3, #9
 8002f7a:	d935      	bls.n	8002fe8 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68d9      	ldr	r1, [r3, #12]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	3b1e      	subs	r3, #30
 8002f92:	2207      	movs	r2, #7
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43da      	mvns	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a7f      	ldr	r2, [pc, #508]	; (80031a4 <HAL_ADC_ConfigChannel+0x254>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d10a      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68d9      	ldr	r1, [r3, #12]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	061a      	lsls	r2, r3, #24
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	60da      	str	r2, [r3, #12]
 8002fc0:	e035      	b.n	800302e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68d9      	ldr	r1, [r3, #12]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4403      	add	r3, r0
 8002fda:	3b1e      	subs	r3, #30
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	e022      	b.n	800302e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6919      	ldr	r1, [r3, #16]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4413      	add	r3, r2
 8002ffc:	2207      	movs	r2, #7
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43da      	mvns	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	400a      	ands	r2, r1
 800300a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6919      	ldr	r1, [r3, #16]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	b29b      	uxth	r3, r3
 800301c:	4618      	mov	r0, r3
 800301e:	4603      	mov	r3, r0
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4403      	add	r3, r0
 8003024:	409a      	lsls	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b06      	cmp	r3, #6
 8003034:	d824      	bhi.n	8003080 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	3b05      	subs	r3, #5
 8003048:	221f      	movs	r2, #31
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43da      	mvns	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	400a      	ands	r2, r1
 8003056:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	4618      	mov	r0, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	3b05      	subs	r3, #5
 8003072:	fa00 f203 	lsl.w	r2, r0, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	635a      	str	r2, [r3, #52]	; 0x34
 800307e:	e04c      	b.n	800311a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	d824      	bhi.n	80030d2 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	3b23      	subs	r3, #35	; 0x23
 800309a:	221f      	movs	r2, #31
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43da      	mvns	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	400a      	ands	r2, r1
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	4618      	mov	r0, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	3b23      	subs	r3, #35	; 0x23
 80030c4:	fa00 f203 	lsl.w	r2, r0, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
 80030d0:	e023      	b.n	800311a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	3b41      	subs	r3, #65	; 0x41
 80030e4:	221f      	movs	r2, #31
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43da      	mvns	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	400a      	ands	r2, r1
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	4618      	mov	r0, r3
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	3b41      	subs	r3, #65	; 0x41
 800310e:	fa00 f203 	lsl.w	r2, r0, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <HAL_ADC_ConfigChannel+0x258>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d109      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x1e8>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b12      	cmp	r3, #18
 800312a:	d105      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800312c:	4b1f      	ldr	r3, [pc, #124]	; (80031ac <HAL_ADC_ConfigChannel+0x25c>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a1e      	ldr	r2, [pc, #120]	; (80031ac <HAL_ADC_ConfigChannel+0x25c>)
 8003132:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003136:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1a      	ldr	r2, [pc, #104]	; (80031a8 <HAL_ADC_ConfigChannel+0x258>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d125      	bne.n	800318e <HAL_ADC_ConfigChannel+0x23e>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a17      	ldr	r2, [pc, #92]	; (80031a4 <HAL_ADC_ConfigChannel+0x254>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <HAL_ADC_ConfigChannel+0x204>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b11      	cmp	r3, #17
 8003152:	d11c      	bne.n	800318e <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003154:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HAL_ADC_ConfigChannel+0x25c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a14      	ldr	r2, [pc, #80]	; (80031ac <HAL_ADC_ConfigChannel+0x25c>)
 800315a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800315e:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a0f      	ldr	r2, [pc, #60]	; (80031a4 <HAL_ADC_ConfigChannel+0x254>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d111      	bne.n	800318e <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_ADC_ConfigChannel+0x260>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a11      	ldr	r2, [pc, #68]	; (80031b4 <HAL_ADC_ConfigChannel+0x264>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	0c9a      	lsrs	r2, r3, #18
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003180:	e002      	b.n	8003188 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3b01      	subs	r3, #1
 8003186:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f9      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	10000012 	.word	0x10000012
 80031a8:	40012000 	.word	0x40012000
 80031ac:	40012300 	.word	0x40012300
 80031b0:	20000270 	.word	0x20000270
 80031b4:	431bde83 	.word	0x431bde83

080031b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80031c0:	4b78      	ldr	r3, [pc, #480]	; (80033a4 <ADC_Init+0x1ec>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a77      	ldr	r2, [pc, #476]	; (80033a4 <ADC_Init+0x1ec>)
 80031c6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80031ca:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80031cc:	4b75      	ldr	r3, [pc, #468]	; (80033a4 <ADC_Init+0x1ec>)
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4973      	ldr	r1, [pc, #460]	; (80033a4 <ADC_Init+0x1ec>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	021a      	lsls	r2, r3, #8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800320c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800322e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6899      	ldr	r1, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	4a58      	ldr	r2, [pc, #352]	; (80033a8 <ADC_Init+0x1f0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d022      	beq.n	8003292 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800325a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6899      	ldr	r1, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800327c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6899      	ldr	r1, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	e00f      	b.n	80032b2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0202 	bic.w	r2, r2, #2
 80032c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6899      	ldr	r1, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	005a      	lsls	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01b      	beq.n	8003318 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	3b01      	subs	r3, #1
 800330c:	035a      	lsls	r2, r3, #13
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	e007      	b.n	8003328 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003326:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003336:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	3b01      	subs	r3, #1
 8003344:	051a      	lsls	r2, r3, #20
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800335c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6899      	ldr	r1, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800336a:	025a      	lsls	r2, r3, #9
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6899      	ldr	r1, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	029a      	lsls	r2, r3, #10
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	609a      	str	r2, [r3, #8]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	40012300 	.word	0x40012300
 80033a8:	0f000001 	.word	0x0f000001

080033ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <__NVIC_SetPriorityGrouping+0x40>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033dc:	4013      	ands	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <__NVIC_SetPriorityGrouping+0x44>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ee:	4a04      	ldr	r2, [pc, #16]	; (8003400 <__NVIC_SetPriorityGrouping+0x40>)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	60d3      	str	r3, [r2, #12]
}
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000ed00 	.word	0xe000ed00
 8003404:	05fa0000 	.word	0x05fa0000

08003408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <__NVIC_GetPriorityGrouping+0x18>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	0a1b      	lsrs	r3, r3, #8
 8003412:	f003 0307 	and.w	r3, r3, #7
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	2b00      	cmp	r3, #0
 8003434:	db0b      	blt.n	800344e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	f003 021f 	and.w	r2, r3, #31
 800343c:	4907      	ldr	r1, [pc, #28]	; (800345c <__NVIC_EnableIRQ+0x38>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2001      	movs	r0, #1
 8003446:	fa00 f202 	lsl.w	r2, r0, r2
 800344a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	e000e100 	.word	0xe000e100

08003460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	6039      	str	r1, [r7, #0]
 800346a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	2b00      	cmp	r3, #0
 8003472:	db0a      	blt.n	800348a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	b2da      	uxtb	r2, r3
 8003478:	490c      	ldr	r1, [pc, #48]	; (80034ac <__NVIC_SetPriority+0x4c>)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	0112      	lsls	r2, r2, #4
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	440b      	add	r3, r1
 8003484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003488:	e00a      	b.n	80034a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4908      	ldr	r1, [pc, #32]	; (80034b0 <__NVIC_SetPriority+0x50>)
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	3b04      	subs	r3, #4
 8003498:	0112      	lsls	r2, r2, #4
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	440b      	add	r3, r1
 800349e:	761a      	strb	r2, [r3, #24]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000e100 	.word	0xe000e100
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	; 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f1c3 0307 	rsb	r3, r3, #7
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	bf28      	it	cs
 80034d2:	2304      	movcs	r3, #4
 80034d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3304      	adds	r3, #4
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d902      	bls.n	80034e4 <NVIC_EncodePriority+0x30>
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3b03      	subs	r3, #3
 80034e2:	e000      	b.n	80034e6 <NVIC_EncodePriority+0x32>
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	401a      	ands	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	43d9      	mvns	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800350c:	4313      	orrs	r3, r2
         );
}
 800350e:	4618      	mov	r0, r3
 8003510:	3724      	adds	r7, #36	; 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800352c:	d301      	bcc.n	8003532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800352e:	2301      	movs	r3, #1
 8003530:	e00f      	b.n	8003552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003532:	4a0a      	ldr	r2, [pc, #40]	; (800355c <SysTick_Config+0x40>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353a:	210f      	movs	r1, #15
 800353c:	f04f 30ff 	mov.w	r0, #4294967295
 8003540:	f7ff ff8e 	bl	8003460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <SysTick_Config+0x40>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <SysTick_Config+0x40>)
 800354c:	2207      	movs	r2, #7
 800354e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	e000e010 	.word	0xe000e010

08003560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff29 	bl	80033c0 <__NVIC_SetPriorityGrouping>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003588:	f7ff ff3e 	bl	8003408 <__NVIC_GetPriorityGrouping>
 800358c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	6978      	ldr	r0, [r7, #20]
 8003594:	f7ff ff8e 	bl	80034b4 <NVIC_EncodePriority>
 8003598:	4602      	mov	r2, r0
 800359a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff5d 	bl	8003460 <__NVIC_SetPriority>
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff31 	bl	8003424 <__NVIC_EnableIRQ>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ffa2 	bl	800351c <SysTick_Config>
 80035d8:	4603      	mov	r3, r0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035f0:	f7ff fa06 	bl	8002a00 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e099      	b.n	8003734 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003620:	e00f      	b.n	8003642 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003622:	f7ff f9ed 	bl	8002a00 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b05      	cmp	r3, #5
 800362e:	d908      	bls.n	8003642 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2203      	movs	r2, #3
 800363a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e078      	b.n	8003734 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e8      	bne.n	8003622 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4b38      	ldr	r3, [pc, #224]	; (800373c <HAL_DMA_Init+0x158>)
 800365c:	4013      	ands	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800366e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800367a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003686:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	2b04      	cmp	r3, #4
 800369a:	d107      	bne.n	80036ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	4313      	orrs	r3, r2
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f023 0307 	bic.w	r3, r3, #7
 80036c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d117      	bne.n	8003706 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00e      	beq.n	8003706 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f8bd 	bl	8003868 <DMA_CheckFifoParam>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2240      	movs	r2, #64	; 0x40
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003702:	2301      	movs	r3, #1
 8003704:	e016      	b.n	8003734 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f874 	bl	80037fc <DMA_CalcBaseAndBitshift>
 8003714:	4603      	mov	r3, r0
 8003716:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	223f      	movs	r2, #63	; 0x3f
 800371e:	409a      	lsls	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	e010803f 	.word	0xe010803f

08003740 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e050      	b.n	80037f4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d101      	bne.n	8003762 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
 8003760:	e048      	b.n	80037f4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2200      	movs	r2, #0
 8003780:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2200      	movs	r2, #0
 8003790:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2221      	movs	r2, #33	; 0x21
 80037a0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f82a 	bl	80037fc <DMA_CalcBaseAndBitshift>
 80037a8:	4603      	mov	r3, r0
 80037aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b0:	223f      	movs	r2, #63	; 0x3f
 80037b2:	409a      	lsls	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	3b10      	subs	r3, #16
 800380c:	4a13      	ldr	r2, [pc, #76]	; (800385c <DMA_CalcBaseAndBitshift+0x60>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003816:	4a12      	ldr	r2, [pc, #72]	; (8003860 <DMA_CalcBaseAndBitshift+0x64>)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b03      	cmp	r3, #3
 8003828:	d908      	bls.n	800383c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <DMA_CalcBaseAndBitshift+0x68>)
 8003832:	4013      	ands	r3, r2
 8003834:	1d1a      	adds	r2, r3, #4
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	659a      	str	r2, [r3, #88]	; 0x58
 800383a:	e006      	b.n	800384a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	4b08      	ldr	r3, [pc, #32]	; (8003864 <DMA_CalcBaseAndBitshift+0x68>)
 8003844:	4013      	ands	r3, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	aaaaaaab 	.word	0xaaaaaaab
 8003860:	0801245c 	.word	0x0801245c
 8003864:	fffffc00 	.word	0xfffffc00

08003868 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d11f      	bne.n	80038c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d855      	bhi.n	8003934 <DMA_CheckFifoParam+0xcc>
 8003888:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <DMA_CheckFifoParam+0x28>)
 800388a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388e:	bf00      	nop
 8003890:	080038a1 	.word	0x080038a1
 8003894:	080038b3 	.word	0x080038b3
 8003898:	080038a1 	.word	0x080038a1
 800389c:	08003935 	.word	0x08003935
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d045      	beq.n	8003938 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b0:	e042      	b.n	8003938 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038ba:	d13f      	bne.n	800393c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c0:	e03c      	b.n	800393c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ca:	d121      	bne.n	8003910 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d836      	bhi.n	8003940 <DMA_CheckFifoParam+0xd8>
 80038d2:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <DMA_CheckFifoParam+0x70>)
 80038d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d8:	080038e9 	.word	0x080038e9
 80038dc:	080038ef 	.word	0x080038ef
 80038e0:	080038e9 	.word	0x080038e9
 80038e4:	08003901 	.word	0x08003901
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
      break;
 80038ec:	e02f      	b.n	800394e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d024      	beq.n	8003944 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fe:	e021      	b.n	8003944 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003908:	d11e      	bne.n	8003948 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800390e:	e01b      	b.n	8003948 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d902      	bls.n	800391c <DMA_CheckFifoParam+0xb4>
 8003916:	2b03      	cmp	r3, #3
 8003918:	d003      	beq.n	8003922 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800391a:	e018      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
      break;
 8003920:	e015      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00e      	beq.n	800394c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
      break;
 8003932:	e00b      	b.n	800394c <DMA_CheckFifoParam+0xe4>
      break;
 8003934:	bf00      	nop
 8003936:	e00a      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      break;
 8003938:	bf00      	nop
 800393a:	e008      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      break;
 800393c:	bf00      	nop
 800393e:	e006      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      break;
 8003940:	bf00      	nop
 8003942:	e004      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      break;
 8003944:	bf00      	nop
 8003946:	e002      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      break;   
 8003948:	bf00      	nop
 800394a:	e000      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      break;
 800394c:	bf00      	nop
    }
  } 
  
  return status; 
 800394e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e049      	b.n	8003a02 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f00a ffe8 	bl	800e958 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ac:	f023 0107 	bic.w	r1, r3, #7
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <HAL_DMA2D_Init+0xb0>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68d1      	ldr	r1, [r2, #12]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	430b      	orrs	r3, r1
 80039d0:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	051a      	lsls	r2, r3, #20
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	055b      	lsls	r3, r3, #21
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	ffffc000 	.word	0xffffc000

08003a10 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_DMA2D_Start+0x1c>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e018      	b.n	8003a5e <HAL_DMA2D_Start+0x4e>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f994 	bl	8003d74 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b086      	sub	sp, #24
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d056      	beq.n	8003b30 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003a82:	f7fe ffbd 	bl	8002a00 <HAL_GetTick>
 8003a86:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003a88:	e04b      	b.n	8003b22 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d023      	beq.n	8003ae4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aaa:	f043 0202 	orr.w	r2, r3, #2
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac0:	f043 0201 	orr.w	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2221      	movs	r2, #33	; 0x21
 8003ace:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0a5      	b.n	8003c30 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d01a      	beq.n	8003b22 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003aec:	f7fe ff88 	bl	8002a00 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d302      	bcc.n	8003b02 <HAL_DMA2D_PollForTransfer+0x9c>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10f      	bne.n	8003b22 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b06:	f043 0220 	orr.w	r2, r3, #32
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2203      	movs	r2, #3
 8003b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e086      	b.n	8003c30 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0ac      	beq.n	8003a8a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d061      	beq.n	8003c16 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b52:	f7fe ff55 	bl	8002a00 <HAL_GetTick>
 8003b56:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003b58:	e056      	b.n	8003c08 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d02e      	beq.n	8003bca <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	f043 0204 	orr.w	r2, r3, #4
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b90:	f043 0202 	orr.w	r2, r3, #2
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	f043 0201 	orr.w	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2229      	movs	r2, #41	; 0x29
 8003bb4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2204      	movs	r2, #4
 8003bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e032      	b.n	8003c30 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d01a      	beq.n	8003c08 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003bd2:	f7fe ff15 	bl	8002a00 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <HAL_DMA2D_PollForTransfer+0x182>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10f      	bne.n	8003c08 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	f043 0220 	orr.w	r2, r3, #32
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e013      	b.n	8003c30 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0a1      	beq.n	8003b5a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2212      	movs	r2, #18
 8003c1c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_DMA2D_ConfigLayer+0x20>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e084      	b.n	8003d62 <HAL_DMA2D_ConfigLayer+0x12a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	4413      	add	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	3320      	adds	r3, #32
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	4413      	add	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	041b      	lsls	r3, r3, #16
 8003c84:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003c8c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003c98:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <HAL_DMA2D_ConfigLayer+0x138>)
 8003c9a:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b0a      	cmp	r3, #10
 8003ca2:	d003      	beq.n	8003cac <HAL_DMA2D_ConfigLayer+0x74>
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b09      	cmp	r3, #9
 8003caa:	d107      	bne.n	8003cbc <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	e005      	b.n	8003cc8 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	061b      	lsls	r3, r3, #24
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d120      	bne.n	8003d10 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	ea02 0103 	and.w	r1, r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	6812      	ldr	r2, [r2, #0]
 8003cee:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b0a      	cmp	r3, #10
 8003cf6:	d003      	beq.n	8003d00 <HAL_DMA2D_ConfigLayer+0xc8>
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b09      	cmp	r3, #9
 8003cfe:	d127      	bne.n	8003d50 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d0c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d0e:	e01f      	b.n	8003d50 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69da      	ldr	r2, [r3, #28]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	ea02 0103 	and.w	r1, r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b0a      	cmp	r3, #10
 8003d38:	d003      	beq.n	8003d42 <HAL_DMA2D_ConfigLayer+0x10a>
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b09      	cmp	r3, #9
 8003d40:	d106      	bne.n	8003d50 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d4e:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	ff33000f 	.word	0xff33000f

08003d74 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b08b      	sub	sp, #44	; 0x2c
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d88:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	041a      	lsls	r2, r3, #16
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	431a      	orrs	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dac:	d174      	bne.n	8003e98 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003db4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003dbc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003dc4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d108      	bne.n	8003de6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
 8003de4:	e053      	b.n	8003e8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d106      	bne.n	8003dfc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfa:	e048      	b.n	8003e8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d111      	bne.n	8003e28 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	0cdb      	lsrs	r3, r3, #19
 8003e08:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	0a9b      	lsrs	r3, r3, #10
 8003e0e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	08db      	lsrs	r3, r3, #3
 8003e14:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	02db      	lsls	r3, r3, #11
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
 8003e26:	e032      	b.n	8003e8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d117      	bne.n	8003e60 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	0fdb      	lsrs	r3, r3, #31
 8003e34:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	0cdb      	lsrs	r3, r3, #19
 8003e3a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	0adb      	lsrs	r3, r3, #11
 8003e40:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	08db      	lsrs	r3, r3, #3
 8003e46:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	029b      	lsls	r3, r3, #10
 8003e50:	431a      	orrs	r2, r3
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	03db      	lsls	r3, r3, #15
 8003e56:	4313      	orrs	r3, r2
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5e:	e016      	b.n	8003e8e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	0f1b      	lsrs	r3, r3, #28
 8003e64:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	0d1b      	lsrs	r3, r3, #20
 8003e6a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	0b1b      	lsrs	r3, r3, #12
 8003e70:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	091b      	lsrs	r3, r3, #4
 8003e76:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	011a      	lsls	r2, r3, #4
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	431a      	orrs	r2, r3
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	031b      	lsls	r3, r3, #12
 8003e86:	4313      	orrs	r3, r2
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003e96:	e003      	b.n	8003ea0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	60da      	str	r2, [r3, #12]
}
 8003ea0:	bf00      	nop
 8003ea2:	372c      	adds	r7, #44	; 0x2c
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	019a      	lsls	r2, r3, #6
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	021b      	lsls	r3, r3, #8
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	041b      	lsls	r3, r3, #16
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003ed2:	bf00      	nop
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b086      	sub	sp, #24
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
 8003eea:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eec:	f7fe fd88 	bl	8002a00 <HAL_GetTick>
 8003ef0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003ef2:	e009      	b.n	8003f08 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003ef4:	f7fe fd84 	bl	8002a00 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f02:	d901      	bls.n	8003f08 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e015      	b.n	8003f34 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0ee      	beq.n	8003ef4 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	019a      	lsls	r2, r3, #6
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	ea42 0103 	orr.w	r1, r2, r3
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	041a      	lsls	r2, r3, #16
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e106      	b.n	800415e <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7c5b      	ldrb	r3, [r3, #17]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d102      	bne.n	8003f60 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f00a fd1c 	bl	800e998 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2203      	movs	r2, #3
 8003f64:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003f66:	2300      	movs	r3, #0
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003f7a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f8e:	f7fe fd37 	bl	8002a00 <HAL_GetTick>
 8003f92:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003f94:	e009      	b.n	8003faa <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003f96:	f7fe fd33 	bl	8002a00 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fa4:	d901      	bls.n	8003faa <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e0d9      	b.n	800415e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0ed      	beq.n	8003f96 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4b68      	ldr	r3, [pc, #416]	; (8004168 <HAL_DSI_Init+0x22c>)
 8003fc8:	400b      	ands	r3, r1
 8003fca:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	009a      	lsls	r2, r3, #2
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	02db      	lsls	r3, r3, #11
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	041b      	lsls	r3, r3, #16
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800401e:	f7fe fcef 	bl	8002a00 <HAL_GetTick>
 8004022:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004024:	e009      	b.n	800403a <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004026:	f7fe fceb 	bl	8002a00 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004034:	d901      	bls.n	800403a <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e091      	b.n	800415e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0ed      	beq.n	8004026 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0206 	orr.w	r2, r2, #6
 800405a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0203 	bic.w	r2, r2, #3
 800406e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0201 	orr.w	r2, r2, #1
 8004088:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0203 	bic.w	r2, r2, #3
 800409c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040c4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6899      	ldr	r1, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_DSI_Init+0x1aa>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	e000      	b.n	80040e8 <HAL_DSI_Init+0x1ac>
 80040e6:	2301      	movs	r3, #1
 80040e8:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	4a1f      	ldr	r2, [pc, #124]	; (800416c <HAL_DSI_Init+0x230>)
 80040ee:	fb02 f203 	mul.w	r2, r2, r3
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	409a      	lsls	r2, r3
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800411e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	430a      	orrs	r2, r1
 8004132:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2200      	movs	r2, #0
 800413c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2200      	movs	r2, #0
 8004146:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3720      	adds	r7, #32
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	fffc8603 	.word	0xfffc8603
 800416c:	003d0900 	.word	0x003d0900

08004170 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e066      	b.n	8004250 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2203      	movs	r2, #3
 8004186:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8004188:	2300      	movs	r3, #0
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0208 	bic.w	r2, r2, #8
 800419c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80041b0:	2300      	movs	r3, #0
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	605a      	str	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0206 	bic.w	r2, r2, #6
 80041e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0201 	bic.w	r2, r2, #1
 80041fa:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004222:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800422e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f00a fbf2 	bl	800ea20 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	7c1b      	ldrb	r3, [r3, #16]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_DSI_ConfigErrorMonitor+0x16>
 800426a:	2302      	movs	r3, #2
 800426c:	e0aa      	b.n	80043c4 <HAL_DSI_ConfigErrorMonitor+0x16c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2200      	movs	r2, #0
 800427a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2200      	movs	r2, #0
 8004284:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042a8:	430b      	orrs	r3, r1
 80042aa:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d009      	beq.n	80042cc <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80042c8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d009      	beq.n	80042ea <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d009      	beq.n	8004308 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0202 	orr.w	r2, r2, #2
 8004304:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	2b00      	cmp	r3, #0
 8004310:	d009      	beq.n	8004326 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 020c 	orr.w	r2, r2, #12
 8004322:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d009      	beq.n	8004344 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0210 	orr.w	r2, r2, #16
 8004340:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0220 	orr.w	r2, r2, #32
 800435e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004368:	2b00      	cmp	r3, #0
 800436a:	d009      	beq.n	8004380 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800437c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800439a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d009      	beq.n	80043bc <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80043b8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	7c1b      	ldrb	r3, [r3, #16]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_DSI_SetGenericVCID+0x16>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e016      	b.n	8004414 <HAL_DSI_SetGenericVCID+0x44>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0203 	bic.w	r2, r2, #3
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	7c1b      	ldrb	r3, [r3, #16]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_DSI_ConfigVideoMode+0x16>
 8004432:	2302      	movs	r3, #2
 8004434:	e1ee      	b.n	8004814 <HAL_DSI_ConfigVideoMode+0x3f4>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0203 	bic.w	r2, r2, #3
 800446e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b8b      	ldr	r3, [pc, #556]	; (80046bc <HAL_DSI_ConfigVideoMode+0x29c>)
 800448e:	400b      	ands	r3, r1
 8004490:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	4b84      	ldr	r3, [pc, #528]	; (80046c0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80044b0:	400b      	ands	r3, r1
 80044b2:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	695a      	ldr	r2, [r3, #20]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4b7b      	ldr	r3, [pc, #492]	; (80046c0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80044d2:	400b      	ands	r3, r1
 80044d4:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	699a      	ldr	r2, [r3, #24]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0203 	bic.w	r2, r2, #3
 80044f6:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68d9      	ldr	r1, [r3, #12]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0207 	bic.w	r2, r2, #7
 8004518:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6959      	ldr	r1, [r3, #20]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	431a      	orrs	r2, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 020f 	bic.w	r2, r2, #15
 8004546:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6919      	ldr	r1, [r3, #16]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 020e 	bic.w	r2, r2, #14
 800456a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	005a      	lsls	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b03      	cmp	r3, #3
 800458c:	d110      	bne.n	80045b0 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800459c:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6919      	ldr	r1, [r3, #16]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4b42      	ldr	r3, [pc, #264]	; (80046c4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80045bc:	400b      	ands	r3, r1
 80045be:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	4b39      	ldr	r3, [pc, #228]	; (80046c4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80045de:	400b      	ands	r3, r1
 80045e0:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4b32      	ldr	r3, [pc, #200]	; (80046c8 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8004600:	400b      	ands	r3, r1
 8004602:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4b2a      	ldr	r3, [pc, #168]	; (80046cc <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004622:	400b      	ands	r3, r1
 8004624:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4b22      	ldr	r3, [pc, #136]	; (80046cc <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004644:	400b      	ands	r3, r1
 8004646:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004666:	400b      	ands	r3, r1
 8004668:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <HAL_DSI_ConfigVideoMode+0x29c>)
 8004688:	400b      	ands	r3, r1
 800468a:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046b8:	e00a      	b.n	80046d0 <HAL_DSI_ConfigVideoMode+0x2b0>
 80046ba:	bf00      	nop
 80046bc:	ffffc000 	.word	0xffffc000
 80046c0:	ffffe000 	.word	0xffffe000
 80046c4:	fffff000 	.word	0xfffff000
 80046c8:	ffff8000 	.word	0xffff8000
 80046cc:	fffffc00 	.word	0xfffffc00
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80046e6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6999      	ldr	r1, [r3, #24]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f2:	041a      	lsls	r2, r3, #16
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800470a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6999      	ldr	r1, [r3, #24]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800472c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800474e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004770:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004792:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047d6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047f8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	7c1b      	ldrb	r3, [r3, #16]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004832:	2302      	movs	r3, #2
 8004834:	e0c5      	b.n	80049c2 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0201 	orr.w	r2, r2, #1
 8004870:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0203 	bic.w	r2, r2, #3
 8004882:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68d9      	ldr	r1, [r3, #12]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695a      	ldr	r2, [r3, #20]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0207 	bic.w	r2, r2, #7
 80048a4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6959      	ldr	r1, [r3, #20]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	69da      	ldr	r2, [r3, #28]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	431a      	orrs	r2, r3
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 020f 	bic.w	r2, r2, #15
 80048d2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6919      	ldr	r1, [r3, #16]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 020e 	bic.w	r2, r2, #14
 80048f6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	005a      	lsls	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4b2c      	ldr	r3, [pc, #176]	; (80049d0 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800491e:	400b      	ands	r3, r1
 8004920:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004944:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	431a      	orrs	r2, r3
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0201 	bic.w	r2, r2, #1
 800497e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0202 	orr.w	r2, r2, #2
 80049b6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	ffff0000 	.word	0xffff0000

080049d4 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	7c1b      	ldrb	r3, [r3, #16]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_DSI_ConfigCommand+0x16>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e049      	b.n	8004a7e <HAL_DSI_ConfigCommand+0xaa>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4b24      	ldr	r3, [pc, #144]	; (8004a8c <HAL_DSI_ConfigCommand+0xb8>)
 80049fc:	400b      	ands	r3, r1
 80049fe:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004a0e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004a14:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004a1a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004a20:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004a26:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004a2c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004a32:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004a38:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004a3e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004a44:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004a4a:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0202 	bic.w	r2, r2, #2
 8004a62:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	fef080ff 	.word	0xfef080ff

08004a90 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	7c1b      	ldrb	r3, [r3, #16]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_DSI_ConfigFlowControl+0x16>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e016      	b.n	8004ad4 <HAL_DSI_ConfigFlowControl+0x44>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 021f 	bic.w	r2, r2, #31
 8004aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	7c1b      	ldrb	r3, [r3, #16]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_DSI_ConfigPhyTimer+0x16>
 8004af2:	2302      	movs	r3, #2
 8004af4:	e058      	b.n	8004ba8 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	4293      	cmp	r3, r2
 8004b06:	bf38      	it	cc
 8004b08:	4613      	movcc	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004b1c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	041a      	lsls	r2, r3, #16
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004b4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004b84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	021a      	lsls	r2, r3, #8
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	7c1b      	ldrb	r3, [r3, #16]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_DSI_ConfigHostTimeouts+0x16>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e0b4      	b.n	8004d34 <HAL_DSI_ConfigHostTimeouts+0x180>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004bde:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6899      	ldr	r1, [r3, #8]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	021a      	lsls	r2, r3, #8
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	b292      	uxth	r2, r2
 8004c00:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	041a      	lsls	r2, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	4b47      	ldr	r3, [pc, #284]	; (8004d40 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c22:	400b      	ands	r3, r1
 8004c24:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4b3f      	ldr	r3, [pc, #252]	; (8004d40 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c44:	400b      	ands	r3, r1
 8004c46:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4b36      	ldr	r3, [pc, #216]	; (8004d40 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c68:	400b      	ands	r3, r1
 8004c6a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	4b2b      	ldr	r3, [pc, #172]	; (8004d40 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c92:	400b      	ands	r3, r1
 8004c94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	695a      	ldr	r2, [r3, #20]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	4b16      	ldr	r3, [pc, #88]	; (8004d40 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004ce6:	400b      	ands	r3, r1
 8004ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004d10:	400b      	ands	r3, r1
 8004d12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6a1a      	ldr	r2, [r3, #32]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	ffff0000 	.word	0xffff0000

08004d44 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	7c1b      	ldrb	r3, [r3, #16]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_DSI_Start+0x14>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e02b      	b.n	8004db0 <HAL_DSI_Start+0x6c>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004d80:	2300      	movs	r3, #0
 8004d82:	60bb      	str	r3, [r7, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0208 	orr.w	r2, r2, #8
 8004d94:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	7c1b      	ldrb	r3, [r3, #16]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_DSI_ShortWrite+0x1a>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e010      	b.n	8004df8 <HAL_DSI_ShortWrite+0x3c>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7ff f879 	bl	8003ede <DSI_ShortWrite>
 8004dec:	4603      	mov	r3, r0
 8004dee:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	741a      	strb	r2, [r3, #16]

  return status;
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08c      	sub	sp, #48	; 0x30
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e10:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	7c1b      	ldrb	r3, [r3, #16]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_DSI_LongWrite+0x1e>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e084      	b.n	8004f28 <HAL_DSI_LongWrite+0x128>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e24:	f7fd fdec 	bl	8002a00 <HAL_GetTick>
 8004e28:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004e2a:	e00c      	b.n	8004e46 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004e2c:	f7fd fde8 	bl	8002a00 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e3a:	d904      	bls.n	8004e46 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e070      	b.n	8004f28 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0eb      	beq.n	8004e2c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	bf28      	it	cs
 8004e5e:	2303      	movcs	r3, #3
 8004e60:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004e62:	2300      	movs	r3, #0
 8004e64:	623b      	str	r3, [r7, #32]
 8004e66:	e00f      	b.n	8004e88 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	3301      	adds	r3, #1
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	69fa      	ldr	r2, [r7, #28]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	3301      	adds	r3, #1
 8004e86:	623b      	str	r3, [r7, #32]
 8004e88:	6a3a      	ldr	r2, [r7, #32]
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d3eb      	bcc.n	8004e68 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004ea8:	e028      	b.n	8004efc <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	bf28      	it	cs
 8004eb0:	2304      	movcs	r3, #4
 8004eb2:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	623b      	str	r3, [r7, #32]
 8004ebc:	e00e      	b.n	8004edc <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	623b      	str	r3, [r7, #32]
 8004edc:	6a3a      	ldr	r2, [r7, #32]
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d3ec      	bcc.n	8004ebe <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4413      	add	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1d3      	bne.n	8004eaa <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004f0a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	4613      	mov	r3, r2
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	f7fe ffc6 	bl	8003eac <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3728      	adds	r7, #40	; 0x28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	7c1b      	ldrb	r3, [r3, #16]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e01b      	b.n	8004f7e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004f5c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	065a      	lsls	r2, r3, #25
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
	...

08004f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b089      	sub	sp, #36	; 0x24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
 8004faa:	e175      	b.n	8005298 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004fac:	2201      	movs	r2, #1
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	f040 8164 	bne.w	8005292 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d003      	beq.n	8004fda <HAL_GPIO_Init+0x4e>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b12      	cmp	r3, #18
 8004fd8:	d123      	bne.n	8005022 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	08da      	lsrs	r2, r3, #3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3208      	adds	r2, #8
 8004fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	220f      	movs	r2, #15
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	43db      	mvns	r3, r3
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	fa02 f303 	lsl.w	r3, r2, r3
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	4313      	orrs	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	08da      	lsrs	r2, r3, #3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3208      	adds	r2, #8
 800501c:	69b9      	ldr	r1, [r7, #24]
 800501e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	2203      	movs	r2, #3
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	43db      	mvns	r3, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4013      	ands	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f003 0203 	and.w	r2, r3, #3
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4313      	orrs	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d00b      	beq.n	8005076 <HAL_GPIO_Init+0xea>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b02      	cmp	r3, #2
 8005064:	d007      	beq.n	8005076 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800506a:	2b11      	cmp	r3, #17
 800506c:	d003      	beq.n	8005076 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b12      	cmp	r3, #18
 8005074:	d130      	bne.n	80050d8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	2203      	movs	r2, #3
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	43db      	mvns	r3, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4013      	ands	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	4313      	orrs	r3, r2
 800509e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050ac:	2201      	movs	r2, #1
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	43db      	mvns	r3, r3
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4013      	ands	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f003 0201 	and.w	r2, r3, #1
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	2203      	movs	r2, #3
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	43db      	mvns	r3, r3
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	4013      	ands	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4313      	orrs	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80be 	beq.w	8005292 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005116:	4b65      	ldr	r3, [pc, #404]	; (80052ac <HAL_GPIO_Init+0x320>)
 8005118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511a:	4a64      	ldr	r2, [pc, #400]	; (80052ac <HAL_GPIO_Init+0x320>)
 800511c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005120:	6453      	str	r3, [r2, #68]	; 0x44
 8005122:	4b62      	ldr	r3, [pc, #392]	; (80052ac <HAL_GPIO_Init+0x320>)
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800512e:	4a60      	ldr	r2, [pc, #384]	; (80052b0 <HAL_GPIO_Init+0x324>)
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	089b      	lsrs	r3, r3, #2
 8005134:	3302      	adds	r3, #2
 8005136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800513a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	220f      	movs	r2, #15
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	43db      	mvns	r3, r3
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4013      	ands	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a57      	ldr	r2, [pc, #348]	; (80052b4 <HAL_GPIO_Init+0x328>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d037      	beq.n	80051ca <HAL_GPIO_Init+0x23e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a56      	ldr	r2, [pc, #344]	; (80052b8 <HAL_GPIO_Init+0x32c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d031      	beq.n	80051c6 <HAL_GPIO_Init+0x23a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a55      	ldr	r2, [pc, #340]	; (80052bc <HAL_GPIO_Init+0x330>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d02b      	beq.n	80051c2 <HAL_GPIO_Init+0x236>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a54      	ldr	r2, [pc, #336]	; (80052c0 <HAL_GPIO_Init+0x334>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d025      	beq.n	80051be <HAL_GPIO_Init+0x232>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a53      	ldr	r2, [pc, #332]	; (80052c4 <HAL_GPIO_Init+0x338>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d01f      	beq.n	80051ba <HAL_GPIO_Init+0x22e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a52      	ldr	r2, [pc, #328]	; (80052c8 <HAL_GPIO_Init+0x33c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d019      	beq.n	80051b6 <HAL_GPIO_Init+0x22a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a51      	ldr	r2, [pc, #324]	; (80052cc <HAL_GPIO_Init+0x340>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <HAL_GPIO_Init+0x226>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a50      	ldr	r2, [pc, #320]	; (80052d0 <HAL_GPIO_Init+0x344>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00d      	beq.n	80051ae <HAL_GPIO_Init+0x222>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a4f      	ldr	r2, [pc, #316]	; (80052d4 <HAL_GPIO_Init+0x348>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d007      	beq.n	80051aa <HAL_GPIO_Init+0x21e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a4e      	ldr	r2, [pc, #312]	; (80052d8 <HAL_GPIO_Init+0x34c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d101      	bne.n	80051a6 <HAL_GPIO_Init+0x21a>
 80051a2:	2309      	movs	r3, #9
 80051a4:	e012      	b.n	80051cc <HAL_GPIO_Init+0x240>
 80051a6:	230a      	movs	r3, #10
 80051a8:	e010      	b.n	80051cc <HAL_GPIO_Init+0x240>
 80051aa:	2308      	movs	r3, #8
 80051ac:	e00e      	b.n	80051cc <HAL_GPIO_Init+0x240>
 80051ae:	2307      	movs	r3, #7
 80051b0:	e00c      	b.n	80051cc <HAL_GPIO_Init+0x240>
 80051b2:	2306      	movs	r3, #6
 80051b4:	e00a      	b.n	80051cc <HAL_GPIO_Init+0x240>
 80051b6:	2305      	movs	r3, #5
 80051b8:	e008      	b.n	80051cc <HAL_GPIO_Init+0x240>
 80051ba:	2304      	movs	r3, #4
 80051bc:	e006      	b.n	80051cc <HAL_GPIO_Init+0x240>
 80051be:	2303      	movs	r3, #3
 80051c0:	e004      	b.n	80051cc <HAL_GPIO_Init+0x240>
 80051c2:	2302      	movs	r3, #2
 80051c4:	e002      	b.n	80051cc <HAL_GPIO_Init+0x240>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <HAL_GPIO_Init+0x240>
 80051ca:	2300      	movs	r3, #0
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	f002 0203 	and.w	r2, r2, #3
 80051d2:	0092      	lsls	r2, r2, #2
 80051d4:	4093      	lsls	r3, r2
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	4313      	orrs	r3, r2
 80051da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80051dc:	4934      	ldr	r1, [pc, #208]	; (80052b0 <HAL_GPIO_Init+0x324>)
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	089b      	lsrs	r3, r3, #2
 80051e2:	3302      	adds	r3, #2
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051ea:	4b3c      	ldr	r3, [pc, #240]	; (80052dc <HAL_GPIO_Init+0x350>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	43db      	mvns	r3, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4013      	ands	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800520e:	4a33      	ldr	r2, [pc, #204]	; (80052dc <HAL_GPIO_Init+0x350>)
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005214:	4b31      	ldr	r3, [pc, #196]	; (80052dc <HAL_GPIO_Init+0x350>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	43db      	mvns	r3, r3
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	4013      	ands	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005238:	4a28      	ldr	r2, [pc, #160]	; (80052dc <HAL_GPIO_Init+0x350>)
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800523e:	4b27      	ldr	r3, [pc, #156]	; (80052dc <HAL_GPIO_Init+0x350>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	43db      	mvns	r3, r3
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4013      	ands	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005262:	4a1e      	ldr	r2, [pc, #120]	; (80052dc <HAL_GPIO_Init+0x350>)
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005268:	4b1c      	ldr	r3, [pc, #112]	; (80052dc <HAL_GPIO_Init+0x350>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	43db      	mvns	r3, r3
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	4013      	ands	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800528c:	4a13      	ldr	r2, [pc, #76]	; (80052dc <HAL_GPIO_Init+0x350>)
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	3301      	adds	r3, #1
 8005296:	61fb      	str	r3, [r7, #28]
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	2b0f      	cmp	r3, #15
 800529c:	f67f ae86 	bls.w	8004fac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80052a0:	bf00      	nop
 80052a2:	3724      	adds	r7, #36	; 0x24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	40023800 	.word	0x40023800
 80052b0:	40013800 	.word	0x40013800
 80052b4:	40020000 	.word	0x40020000
 80052b8:	40020400 	.word	0x40020400
 80052bc:	40020800 	.word	0x40020800
 80052c0:	40020c00 	.word	0x40020c00
 80052c4:	40021000 	.word	0x40021000
 80052c8:	40021400 	.word	0x40021400
 80052cc:	40021800 	.word	0x40021800
 80052d0:	40021c00 	.word	0x40021c00
 80052d4:	40022000 	.word	0x40022000
 80052d8:	40022400 	.word	0x40022400
 80052dc:	40013c00 	.word	0x40013c00

080052e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80052ea:	2300      	movs	r3, #0
 80052ec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	e0d9      	b.n	80054b0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80052fc:	2201      	movs	r2, #1
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	4013      	ands	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	429a      	cmp	r2, r3
 8005314:	f040 80c9 	bne.w	80054aa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005318:	4a6a      	ldr	r2, [pc, #424]	; (80054c4 <HAL_GPIO_DeInit+0x1e4>)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	089b      	lsrs	r3, r3, #2
 800531e:	3302      	adds	r3, #2
 8005320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005324:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	220f      	movs	r2, #15
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a62      	ldr	r2, [pc, #392]	; (80054c8 <HAL_GPIO_DeInit+0x1e8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d037      	beq.n	80053b2 <HAL_GPIO_DeInit+0xd2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a61      	ldr	r2, [pc, #388]	; (80054cc <HAL_GPIO_DeInit+0x1ec>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d031      	beq.n	80053ae <HAL_GPIO_DeInit+0xce>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a60      	ldr	r2, [pc, #384]	; (80054d0 <HAL_GPIO_DeInit+0x1f0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d02b      	beq.n	80053aa <HAL_GPIO_DeInit+0xca>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a5f      	ldr	r2, [pc, #380]	; (80054d4 <HAL_GPIO_DeInit+0x1f4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d025      	beq.n	80053a6 <HAL_GPIO_DeInit+0xc6>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a5e      	ldr	r2, [pc, #376]	; (80054d8 <HAL_GPIO_DeInit+0x1f8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d01f      	beq.n	80053a2 <HAL_GPIO_DeInit+0xc2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a5d      	ldr	r2, [pc, #372]	; (80054dc <HAL_GPIO_DeInit+0x1fc>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d019      	beq.n	800539e <HAL_GPIO_DeInit+0xbe>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a5c      	ldr	r2, [pc, #368]	; (80054e0 <HAL_GPIO_DeInit+0x200>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d013      	beq.n	800539a <HAL_GPIO_DeInit+0xba>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a5b      	ldr	r2, [pc, #364]	; (80054e4 <HAL_GPIO_DeInit+0x204>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00d      	beq.n	8005396 <HAL_GPIO_DeInit+0xb6>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a5a      	ldr	r2, [pc, #360]	; (80054e8 <HAL_GPIO_DeInit+0x208>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d007      	beq.n	8005392 <HAL_GPIO_DeInit+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a59      	ldr	r2, [pc, #356]	; (80054ec <HAL_GPIO_DeInit+0x20c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d101      	bne.n	800538e <HAL_GPIO_DeInit+0xae>
 800538a:	2309      	movs	r3, #9
 800538c:	e012      	b.n	80053b4 <HAL_GPIO_DeInit+0xd4>
 800538e:	230a      	movs	r3, #10
 8005390:	e010      	b.n	80053b4 <HAL_GPIO_DeInit+0xd4>
 8005392:	2308      	movs	r3, #8
 8005394:	e00e      	b.n	80053b4 <HAL_GPIO_DeInit+0xd4>
 8005396:	2307      	movs	r3, #7
 8005398:	e00c      	b.n	80053b4 <HAL_GPIO_DeInit+0xd4>
 800539a:	2306      	movs	r3, #6
 800539c:	e00a      	b.n	80053b4 <HAL_GPIO_DeInit+0xd4>
 800539e:	2305      	movs	r3, #5
 80053a0:	e008      	b.n	80053b4 <HAL_GPIO_DeInit+0xd4>
 80053a2:	2304      	movs	r3, #4
 80053a4:	e006      	b.n	80053b4 <HAL_GPIO_DeInit+0xd4>
 80053a6:	2303      	movs	r3, #3
 80053a8:	e004      	b.n	80053b4 <HAL_GPIO_DeInit+0xd4>
 80053aa:	2302      	movs	r3, #2
 80053ac:	e002      	b.n	80053b4 <HAL_GPIO_DeInit+0xd4>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <HAL_GPIO_DeInit+0xd4>
 80053b2:	2300      	movs	r3, #0
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	f002 0203 	and.w	r2, r2, #3
 80053ba:	0092      	lsls	r2, r2, #2
 80053bc:	4093      	lsls	r3, r2
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d132      	bne.n	800542a <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	220f      	movs	r2, #15
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80053d4:	4a3b      	ldr	r2, [pc, #236]	; (80054c4 <HAL_GPIO_DeInit+0x1e4>)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	089b      	lsrs	r3, r3, #2
 80053da:	3302      	adds	r3, #2
 80053dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	43da      	mvns	r2, r3
 80053e4:	4837      	ldr	r0, [pc, #220]	; (80054c4 <HAL_GPIO_DeInit+0x1e4>)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	089b      	lsrs	r3, r3, #2
 80053ea:	400a      	ands	r2, r1
 80053ec:	3302      	adds	r3, #2
 80053ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80053f2:	4b3f      	ldr	r3, [pc, #252]	; (80054f0 <HAL_GPIO_DeInit+0x210>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	43db      	mvns	r3, r3
 80053fa:	493d      	ldr	r1, [pc, #244]	; (80054f0 <HAL_GPIO_DeInit+0x210>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005400:	4b3b      	ldr	r3, [pc, #236]	; (80054f0 <HAL_GPIO_DeInit+0x210>)
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	43db      	mvns	r3, r3
 8005408:	4939      	ldr	r1, [pc, #228]	; (80054f0 <HAL_GPIO_DeInit+0x210>)
 800540a:	4013      	ands	r3, r2
 800540c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800540e:	4b38      	ldr	r3, [pc, #224]	; (80054f0 <HAL_GPIO_DeInit+0x210>)
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	43db      	mvns	r3, r3
 8005416:	4936      	ldr	r1, [pc, #216]	; (80054f0 <HAL_GPIO_DeInit+0x210>)
 8005418:	4013      	ands	r3, r2
 800541a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800541c:	4b34      	ldr	r3, [pc, #208]	; (80054f0 <HAL_GPIO_DeInit+0x210>)
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	43db      	mvns	r3, r3
 8005424:	4932      	ldr	r1, [pc, #200]	; (80054f0 <HAL_GPIO_DeInit+0x210>)
 8005426:	4013      	ands	r3, r2
 8005428:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	2103      	movs	r1, #3
 8005434:	fa01 f303 	lsl.w	r3, r1, r3
 8005438:	43db      	mvns	r3, r3
 800543a:	401a      	ands	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	08da      	lsrs	r2, r3, #3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3208      	adds	r2, #8
 8005448:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	220f      	movs	r2, #15
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	43db      	mvns	r3, r3
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	08d2      	lsrs	r2, r2, #3
 8005460:	4019      	ands	r1, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3208      	adds	r2, #8
 8005466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	2103      	movs	r1, #3
 8005474:	fa01 f303 	lsl.w	r3, r1, r3
 8005478:	43db      	mvns	r3, r3
 800547a:	401a      	ands	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	2101      	movs	r1, #1
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	fa01 f303 	lsl.w	r3, r1, r3
 800548c:	43db      	mvns	r3, r3
 800548e:	401a      	ands	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	2103      	movs	r1, #3
 800549e:	fa01 f303 	lsl.w	r3, r1, r3
 80054a2:	43db      	mvns	r3, r3
 80054a4:	401a      	ands	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	3301      	adds	r3, #1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2b0f      	cmp	r3, #15
 80054b4:	f67f af22 	bls.w	80052fc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80054b8:	bf00      	nop
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	40013800 	.word	0x40013800
 80054c8:	40020000 	.word	0x40020000
 80054cc:	40020400 	.word	0x40020400
 80054d0:	40020800 	.word	0x40020800
 80054d4:	40020c00 	.word	0x40020c00
 80054d8:	40021000 	.word	0x40021000
 80054dc:	40021400 	.word	0x40021400
 80054e0:	40021800 	.word	0x40021800
 80054e4:	40021c00 	.word	0x40021c00
 80054e8:	40022000 	.word	0x40022000
 80054ec:	40022400 	.word	0x40022400
 80054f0:	40013c00 	.word	0x40013c00

080054f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	887b      	ldrh	r3, [r7, #2]
 8005506:	4013      	ands	r3, r2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800550c:	2301      	movs	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
 8005510:	e001      	b.n	8005516 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005512:	2300      	movs	r3, #0
 8005514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005516:	7bfb      	ldrb	r3, [r7, #15]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	807b      	strh	r3, [r7, #2]
 8005530:	4613      	mov	r3, r2
 8005532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005534:	787b      	ldrb	r3, [r7, #1]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800553a:	887a      	ldrh	r2, [r7, #2]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005540:	e003      	b.n	800554a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005542:	887b      	ldrh	r3, [r7, #2]
 8005544:	041a      	lsls	r2, r3, #16
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	619a      	str	r2, [r3, #24]
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	460b      	mov	r3, r1
 8005560:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695a      	ldr	r2, [r3, #20]
 8005566:	887b      	ldrh	r3, [r7, #2]
 8005568:	401a      	ands	r2, r3
 800556a:	887b      	ldrh	r3, [r7, #2]
 800556c:	429a      	cmp	r2, r3
 800556e:	d104      	bne.n	800557a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005570:	887b      	ldrh	r3, [r7, #2]
 8005572:	041a      	lsls	r2, r3, #16
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005578:	e002      	b.n	8005580 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800557a:	887a      	ldrh	r2, [r7, #2]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	619a      	str	r2, [r3, #24]
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005596:	4b08      	ldr	r3, [pc, #32]	; (80055b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	4013      	ands	r3, r2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d006      	beq.n	80055b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055a2:	4a05      	ldr	r2, [pc, #20]	; (80055b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055a4:	88fb      	ldrh	r3, [r7, #6]
 80055a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055a8:	88fb      	ldrh	r3, [r7, #6]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f007 fbfa 	bl	800cda4 <HAL_GPIO_EXTI_Callback>
  }
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40013c00 	.word	0x40013c00

080055bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e07f      	b.n	80056ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f8a9 	bl	800573a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2224      	movs	r2, #36	; 0x24
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800560c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800561c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d107      	bne.n	8005636 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005632:	609a      	str	r2, [r3, #8]
 8005634:	e006      	b.n	8005644 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005642:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	2b02      	cmp	r3, #2
 800564a:	d104      	bne.n	8005656 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005654:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6859      	ldr	r1, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	4b1d      	ldr	r3, [pc, #116]	; (80056d8 <HAL_I2C_Init+0x11c>)
 8005662:	430b      	orrs	r3, r1
 8005664:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005674:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	ea42 0103 	orr.w	r1, r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	021a      	lsls	r2, r3, #8
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69d9      	ldr	r1, [r3, #28]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1a      	ldr	r2, [r3, #32]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	02008000 	.word	0x02008000

080056dc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e021      	b.n	8005732 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2224      	movs	r2, #36	; 0x24
 80056f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0201 	bic.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f821 	bl	800574e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
	...

08005764 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af02      	add	r7, sp, #8
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	4608      	mov	r0, r1
 800576e:	4611      	mov	r1, r2
 8005770:	461a      	mov	r2, r3
 8005772:	4603      	mov	r3, r0
 8005774:	817b      	strh	r3, [r7, #10]
 8005776:	460b      	mov	r3, r1
 8005778:	813b      	strh	r3, [r7, #8]
 800577a:	4613      	mov	r3, r2
 800577c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b20      	cmp	r3, #32
 8005788:	f040 80f9 	bne.w	800597e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <HAL_I2C_Mem_Write+0x34>
 8005792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	d105      	bne.n	80057a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800579e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e0ed      	b.n	8005980 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_I2C_Mem_Write+0x4e>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e0e6      	b.n	8005980 <HAL_I2C_Mem_Write+0x21c>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057ba:	f7fd f921 	bl	8002a00 <HAL_GetTick>
 80057be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	2319      	movs	r3, #25
 80057c6:	2201      	movs	r2, #1
 80057c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 fad1 	bl	8005d74 <I2C_WaitOnFlagUntilTimeout>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e0d1      	b.n	8005980 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2221      	movs	r2, #33	; 0x21
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2240      	movs	r2, #64	; 0x40
 80057e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a3a      	ldr	r2, [r7, #32]
 80057f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005804:	88f8      	ldrh	r0, [r7, #6]
 8005806:	893a      	ldrh	r2, [r7, #8]
 8005808:	8979      	ldrh	r1, [r7, #10]
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	9301      	str	r3, [sp, #4]
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	4603      	mov	r3, r0
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f9e1 	bl	8005bdc <I2C_RequestMemoryWrite>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e0a9      	b.n	8005980 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	2bff      	cmp	r3, #255	; 0xff
 8005834:	d90e      	bls.n	8005854 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	22ff      	movs	r2, #255	; 0xff
 800583a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005840:	b2da      	uxtb	r2, r3
 8005842:	8979      	ldrh	r1, [r7, #10]
 8005844:	2300      	movs	r3, #0
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 fbb3 	bl	8005fb8 <I2C_TransferConfig>
 8005852:	e00f      	b.n	8005874 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005862:	b2da      	uxtb	r2, r3
 8005864:	8979      	ldrh	r1, [r7, #10]
 8005866:	2300      	movs	r3, #0
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 fba2 	bl	8005fb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 fabb 	bl	8005df4 <I2C_WaitOnTXISFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e07b      	b.n	8005980 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	781a      	ldrb	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d034      	beq.n	800592c <HAL_I2C_Mem_Write+0x1c8>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d130      	bne.n	800592c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	2200      	movs	r2, #0
 80058d2:	2180      	movs	r1, #128	; 0x80
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 fa4d 	bl	8005d74 <I2C_WaitOnFlagUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e04d      	b.n	8005980 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2bff      	cmp	r3, #255	; 0xff
 80058ec:	d90e      	bls.n	800590c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	22ff      	movs	r2, #255	; 0xff
 80058f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	8979      	ldrh	r1, [r7, #10]
 80058fc:	2300      	movs	r3, #0
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 fb57 	bl	8005fb8 <I2C_TransferConfig>
 800590a:	e00f      	b.n	800592c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591a:	b2da      	uxtb	r2, r3
 800591c:	8979      	ldrh	r1, [r7, #10]
 800591e:	2300      	movs	r3, #0
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 fb46 	bl	8005fb8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d19e      	bne.n	8005874 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 fa9a 	bl	8005e74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e01a      	b.n	8005980 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2220      	movs	r2, #32
 8005950:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6859      	ldr	r1, [r3, #4]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	4b0a      	ldr	r3, [pc, #40]	; (8005988 <HAL_I2C_Mem_Write+0x224>)
 800595e:	400b      	ands	r3, r1
 8005960:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	e000      	b.n	8005980 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800597e:	2302      	movs	r3, #2
  }
}
 8005980:	4618      	mov	r0, r3
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	fe00e800 	.word	0xfe00e800

0800598c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af02      	add	r7, sp, #8
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	4608      	mov	r0, r1
 8005996:	4611      	mov	r1, r2
 8005998:	461a      	mov	r2, r3
 800599a:	4603      	mov	r3, r0
 800599c:	817b      	strh	r3, [r7, #10]
 800599e:	460b      	mov	r3, r1
 80059a0:	813b      	strh	r3, [r7, #8]
 80059a2:	4613      	mov	r3, r2
 80059a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	f040 80fd 	bne.w	8005bae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <HAL_I2C_Mem_Read+0x34>
 80059ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d105      	bne.n	80059cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e0f1      	b.n	8005bb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_I2C_Mem_Read+0x4e>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e0ea      	b.n	8005bb0 <HAL_I2C_Mem_Read+0x224>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059e2:	f7fd f80d 	bl	8002a00 <HAL_GetTick>
 80059e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	2319      	movs	r3, #25
 80059ee:	2201      	movs	r2, #1
 80059f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 f9bd 	bl	8005d74 <I2C_WaitOnFlagUntilTimeout>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e0d5      	b.n	8005bb0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2222      	movs	r2, #34	; 0x22
 8005a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2240      	movs	r2, #64	; 0x40
 8005a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a3a      	ldr	r2, [r7, #32]
 8005a1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a2c:	88f8      	ldrh	r0, [r7, #6]
 8005a2e:	893a      	ldrh	r2, [r7, #8]
 8005a30:	8979      	ldrh	r1, [r7, #10]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	9301      	str	r3, [sp, #4]
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 f921 	bl	8005c84 <I2C_RequestMemoryRead>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e0ad      	b.n	8005bb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2bff      	cmp	r3, #255	; 0xff
 8005a5c:	d90e      	bls.n	8005a7c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	22ff      	movs	r2, #255	; 0xff
 8005a62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	8979      	ldrh	r1, [r7, #10]
 8005a6c:	4b52      	ldr	r3, [pc, #328]	; (8005bb8 <HAL_I2C_Mem_Read+0x22c>)
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 fa9f 	bl	8005fb8 <I2C_TransferConfig>
 8005a7a:	e00f      	b.n	8005a9c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	8979      	ldrh	r1, [r7, #10]
 8005a8e:	4b4a      	ldr	r3, [pc, #296]	; (8005bb8 <HAL_I2C_Mem_Read+0x22c>)
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fa8e 	bl	8005fb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2104      	movs	r1, #4
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f964 	bl	8005d74 <I2C_WaitOnFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e07c      	b.n	8005bb0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d034      	beq.n	8005b5c <HAL_I2C_Mem_Read+0x1d0>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d130      	bne.n	8005b5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	2200      	movs	r2, #0
 8005b02:	2180      	movs	r1, #128	; 0x80
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f935 	bl	8005d74 <I2C_WaitOnFlagUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e04d      	b.n	8005bb0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2bff      	cmp	r3, #255	; 0xff
 8005b1c:	d90e      	bls.n	8005b3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	22ff      	movs	r2, #255	; 0xff
 8005b22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	8979      	ldrh	r1, [r7, #10]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fa3f 	bl	8005fb8 <I2C_TransferConfig>
 8005b3a:	e00f      	b.n	8005b5c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	8979      	ldrh	r1, [r7, #10]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 fa2e 	bl	8005fb8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d19a      	bne.n	8005a9c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 f982 	bl	8005e74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e01a      	b.n	8005bb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6859      	ldr	r1, [r3, #4]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <HAL_I2C_Mem_Read+0x230>)
 8005b8e:	400b      	ands	r3, r1
 8005b90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	e000      	b.n	8005bb0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005bae:	2302      	movs	r3, #2
  }
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	80002400 	.word	0x80002400
 8005bbc:	fe00e800 	.word	0xfe00e800

08005bc0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bce:	b2db      	uxtb	r3, r3
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	4608      	mov	r0, r1
 8005be6:	4611      	mov	r1, r2
 8005be8:	461a      	mov	r2, r3
 8005bea:	4603      	mov	r3, r0
 8005bec:	817b      	strh	r3, [r7, #10]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	813b      	strh	r3, [r7, #8]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005bf6:	88fb      	ldrh	r3, [r7, #6]
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	8979      	ldrh	r1, [r7, #10]
 8005bfc:	4b20      	ldr	r3, [pc, #128]	; (8005c80 <I2C_RequestMemoryWrite+0xa4>)
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f9d7 	bl	8005fb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	69b9      	ldr	r1, [r7, #24]
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f8f0 	bl	8005df4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e02c      	b.n	8005c78 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c1e:	88fb      	ldrh	r3, [r7, #6]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d105      	bne.n	8005c30 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c24:	893b      	ldrh	r3, [r7, #8]
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	629a      	str	r2, [r3, #40]	; 0x28
 8005c2e:	e015      	b.n	8005c5c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c30:	893b      	ldrh	r3, [r7, #8]
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	69b9      	ldr	r1, [r7, #24]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 f8d6 	bl	8005df4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e012      	b.n	8005c78 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c52:	893b      	ldrh	r3, [r7, #8]
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	2200      	movs	r2, #0
 8005c64:	2180      	movs	r1, #128	; 0x80
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f884 	bl	8005d74 <I2C_WaitOnFlagUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	80002000 	.word	0x80002000

08005c84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	4608      	mov	r0, r1
 8005c8e:	4611      	mov	r1, r2
 8005c90:	461a      	mov	r2, r3
 8005c92:	4603      	mov	r3, r0
 8005c94:	817b      	strh	r3, [r7, #10]
 8005c96:	460b      	mov	r3, r1
 8005c98:	813b      	strh	r3, [r7, #8]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	8979      	ldrh	r1, [r7, #10]
 8005ca4:	4b20      	ldr	r3, [pc, #128]	; (8005d28 <I2C_RequestMemoryRead+0xa4>)
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	2300      	movs	r3, #0
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 f984 	bl	8005fb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	69b9      	ldr	r1, [r7, #24]
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 f89d 	bl	8005df4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e02c      	b.n	8005d1e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cc4:	88fb      	ldrh	r3, [r7, #6]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d105      	bne.n	8005cd6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cca:	893b      	ldrh	r3, [r7, #8]
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	629a      	str	r2, [r3, #40]	; 0x28
 8005cd4:	e015      	b.n	8005d02 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cd6:	893b      	ldrh	r3, [r7, #8]
 8005cd8:	0a1b      	lsrs	r3, r3, #8
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	69b9      	ldr	r1, [r7, #24]
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f883 	bl	8005df4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e012      	b.n	8005d1e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cf8:	893b      	ldrh	r3, [r7, #8]
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2140      	movs	r1, #64	; 0x40
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f831 	bl	8005d74 <I2C_WaitOnFlagUntilTimeout>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e000      	b.n	8005d1e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	80002000 	.word	0x80002000

08005d2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d103      	bne.n	8005d4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2200      	movs	r2, #0
 8005d48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d007      	beq.n	8005d68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	619a      	str	r2, [r3, #24]
  }
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d84:	e022      	b.n	8005dcc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d01e      	beq.n	8005dcc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d8e:	f7fc fe37 	bl	8002a00 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d302      	bcc.n	8005da4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d113      	bne.n	8005dcc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da8:	f043 0220 	orr.w	r2, r3, #32
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e00f      	b.n	8005dec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	bf0c      	ite	eq
 8005ddc:	2301      	moveq	r3, #1
 8005dde:	2300      	movne	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	79fb      	ldrb	r3, [r7, #7]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d0cd      	beq.n	8005d86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e00:	e02c      	b.n	8005e5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 f870 	bl	8005eec <I2C_IsAcknowledgeFailed>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e02a      	b.n	8005e6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1c:	d01e      	beq.n	8005e5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e1e:	f7fc fdef 	bl	8002a00 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d302      	bcc.n	8005e34 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d113      	bne.n	8005e5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e38:	f043 0220 	orr.w	r2, r3, #32
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e007      	b.n	8005e6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d1cb      	bne.n	8005e02 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e80:	e028      	b.n	8005ed4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	68b9      	ldr	r1, [r7, #8]
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 f830 	bl	8005eec <I2C_IsAcknowledgeFailed>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e026      	b.n	8005ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e96:	f7fc fdb3 	bl	8002a00 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d302      	bcc.n	8005eac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d113      	bne.n	8005ed4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb0:	f043 0220 	orr.w	r2, r3, #32
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e007      	b.n	8005ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d1cf      	bne.n	8005e82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	f003 0310 	and.w	r3, r3, #16
 8005f02:	2b10      	cmp	r3, #16
 8005f04:	d151      	bne.n	8005faa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f06:	e022      	b.n	8005f4e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0e:	d01e      	beq.n	8005f4e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f10:	f7fc fd76 	bl	8002a00 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d302      	bcc.n	8005f26 <I2C_IsAcknowledgeFailed+0x3a>
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d113      	bne.n	8005f4e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2a:	f043 0220 	orr.w	r2, r3, #32
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e02e      	b.n	8005fac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	f003 0320 	and.w	r3, r3, #32
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d1d5      	bne.n	8005f08 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2210      	movs	r2, #16
 8005f62:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f7ff fedd 	bl	8005d2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6859      	ldr	r1, [r3, #4]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <I2C_IsAcknowledgeFailed+0xc8>)
 8005f7e:	400b      	ands	r3, r1
 8005f80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f86:	f043 0204 	orr.w	r2, r3, #4
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	fe00e800 	.word	0xfe00e800

08005fb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	607b      	str	r3, [r7, #4]
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	817b      	strh	r3, [r7, #10]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	0d5b      	lsrs	r3, r3, #21
 8005fd4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005fd8:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <I2C_TransferConfig+0x58>)
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	43db      	mvns	r3, r3
 8005fde:	ea02 0103 	and.w	r1, r2, r3
 8005fe2:	897b      	ldrh	r3, [r7, #10]
 8005fe4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005fe8:	7a7b      	ldrb	r3, [r7, #9]
 8005fea:	041b      	lsls	r3, r3, #16
 8005fec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	03ff63ff 	.word	0x03ff63ff

08006014 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e0bf      	b.n	80061a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f008 fd0e 	bl	800ea5c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699a      	ldr	r2, [r3, #24]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006056:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6999      	ldr	r1, [r3, #24]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800606c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6899      	ldr	r1, [r3, #8]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	4b4a      	ldr	r3, [pc, #296]	; (80061b0 <HAL_LTDC_Init+0x19c>)
 8006088:	400b      	ands	r3, r1
 800608a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6899      	ldr	r1, [r3, #8]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	431a      	orrs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68d9      	ldr	r1, [r3, #12]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4b3e      	ldr	r3, [pc, #248]	; (80061b0 <HAL_LTDC_Init+0x19c>)
 80060b6:	400b      	ands	r3, r1
 80060b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	041b      	lsls	r3, r3, #16
 80060c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68d9      	ldr	r1, [r3, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1a      	ldr	r2, [r3, #32]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6919      	ldr	r1, [r3, #16]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4b33      	ldr	r3, [pc, #204]	; (80061b0 <HAL_LTDC_Init+0x19c>)
 80060e4:	400b      	ands	r3, r1
 80060e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	041b      	lsls	r3, r3, #16
 80060ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6919      	ldr	r1, [r3, #16]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6959      	ldr	r1, [r3, #20]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	4b27      	ldr	r3, [pc, #156]	; (80061b0 <HAL_LTDC_Init+0x19c>)
 8006112:	400b      	ands	r3, r1
 8006114:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611a:	041b      	lsls	r3, r3, #16
 800611c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6959      	ldr	r1, [r3, #20]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800613a:	021b      	lsls	r3, r3, #8
 800613c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006144:	041b      	lsls	r3, r3, #16
 8006146:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006156:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0206 	orr.w	r2, r2, #6
 8006182:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699a      	ldr	r2, [r3, #24]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 0201 	orr.w	r2, r2, #1
 8006192:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	f000f800 	.word	0xf000f800

080061b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80061b4:	b5b0      	push	{r4, r5, r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_LTDC_ConfigLayer+0x1a>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e02c      	b.n	8006228 <HAL_LTDC_ConfigLayer+0x74>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2202      	movs	r2, #2
 80061da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2134      	movs	r1, #52	; 0x34
 80061e4:	fb01 f303 	mul.w	r3, r1, r3
 80061e8:	4413      	add	r3, r2
 80061ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4614      	mov	r4, r2
 80061f2:	461d      	mov	r5, r3
 80061f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f811 	bl	8006230 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2201      	movs	r2, #1
 8006214:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bdb0      	pop	{r4, r5, r7, pc}

08006230 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006230:	b480      	push	{r7}
 8006232:	b089      	sub	sp, #36	; 0x24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	0c1b      	lsrs	r3, r3, #16
 8006248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800624c:	4413      	add	r3, r2
 800624e:	041b      	lsls	r3, r3, #16
 8006250:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	01db      	lsls	r3, r3, #7
 800625c:	4413      	add	r3, r2
 800625e:	3384      	adds	r3, #132	; 0x84
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	4611      	mov	r1, r2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	01d2      	lsls	r2, r2, #7
 800626c:	440a      	add	r2, r1
 800626e:	3284      	adds	r2, #132	; 0x84
 8006270:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006274:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	0c1b      	lsrs	r3, r3, #16
 8006282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006286:	4413      	add	r3, r2
 8006288:	1c5a      	adds	r2, r3, #1
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4619      	mov	r1, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	01db      	lsls	r3, r3, #7
 8006294:	440b      	add	r3, r1
 8006296:	3384      	adds	r3, #132	; 0x84
 8006298:	4619      	mov	r1, r3
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	4313      	orrs	r3, r2
 800629e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062ae:	4413      	add	r3, r2
 80062b0:	041b      	lsls	r3, r3, #16
 80062b2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	01db      	lsls	r3, r3, #7
 80062be:	4413      	add	r3, r2
 80062c0:	3384      	adds	r3, #132	; 0x84
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	6812      	ldr	r2, [r2, #0]
 80062c8:	4611      	mov	r1, r2
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	01d2      	lsls	r2, r2, #7
 80062ce:	440a      	add	r2, r1
 80062d0:	3284      	adds	r2, #132	; 0x84
 80062d2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80062d6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062e6:	4413      	add	r3, r2
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4619      	mov	r1, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	01db      	lsls	r3, r3, #7
 80062f4:	440b      	add	r3, r1
 80062f6:	3384      	adds	r3, #132	; 0x84
 80062f8:	4619      	mov	r1, r3
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	01db      	lsls	r3, r3, #7
 800630a:	4413      	add	r3, r2
 800630c:	3384      	adds	r3, #132	; 0x84
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	6812      	ldr	r2, [r2, #0]
 8006314:	4611      	mov	r1, r2
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	01d2      	lsls	r2, r2, #7
 800631a:	440a      	add	r2, r1
 800631c:	3284      	adds	r2, #132	; 0x84
 800631e:	f023 0307 	bic.w	r3, r3, #7
 8006322:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	01db      	lsls	r3, r3, #7
 800632e:	4413      	add	r3, r2
 8006330:	3384      	adds	r3, #132	; 0x84
 8006332:	461a      	mov	r2, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800634a:	041b      	lsls	r3, r3, #16
 800634c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	061b      	lsls	r3, r3, #24
 8006354:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	01db      	lsls	r3, r3, #7
 8006360:	4413      	add	r3, r2
 8006362:	3384      	adds	r3, #132	; 0x84
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	01db      	lsls	r3, r3, #7
 8006370:	4413      	add	r3, r2
 8006372:	3384      	adds	r3, #132	; 0x84
 8006374:	461a      	mov	r2, r3
 8006376:	2300      	movs	r3, #0
 8006378:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006380:	461a      	mov	r2, r3
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	431a      	orrs	r2, r3
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	431a      	orrs	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4619      	mov	r1, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	01db      	lsls	r3, r3, #7
 8006394:	440b      	add	r3, r1
 8006396:	3384      	adds	r3, #132	; 0x84
 8006398:	4619      	mov	r1, r3
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	461a      	mov	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	01db      	lsls	r3, r3, #7
 80063aa:	4413      	add	r3, r2
 80063ac:	3384      	adds	r3, #132	; 0x84
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	6812      	ldr	r2, [r2, #0]
 80063b4:	4611      	mov	r1, r2
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	01d2      	lsls	r2, r2, #7
 80063ba:	440a      	add	r2, r1
 80063bc:	3284      	adds	r2, #132	; 0x84
 80063be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	01db      	lsls	r3, r3, #7
 80063ce:	4413      	add	r3, r2
 80063d0:	3384      	adds	r3, #132	; 0x84
 80063d2:	461a      	mov	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	01db      	lsls	r3, r3, #7
 80063e4:	4413      	add	r3, r2
 80063e6:	3384      	adds	r3, #132	; 0x84
 80063e8:	69da      	ldr	r2, [r3, #28]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4619      	mov	r1, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	01db      	lsls	r3, r3, #7
 80063f4:	440b      	add	r3, r1
 80063f6:	3384      	adds	r3, #132	; 0x84
 80063f8:	4619      	mov	r1, r3
 80063fa:	4b58      	ldr	r3, [pc, #352]	; (800655c <LTDC_SetConfig+0x32c>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	69da      	ldr	r2, [r3, #28]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	6a1b      	ldr	r3, [r3, #32]
 8006408:	68f9      	ldr	r1, [r7, #12]
 800640a:	6809      	ldr	r1, [r1, #0]
 800640c:	4608      	mov	r0, r1
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	01c9      	lsls	r1, r1, #7
 8006412:	4401      	add	r1, r0
 8006414:	3184      	adds	r1, #132	; 0x84
 8006416:	4313      	orrs	r3, r2
 8006418:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	01db      	lsls	r3, r3, #7
 8006424:	4413      	add	r3, r2
 8006426:	3384      	adds	r3, #132	; 0x84
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	01db      	lsls	r3, r3, #7
 8006434:	4413      	add	r3, r2
 8006436:	3384      	adds	r3, #132	; 0x84
 8006438:	461a      	mov	r2, r3
 800643a:	2300      	movs	r3, #0
 800643c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	01db      	lsls	r3, r3, #7
 8006448:	4413      	add	r3, r2
 800644a:	3384      	adds	r3, #132	; 0x84
 800644c:	461a      	mov	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006452:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d102      	bne.n	8006462 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800645c:	2304      	movs	r3, #4
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	e01b      	b.n	800649a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d102      	bne.n	8006470 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800646a:	2303      	movs	r3, #3
 800646c:	61fb      	str	r3, [r7, #28]
 800646e:	e014      	b.n	800649a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b04      	cmp	r3, #4
 8006476:	d00b      	beq.n	8006490 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800647c:	2b02      	cmp	r3, #2
 800647e:	d007      	beq.n	8006490 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006484:	2b03      	cmp	r3, #3
 8006486:	d003      	beq.n	8006490 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800648c:	2b07      	cmp	r3, #7
 800648e:	d102      	bne.n	8006496 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006490:	2302      	movs	r3, #2
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	e001      	b.n	800649a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006496:	2301      	movs	r3, #1
 8006498:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	01db      	lsls	r3, r3, #7
 80064a4:	4413      	add	r3, r2
 80064a6:	3384      	adds	r3, #132	; 0x84
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	4611      	mov	r1, r2
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	01d2      	lsls	r2, r2, #7
 80064b4:	440a      	add	r2, r1
 80064b6:	3284      	adds	r2, #132	; 0x84
 80064b8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80064bc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	fb02 f303 	mul.w	r3, r2, r3
 80064c8:	041a      	lsls	r2, r3, #16
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	6859      	ldr	r1, [r3, #4]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	1acb      	subs	r3, r1, r3
 80064d4:	69f9      	ldr	r1, [r7, #28]
 80064d6:	fb01 f303 	mul.w	r3, r1, r3
 80064da:	3303      	adds	r3, #3
 80064dc:	68f9      	ldr	r1, [r7, #12]
 80064de:	6809      	ldr	r1, [r1, #0]
 80064e0:	4608      	mov	r0, r1
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	01c9      	lsls	r1, r1, #7
 80064e6:	4401      	add	r1, r0
 80064e8:	3184      	adds	r1, #132	; 0x84
 80064ea:	4313      	orrs	r3, r2
 80064ec:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	01db      	lsls	r3, r3, #7
 80064f8:	4413      	add	r3, r2
 80064fa:	3384      	adds	r3, #132	; 0x84
 80064fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4619      	mov	r1, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	01db      	lsls	r3, r3, #7
 8006508:	440b      	add	r3, r1
 800650a:	3384      	adds	r3, #132	; 0x84
 800650c:	4619      	mov	r1, r3
 800650e:	4b14      	ldr	r3, [pc, #80]	; (8006560 <LTDC_SetConfig+0x330>)
 8006510:	4013      	ands	r3, r2
 8006512:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	01db      	lsls	r3, r3, #7
 800651e:	4413      	add	r3, r2
 8006520:	3384      	adds	r3, #132	; 0x84
 8006522:	461a      	mov	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	01db      	lsls	r3, r3, #7
 8006534:	4413      	add	r3, r2
 8006536:	3384      	adds	r3, #132	; 0x84
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	6812      	ldr	r2, [r2, #0]
 800653e:	4611      	mov	r1, r2
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	01d2      	lsls	r2, r2, #7
 8006544:	440a      	add	r2, r1
 8006546:	3284      	adds	r2, #132	; 0x84
 8006548:	f043 0301 	orr.w	r3, r3, #1
 800654c:	6013      	str	r3, [r2, #0]
}
 800654e:	bf00      	nop
 8006550:	3724      	adds	r7, #36	; 0x24
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	fffff8f8 	.word	0xfffff8f8
 8006560:	fffff800 	.word	0xfffff800

08006564 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8006576:	2200      	movs	r2, #0
 8006578:	e001      	b.n	800657e <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800657a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d102      	bne.n	8006590 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800658a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800658e:	e000      	b.n	8006592 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8006590:	2200      	movs	r2, #0
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d102      	bne.n	80065a4 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800659e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065a2:	e000      	b.n	80065a6 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80065a4:	2200      	movs	r2, #0
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ae:	1e5a      	subs	r2, r3, #1
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	4413      	add	r3, r2
 80065be:	1e5a      	subs	r2, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	441a      	add	r2, r3
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	4413      	add	r3, r2
 80065d4:	1e5a      	subs	r2, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e2:	441a      	add	r2, r3
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	441a      	add	r2, r3
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ee:	4413      	add	r3, r2
 80065f0:	1e5a      	subs	r2, r3, #1
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800660a:	2300      	movs	r3, #0
 800660c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800660e:	4b23      	ldr	r3, [pc, #140]	; (800669c <HAL_PWREx_EnableOverDrive+0x98>)
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	4a22      	ldr	r2, [pc, #136]	; (800669c <HAL_PWREx_EnableOverDrive+0x98>)
 8006614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006618:	6413      	str	r3, [r2, #64]	; 0x40
 800661a:	4b20      	ldr	r3, [pc, #128]	; (800669c <HAL_PWREx_EnableOverDrive+0x98>)
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006626:	4b1e      	ldr	r3, [pc, #120]	; (80066a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a1d      	ldr	r2, [pc, #116]	; (80066a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800662c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006630:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006632:	f7fc f9e5 	bl	8002a00 <HAL_GetTick>
 8006636:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006638:	e009      	b.n	800664e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800663a:	f7fc f9e1 	bl	8002a00 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006648:	d901      	bls.n	800664e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e022      	b.n	8006694 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800664e:	4b14      	ldr	r3, [pc, #80]	; (80066a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800665a:	d1ee      	bne.n	800663a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800665c:	4b10      	ldr	r3, [pc, #64]	; (80066a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a0f      	ldr	r2, [pc, #60]	; (80066a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006666:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006668:	f7fc f9ca 	bl	8002a00 <HAL_GetTick>
 800666c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800666e:	e009      	b.n	8006684 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006670:	f7fc f9c6 	bl	8002a00 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800667e:	d901      	bls.n	8006684 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e007      	b.n	8006694 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006684:	4b06      	ldr	r3, [pc, #24]	; (80066a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006690:	d1ee      	bne.n	8006670 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	40023800 	.word	0x40023800
 80066a0:	40007000 	.word	0x40007000

080066a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80066ac:	2300      	movs	r3, #0
 80066ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e25e      	b.n	8006b78 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 8087 	beq.w	80067d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066c8:	4b96      	ldr	r3, [pc, #600]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 030c 	and.w	r3, r3, #12
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d00c      	beq.n	80066ee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066d4:	4b93      	ldr	r3, [pc, #588]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 030c 	and.w	r3, r3, #12
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d112      	bne.n	8006706 <HAL_RCC_OscConfig+0x62>
 80066e0:	4b90      	ldr	r3, [pc, #576]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ec:	d10b      	bne.n	8006706 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ee:	4b8d      	ldr	r3, [pc, #564]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d06c      	beq.n	80067d4 <HAL_RCC_OscConfig+0x130>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d168      	bne.n	80067d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e238      	b.n	8006b78 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800670e:	d106      	bne.n	800671e <HAL_RCC_OscConfig+0x7a>
 8006710:	4b84      	ldr	r3, [pc, #528]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a83      	ldr	r2, [pc, #524]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	e02e      	b.n	800677c <HAL_RCC_OscConfig+0xd8>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10c      	bne.n	8006740 <HAL_RCC_OscConfig+0x9c>
 8006726:	4b7f      	ldr	r3, [pc, #508]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a7e      	ldr	r2, [pc, #504]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 800672c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	4b7c      	ldr	r3, [pc, #496]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a7b      	ldr	r2, [pc, #492]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	e01d      	b.n	800677c <HAL_RCC_OscConfig+0xd8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006748:	d10c      	bne.n	8006764 <HAL_RCC_OscConfig+0xc0>
 800674a:	4b76      	ldr	r3, [pc, #472]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a75      	ldr	r2, [pc, #468]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	4b73      	ldr	r3, [pc, #460]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a72      	ldr	r2, [pc, #456]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 800675c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	e00b      	b.n	800677c <HAL_RCC_OscConfig+0xd8>
 8006764:	4b6f      	ldr	r3, [pc, #444]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a6e      	ldr	r2, [pc, #440]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 800676a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	4b6c      	ldr	r3, [pc, #432]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a6b      	ldr	r2, [pc, #428]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800677a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d013      	beq.n	80067ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006784:	f7fc f93c 	bl	8002a00 <HAL_GetTick>
 8006788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678a:	e008      	b.n	800679e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800678c:	f7fc f938 	bl	8002a00 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b64      	cmp	r3, #100	; 0x64
 8006798:	d901      	bls.n	800679e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e1ec      	b.n	8006b78 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800679e:	4b61      	ldr	r3, [pc, #388]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0f0      	beq.n	800678c <HAL_RCC_OscConfig+0xe8>
 80067aa:	e014      	b.n	80067d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ac:	f7fc f928 	bl	8002a00 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067b4:	f7fc f924 	bl	8002a00 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b64      	cmp	r3, #100	; 0x64
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e1d8      	b.n	8006b78 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067c6:	4b57      	ldr	r3, [pc, #348]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f0      	bne.n	80067b4 <HAL_RCC_OscConfig+0x110>
 80067d2:	e000      	b.n	80067d6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d069      	beq.n	80068b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067e2:	4b50      	ldr	r3, [pc, #320]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 030c 	and.w	r3, r3, #12
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00b      	beq.n	8006806 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ee:	4b4d      	ldr	r3, [pc, #308]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 030c 	and.w	r3, r3, #12
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d11c      	bne.n	8006834 <HAL_RCC_OscConfig+0x190>
 80067fa:	4b4a      	ldr	r3, [pc, #296]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d116      	bne.n	8006834 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006806:	4b47      	ldr	r3, [pc, #284]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <HAL_RCC_OscConfig+0x17a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d001      	beq.n	800681e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e1ac      	b.n	8006b78 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800681e:	4b41      	ldr	r3, [pc, #260]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	493d      	ldr	r1, [pc, #244]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 800682e:	4313      	orrs	r3, r2
 8006830:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006832:	e040      	b.n	80068b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d023      	beq.n	8006884 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800683c:	4b39      	ldr	r3, [pc, #228]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a38      	ldr	r2, [pc, #224]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006848:	f7fc f8da 	bl	8002a00 <HAL_GetTick>
 800684c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800684e:	e008      	b.n	8006862 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006850:	f7fc f8d6 	bl	8002a00 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e18a      	b.n	8006b78 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006862:	4b30      	ldr	r3, [pc, #192]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0f0      	beq.n	8006850 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800686e:	4b2d      	ldr	r3, [pc, #180]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	4929      	ldr	r1, [pc, #164]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 800687e:	4313      	orrs	r3, r2
 8006880:	600b      	str	r3, [r1, #0]
 8006882:	e018      	b.n	80068b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006884:	4b27      	ldr	r3, [pc, #156]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a26      	ldr	r2, [pc, #152]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 800688a:	f023 0301 	bic.w	r3, r3, #1
 800688e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006890:	f7fc f8b6 	bl	8002a00 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006898:	f7fc f8b2 	bl	8002a00 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e166      	b.n	8006b78 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068aa:	4b1e      	ldr	r3, [pc, #120]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1f0      	bne.n	8006898 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d038      	beq.n	8006934 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d019      	beq.n	80068fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ca:	4b16      	ldr	r3, [pc, #88]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 80068cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ce:	4a15      	ldr	r2, [pc, #84]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 80068d0:	f043 0301 	orr.w	r3, r3, #1
 80068d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d6:	f7fc f893 	bl	8002a00 <HAL_GetTick>
 80068da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068dc:	e008      	b.n	80068f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068de:	f7fc f88f 	bl	8002a00 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e143      	b.n	8006b78 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068f0:	4b0c      	ldr	r3, [pc, #48]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 80068f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0f0      	beq.n	80068de <HAL_RCC_OscConfig+0x23a>
 80068fc:	e01a      	b.n	8006934 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068fe:	4b09      	ldr	r3, [pc, #36]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006902:	4a08      	ldr	r2, [pc, #32]	; (8006924 <HAL_RCC_OscConfig+0x280>)
 8006904:	f023 0301 	bic.w	r3, r3, #1
 8006908:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800690a:	f7fc f879 	bl	8002a00 <HAL_GetTick>
 800690e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006910:	e00a      	b.n	8006928 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006912:	f7fc f875 	bl	8002a00 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b02      	cmp	r3, #2
 800691e:	d903      	bls.n	8006928 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e129      	b.n	8006b78 <HAL_RCC_OscConfig+0x4d4>
 8006924:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006928:	4b95      	ldr	r3, [pc, #596]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 800692a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1ee      	bne.n	8006912 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80a4 	beq.w	8006a8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006942:	4b8f      	ldr	r3, [pc, #572]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10d      	bne.n	800696a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800694e:	4b8c      	ldr	r3, [pc, #560]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	4a8b      	ldr	r2, [pc, #556]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006958:	6413      	str	r3, [r2, #64]	; 0x40
 800695a:	4b89      	ldr	r3, [pc, #548]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006966:	2301      	movs	r3, #1
 8006968:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800696a:	4b86      	ldr	r3, [pc, #536]	; (8006b84 <HAL_RCC_OscConfig+0x4e0>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006972:	2b00      	cmp	r3, #0
 8006974:	d118      	bne.n	80069a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006976:	4b83      	ldr	r3, [pc, #524]	; (8006b84 <HAL_RCC_OscConfig+0x4e0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a82      	ldr	r2, [pc, #520]	; (8006b84 <HAL_RCC_OscConfig+0x4e0>)
 800697c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006982:	f7fc f83d 	bl	8002a00 <HAL_GetTick>
 8006986:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006988:	e008      	b.n	800699c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800698a:	f7fc f839 	bl	8002a00 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b64      	cmp	r3, #100	; 0x64
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e0ed      	b.n	8006b78 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800699c:	4b79      	ldr	r3, [pc, #484]	; (8006b84 <HAL_RCC_OscConfig+0x4e0>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0f0      	beq.n	800698a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d106      	bne.n	80069be <HAL_RCC_OscConfig+0x31a>
 80069b0:	4b73      	ldr	r3, [pc, #460]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 80069b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b4:	4a72      	ldr	r2, [pc, #456]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 80069b6:	f043 0301 	orr.w	r3, r3, #1
 80069ba:	6713      	str	r3, [r2, #112]	; 0x70
 80069bc:	e02d      	b.n	8006a1a <HAL_RCC_OscConfig+0x376>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10c      	bne.n	80069e0 <HAL_RCC_OscConfig+0x33c>
 80069c6:	4b6e      	ldr	r3, [pc, #440]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ca:	4a6d      	ldr	r2, [pc, #436]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	6713      	str	r3, [r2, #112]	; 0x70
 80069d2:	4b6b      	ldr	r3, [pc, #428]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d6:	4a6a      	ldr	r2, [pc, #424]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 80069d8:	f023 0304 	bic.w	r3, r3, #4
 80069dc:	6713      	str	r3, [r2, #112]	; 0x70
 80069de:	e01c      	b.n	8006a1a <HAL_RCC_OscConfig+0x376>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	2b05      	cmp	r3, #5
 80069e6:	d10c      	bne.n	8006a02 <HAL_RCC_OscConfig+0x35e>
 80069e8:	4b65      	ldr	r3, [pc, #404]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 80069ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ec:	4a64      	ldr	r2, [pc, #400]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 80069ee:	f043 0304 	orr.w	r3, r3, #4
 80069f2:	6713      	str	r3, [r2, #112]	; 0x70
 80069f4:	4b62      	ldr	r3, [pc, #392]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 80069f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f8:	4a61      	ldr	r2, [pc, #388]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 80069fa:	f043 0301 	orr.w	r3, r3, #1
 80069fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006a00:	e00b      	b.n	8006a1a <HAL_RCC_OscConfig+0x376>
 8006a02:	4b5f      	ldr	r3, [pc, #380]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a06:	4a5e      	ldr	r2, [pc, #376]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006a08:	f023 0301 	bic.w	r3, r3, #1
 8006a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a0e:	4b5c      	ldr	r3, [pc, #368]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a12:	4a5b      	ldr	r2, [pc, #364]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006a14:	f023 0304 	bic.w	r3, r3, #4
 8006a18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d015      	beq.n	8006a4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a22:	f7fb ffed 	bl	8002a00 <HAL_GetTick>
 8006a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a28:	e00a      	b.n	8006a40 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a2a:	f7fb ffe9 	bl	8002a00 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d901      	bls.n	8006a40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e09b      	b.n	8006b78 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a40:	4b4f      	ldr	r3, [pc, #316]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0ee      	beq.n	8006a2a <HAL_RCC_OscConfig+0x386>
 8006a4c:	e014      	b.n	8006a78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4e:	f7fb ffd7 	bl	8002a00 <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a54:	e00a      	b.n	8006a6c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a56:	f7fb ffd3 	bl	8002a00 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d901      	bls.n	8006a6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e085      	b.n	8006b78 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a6c:	4b44      	ldr	r3, [pc, #272]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1ee      	bne.n	8006a56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a78:	7dfb      	ldrb	r3, [r7, #23]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d105      	bne.n	8006a8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a7e:	4b40      	ldr	r3, [pc, #256]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	4a3f      	ldr	r2, [pc, #252]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d071      	beq.n	8006b76 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a92:	4b3b      	ldr	r3, [pc, #236]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 030c 	and.w	r3, r3, #12
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d069      	beq.n	8006b72 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d14b      	bne.n	8006b3e <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa6:	4b36      	ldr	r3, [pc, #216]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a35      	ldr	r2, [pc, #212]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006aac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab2:	f7fb ffa5 	bl	8002a00 <HAL_GetTick>
 8006ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab8:	e008      	b.n	8006acc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aba:	f7fb ffa1 	bl	8002a00 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e055      	b.n	8006b78 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006acc:	4b2c      	ldr	r3, [pc, #176]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1f0      	bne.n	8006aba <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	69da      	ldr	r2, [r3, #28]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	019b      	lsls	r3, r3, #6
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	085b      	lsrs	r3, r3, #1
 8006af0:	3b01      	subs	r3, #1
 8006af2:	041b      	lsls	r3, r3, #16
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afa:	061b      	lsls	r3, r3, #24
 8006afc:	431a      	orrs	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b02:	071b      	lsls	r3, r3, #28
 8006b04:	491e      	ldr	r1, [pc, #120]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b0a:	4b1d      	ldr	r3, [pc, #116]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a1c      	ldr	r2, [pc, #112]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006b10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b16:	f7fb ff73 	bl	8002a00 <HAL_GetTick>
 8006b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b1c:	e008      	b.n	8006b30 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b1e:	f7fb ff6f 	bl	8002a00 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e023      	b.n	8006b78 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b30:	4b13      	ldr	r3, [pc, #76]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d0f0      	beq.n	8006b1e <HAL_RCC_OscConfig+0x47a>
 8006b3c:	e01b      	b.n	8006b76 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b3e:	4b10      	ldr	r3, [pc, #64]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a0f      	ldr	r2, [pc, #60]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006b44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4a:	f7fb ff59 	bl	8002a00 <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b50:	e008      	b.n	8006b64 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b52:	f7fb ff55 	bl	8002a00 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d901      	bls.n	8006b64 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e009      	b.n	8006b78 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b64:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <HAL_RCC_OscConfig+0x4dc>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1f0      	bne.n	8006b52 <HAL_RCC_OscConfig+0x4ae>
 8006b70:	e001      	b.n	8006b76 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e000      	b.n	8006b78 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3718      	adds	r7, #24
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	40023800 	.word	0x40023800
 8006b84:	40007000 	.word	0x40007000

08006b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e0ce      	b.n	8006d3e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ba0:	4b69      	ldr	r3, [pc, #420]	; (8006d48 <HAL_RCC_ClockConfig+0x1c0>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 030f 	and.w	r3, r3, #15
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d910      	bls.n	8006bd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bae:	4b66      	ldr	r3, [pc, #408]	; (8006d48 <HAL_RCC_ClockConfig+0x1c0>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f023 020f 	bic.w	r2, r3, #15
 8006bb6:	4964      	ldr	r1, [pc, #400]	; (8006d48 <HAL_RCC_ClockConfig+0x1c0>)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bbe:	4b62      	ldr	r3, [pc, #392]	; (8006d48 <HAL_RCC_ClockConfig+0x1c0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d001      	beq.n	8006bd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e0b6      	b.n	8006d3e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d020      	beq.n	8006c1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d005      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006be8:	4b58      	ldr	r3, [pc, #352]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	4a57      	ldr	r2, [pc, #348]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d005      	beq.n	8006c0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c00:	4b52      	ldr	r3, [pc, #328]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	4a51      	ldr	r2, [pc, #324]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c0c:	4b4f      	ldr	r3, [pc, #316]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	494c      	ldr	r1, [pc, #304]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d040      	beq.n	8006cac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d107      	bne.n	8006c42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c32:	4b46      	ldr	r3, [pc, #280]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d115      	bne.n	8006c6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e07d      	b.n	8006d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d107      	bne.n	8006c5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c4a:	4b40      	ldr	r3, [pc, #256]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d109      	bne.n	8006c6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e071      	b.n	8006d3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c5a:	4b3c      	ldr	r3, [pc, #240]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e069      	b.n	8006d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c6a:	4b38      	ldr	r3, [pc, #224]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f023 0203 	bic.w	r2, r3, #3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	4935      	ldr	r1, [pc, #212]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c7c:	f7fb fec0 	bl	8002a00 <HAL_GetTick>
 8006c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c82:	e00a      	b.n	8006c9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c84:	f7fb febc 	bl	8002a00 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e051      	b.n	8006d3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c9a:	4b2c      	ldr	r3, [pc, #176]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 020c 	and.w	r2, r3, #12
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d1eb      	bne.n	8006c84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cac:	4b26      	ldr	r3, [pc, #152]	; (8006d48 <HAL_RCC_ClockConfig+0x1c0>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 030f 	and.w	r3, r3, #15
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d210      	bcs.n	8006cdc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cba:	4b23      	ldr	r3, [pc, #140]	; (8006d48 <HAL_RCC_ClockConfig+0x1c0>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f023 020f 	bic.w	r2, r3, #15
 8006cc2:	4921      	ldr	r1, [pc, #132]	; (8006d48 <HAL_RCC_ClockConfig+0x1c0>)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cca:	4b1f      	ldr	r3, [pc, #124]	; (8006d48 <HAL_RCC_ClockConfig+0x1c0>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 030f 	and.w	r3, r3, #15
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d001      	beq.n	8006cdc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e030      	b.n	8006d3e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ce8:	4b18      	ldr	r3, [pc, #96]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	4915      	ldr	r1, [pc, #84]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d009      	beq.n	8006d1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d06:	4b11      	ldr	r3, [pc, #68]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	490d      	ldr	r1, [pc, #52]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d1a:	f000 f81d 	bl	8006d58 <HAL_RCC_GetSysClockFreq>
 8006d1e:	4601      	mov	r1, r0
 8006d20:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	091b      	lsrs	r3, r3, #4
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	4a09      	ldr	r2, [pc, #36]	; (8006d50 <HAL_RCC_ClockConfig+0x1c8>)
 8006d2c:	5cd3      	ldrb	r3, [r2, r3]
 8006d2e:	fa21 f303 	lsr.w	r3, r1, r3
 8006d32:	4a08      	ldr	r2, [pc, #32]	; (8006d54 <HAL_RCC_ClockConfig+0x1cc>)
 8006d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006d36:	2000      	movs	r0, #0
 8006d38:	f7fb fe1e 	bl	8002978 <HAL_InitTick>

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	40023c00 	.word	0x40023c00
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	080124f8 	.word	0x080124f8
 8006d54:	20000270 	.word	0x20000270

08006d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	607b      	str	r3, [r7, #4]
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	2300      	movs	r3, #0
 8006d68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d6e:	4b50      	ldr	r3, [pc, #320]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 030c 	and.w	r3, r3, #12
 8006d76:	2b04      	cmp	r3, #4
 8006d78:	d007      	beq.n	8006d8a <HAL_RCC_GetSysClockFreq+0x32>
 8006d7a:	2b08      	cmp	r3, #8
 8006d7c:	d008      	beq.n	8006d90 <HAL_RCC_GetSysClockFreq+0x38>
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f040 808d 	bne.w	8006e9e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d84:	4b4b      	ldr	r3, [pc, #300]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006d86:	60bb      	str	r3, [r7, #8]
       break;
 8006d88:	e08c      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d8a:	4b4b      	ldr	r3, [pc, #300]	; (8006eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d8c:	60bb      	str	r3, [r7, #8]
      break;
 8006d8e:	e089      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d90:	4b47      	ldr	r3, [pc, #284]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d98:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006d9a:	4b45      	ldr	r3, [pc, #276]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d023      	beq.n	8006dee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006da6:	4b42      	ldr	r3, [pc, #264]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	099b      	lsrs	r3, r3, #6
 8006dac:	f04f 0400 	mov.w	r4, #0
 8006db0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006db4:	f04f 0200 	mov.w	r2, #0
 8006db8:	ea03 0501 	and.w	r5, r3, r1
 8006dbc:	ea04 0602 	and.w	r6, r4, r2
 8006dc0:	4a3d      	ldr	r2, [pc, #244]	; (8006eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006dc2:	fb02 f106 	mul.w	r1, r2, r6
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	fb02 f205 	mul.w	r2, r2, r5
 8006dcc:	440a      	add	r2, r1
 8006dce:	493a      	ldr	r1, [pc, #232]	; (8006eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006dd0:	fba5 0101 	umull	r0, r1, r5, r1
 8006dd4:	1853      	adds	r3, r2, r1
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f04f 0400 	mov.w	r4, #0
 8006dde:	461a      	mov	r2, r3
 8006de0:	4623      	mov	r3, r4
 8006de2:	f7f9 fa85 	bl	80002f0 <__aeabi_uldivmod>
 8006de6:	4603      	mov	r3, r0
 8006de8:	460c      	mov	r4, r1
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	e049      	b.n	8006e82 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dee:	4b30      	ldr	r3, [pc, #192]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	099b      	lsrs	r3, r3, #6
 8006df4:	f04f 0400 	mov.w	r4, #0
 8006df8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	ea03 0501 	and.w	r5, r3, r1
 8006e04:	ea04 0602 	and.w	r6, r4, r2
 8006e08:	4629      	mov	r1, r5
 8006e0a:	4632      	mov	r2, r6
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	f04f 0400 	mov.w	r4, #0
 8006e14:	0154      	lsls	r4, r2, #5
 8006e16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e1a:	014b      	lsls	r3, r1, #5
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4622      	mov	r2, r4
 8006e20:	1b49      	subs	r1, r1, r5
 8006e22:	eb62 0206 	sbc.w	r2, r2, r6
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	f04f 0400 	mov.w	r4, #0
 8006e2e:	0194      	lsls	r4, r2, #6
 8006e30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006e34:	018b      	lsls	r3, r1, #6
 8006e36:	1a5b      	subs	r3, r3, r1
 8006e38:	eb64 0402 	sbc.w	r4, r4, r2
 8006e3c:	f04f 0100 	mov.w	r1, #0
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	00e2      	lsls	r2, r4, #3
 8006e46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006e4a:	00d9      	lsls	r1, r3, #3
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4614      	mov	r4, r2
 8006e50:	195b      	adds	r3, r3, r5
 8006e52:	eb44 0406 	adc.w	r4, r4, r6
 8006e56:	f04f 0100 	mov.w	r1, #0
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	02a2      	lsls	r2, r4, #10
 8006e60:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006e64:	0299      	lsls	r1, r3, #10
 8006e66:	460b      	mov	r3, r1
 8006e68:	4614      	mov	r4, r2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f04f 0400 	mov.w	r4, #0
 8006e74:	461a      	mov	r2, r3
 8006e76:	4623      	mov	r3, r4
 8006e78:	f7f9 fa3a 	bl	80002f0 <__aeabi_uldivmod>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	460c      	mov	r4, r1
 8006e80:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006e82:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	0c1b      	lsrs	r3, r3, #16
 8006e88:	f003 0303 	and.w	r3, r3, #3
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9a:	60bb      	str	r3, [r7, #8]
      break;
 8006e9c:	e002      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e9e:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006ea0:	60bb      	str	r3, [r7, #8]
      break;
 8006ea2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	40023800 	.word	0x40023800
 8006eb4:	00f42400 	.word	0x00f42400
 8006eb8:	017d7840 	.word	0x017d7840

08006ebc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b088      	sub	sp, #32
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d012      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ee4:	4b69      	ldr	r3, [pc, #420]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	4a68      	ldr	r2, [pc, #416]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006eee:	6093      	str	r3, [r2, #8]
 8006ef0:	4b66      	ldr	r3, [pc, #408]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef8:	4964      	ldr	r1, [pc, #400]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006f06:	2301      	movs	r3, #1
 8006f08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d017      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f16:	4b5d      	ldr	r3, [pc, #372]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f24:	4959      	ldr	r1, [pc, #356]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f34:	d101      	bne.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f36:	2301      	movs	r3, #1
 8006f38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f42:	2301      	movs	r3, #1
 8006f44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d017      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f52:	4b4e      	ldr	r3, [pc, #312]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	494a      	ldr	r1, [pc, #296]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f70:	d101      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006f72:	2301      	movs	r3, #1
 8006f74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0320 	and.w	r3, r3, #32
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 808b 	beq.w	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fa0:	4b3a      	ldr	r3, [pc, #232]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	4a39      	ldr	r2, [pc, #228]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006faa:	6413      	str	r3, [r2, #64]	; 0x40
 8006fac:	4b37      	ldr	r3, [pc, #220]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb4:	60bb      	str	r3, [r7, #8]
 8006fb6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fb8:	4b35      	ldr	r3, [pc, #212]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a34      	ldr	r2, [pc, #208]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fc4:	f7fb fd1c 	bl	8002a00 <HAL_GetTick>
 8006fc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fca:	e008      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fcc:	f7fb fd18 	bl	8002a00 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b64      	cmp	r3, #100	; 0x64
 8006fd8:	d901      	bls.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e38d      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fde:	4b2c      	ldr	r3, [pc, #176]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0f0      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fea:	4b28      	ldr	r3, [pc, #160]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ff2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d035      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	429a      	cmp	r2, r3
 8007006:	d02e      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007008:	4b20      	ldr	r3, [pc, #128]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800700a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007010:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007012:	4b1e      	ldr	r3, [pc, #120]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007016:	4a1d      	ldr	r2, [pc, #116]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800701c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800701e:	4b1b      	ldr	r3, [pc, #108]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007022:	4a1a      	ldr	r2, [pc, #104]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007028:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800702a:	4a18      	ldr	r2, [pc, #96]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007030:	4b16      	ldr	r3, [pc, #88]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b01      	cmp	r3, #1
 800703a:	d114      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703c:	f7fb fce0 	bl	8002a00 <HAL_GetTick>
 8007040:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007042:	e00a      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007044:	f7fb fcdc 	bl	8002a00 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007052:	4293      	cmp	r3, r2
 8007054:	d901      	bls.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e34f      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800705a:	4b0c      	ldr	r3, [pc, #48]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800705c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0ee      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800706e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007072:	d111      	bne.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007074:	4b05      	ldr	r3, [pc, #20]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007080:	4b04      	ldr	r3, [pc, #16]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007082:	400b      	ands	r3, r1
 8007084:	4901      	ldr	r1, [pc, #4]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007086:	4313      	orrs	r3, r2
 8007088:	608b      	str	r3, [r1, #8]
 800708a:	e00b      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800708c:	40023800 	.word	0x40023800
 8007090:	40007000 	.word	0x40007000
 8007094:	0ffffcff 	.word	0x0ffffcff
 8007098:	4bb3      	ldr	r3, [pc, #716]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	4ab2      	ldr	r2, [pc, #712]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800709e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070a2:	6093      	str	r3, [r2, #8]
 80070a4:	4bb0      	ldr	r3, [pc, #704]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070b0:	49ad      	ldr	r1, [pc, #692]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0310 	and.w	r3, r3, #16
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d010      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070c2:	4ba9      	ldr	r3, [pc, #676]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070c8:	4aa7      	ldr	r2, [pc, #668]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80070d2:	4ba5      	ldr	r3, [pc, #660]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070dc:	49a2      	ldr	r1, [pc, #648]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00a      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070f0:	4b9d      	ldr	r3, [pc, #628]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070fe:	499a      	ldr	r1, [pc, #616]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007100:	4313      	orrs	r3, r2
 8007102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007112:	4b95      	ldr	r3, [pc, #596]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007118:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007120:	4991      	ldr	r1, [pc, #580]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007122:	4313      	orrs	r3, r2
 8007124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007134:	4b8c      	ldr	r3, [pc, #560]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007142:	4989      	ldr	r1, [pc, #548]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007144:	4313      	orrs	r3, r2
 8007146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007156:	4b84      	ldr	r3, [pc, #528]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007164:	4980      	ldr	r1, [pc, #512]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007166:	4313      	orrs	r3, r2
 8007168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00a      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007178:	4b7b      	ldr	r3, [pc, #492]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800717a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717e:	f023 0203 	bic.w	r2, r3, #3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007186:	4978      	ldr	r1, [pc, #480]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007188:	4313      	orrs	r3, r2
 800718a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800719a:	4b73      	ldr	r3, [pc, #460]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800719c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a0:	f023 020c 	bic.w	r2, r3, #12
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a8:	496f      	ldr	r1, [pc, #444]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00a      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071bc:	4b6a      	ldr	r3, [pc, #424]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ca:	4967      	ldr	r1, [pc, #412]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071cc:	4313      	orrs	r3, r2
 80071ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071de:	4b62      	ldr	r3, [pc, #392]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ec:	495e      	ldr	r1, [pc, #376]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00a      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007200:	4b59      	ldr	r3, [pc, #356]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007206:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720e:	4956      	ldr	r1, [pc, #344]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007210:	4313      	orrs	r3, r2
 8007212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007222:	4b51      	ldr	r3, [pc, #324]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007228:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007230:	494d      	ldr	r1, [pc, #308]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007232:	4313      	orrs	r3, r2
 8007234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00a      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007244:	4b48      	ldr	r3, [pc, #288]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007252:	4945      	ldr	r1, [pc, #276]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007254:	4313      	orrs	r3, r2
 8007256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007266:	4b40      	ldr	r3, [pc, #256]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007274:	493c      	ldr	r1, [pc, #240]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007276:	4313      	orrs	r3, r2
 8007278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00a      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007288:	4b37      	ldr	r3, [pc, #220]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800728a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800728e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007296:	4934      	ldr	r1, [pc, #208]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007298:	4313      	orrs	r3, r2
 800729a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d011      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80072aa:	4b2f      	ldr	r3, [pc, #188]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072b8:	492b      	ldr	r1, [pc, #172]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072c8:	d101      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80072ca:	2301      	movs	r3, #1
 80072cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0308 	and.w	r3, r3, #8
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80072da:	2301      	movs	r3, #1
 80072dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00a      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072ea:	4b1f      	ldr	r3, [pc, #124]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f8:	491b      	ldr	r1, [pc, #108]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00b      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800730c:	4b16      	ldr	r3, [pc, #88]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800730e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007312:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800731c:	4912      	ldr	r1, [pc, #72]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800731e:	4313      	orrs	r3, r2
 8007320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00b      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007330:	4b0d      	ldr	r3, [pc, #52]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007336:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007340:	4909      	ldr	r1, [pc, #36]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007342:	4313      	orrs	r3, r2
 8007344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00f      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007354:	4b04      	ldr	r3, [pc, #16]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800735a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007364:	e002      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007366:	bf00      	nop
 8007368:	40023800 	.word	0x40023800
 800736c:	4985      	ldr	r1, [pc, #532]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800736e:	4313      	orrs	r3, r2
 8007370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007380:	4b80      	ldr	r3, [pc, #512]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007386:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007390:	497c      	ldr	r1, [pc, #496]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007392:	4313      	orrs	r3, r2
 8007394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d005      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073a6:	f040 80d6 	bne.w	8007556 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073aa:	4b76      	ldr	r3, [pc, #472]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a75      	ldr	r2, [pc, #468]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073b6:	f7fb fb23 	bl	8002a00 <HAL_GetTick>
 80073ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073bc:	e008      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073be:	f7fb fb1f 	bl	8002a00 <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b64      	cmp	r3, #100	; 0x64
 80073ca:	d901      	bls.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e194      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073d0:	4b6c      	ldr	r3, [pc, #432]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1f0      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d021      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d11d      	bne.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80073f0:	4b64      	ldr	r3, [pc, #400]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f6:	0c1b      	lsrs	r3, r3, #16
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073fe:	4b61      	ldr	r3, [pc, #388]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007404:	0e1b      	lsrs	r3, r3, #24
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	019a      	lsls	r2, r3, #6
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	041b      	lsls	r3, r3, #16
 8007416:	431a      	orrs	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	061b      	lsls	r3, r3, #24
 800741c:	431a      	orrs	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	071b      	lsls	r3, r3, #28
 8007424:	4957      	ldr	r1, [pc, #348]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007426:	4313      	orrs	r3, r2
 8007428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d004      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007440:	d00a      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800744a:	2b00      	cmp	r3, #0
 800744c:	d02e      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007456:	d129      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007458:	4b4a      	ldr	r3, [pc, #296]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800745a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800745e:	0c1b      	lsrs	r3, r3, #16
 8007460:	f003 0303 	and.w	r3, r3, #3
 8007464:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007466:	4b47      	ldr	r3, [pc, #284]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800746c:	0f1b      	lsrs	r3, r3, #28
 800746e:	f003 0307 	and.w	r3, r3, #7
 8007472:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	019a      	lsls	r2, r3, #6
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	041b      	lsls	r3, r3, #16
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	061b      	lsls	r3, r3, #24
 8007486:	431a      	orrs	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	071b      	lsls	r3, r3, #28
 800748c:	493d      	ldr	r1, [pc, #244]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800748e:	4313      	orrs	r3, r2
 8007490:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007494:	4b3b      	ldr	r3, [pc, #236]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800749a:	f023 021f 	bic.w	r2, r3, #31
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a2:	3b01      	subs	r3, #1
 80074a4:	4937      	ldr	r1, [pc, #220]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d01d      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80074b8:	4b32      	ldr	r3, [pc, #200]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074be:	0e1b      	lsrs	r3, r3, #24
 80074c0:	f003 030f 	and.w	r3, r3, #15
 80074c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074c6:	4b2f      	ldr	r3, [pc, #188]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074cc:	0f1b      	lsrs	r3, r3, #28
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	019a      	lsls	r2, r3, #6
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	041b      	lsls	r3, r3, #16
 80074e0:	431a      	orrs	r2, r3
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	061b      	lsls	r3, r3, #24
 80074e6:	431a      	orrs	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	071b      	lsls	r3, r3, #28
 80074ec:	4925      	ldr	r1, [pc, #148]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d011      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	019a      	lsls	r2, r3, #6
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	041b      	lsls	r3, r3, #16
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	061b      	lsls	r3, r3, #24
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	071b      	lsls	r3, r3, #28
 800751c:	4919      	ldr	r1, [pc, #100]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007524:	4b17      	ldr	r3, [pc, #92]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a16      	ldr	r2, [pc, #88]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800752a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800752e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007530:	f7fb fa66 	bl	8002a00 <HAL_GetTick>
 8007534:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007536:	e008      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007538:	f7fb fa62 	bl	8002a00 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b64      	cmp	r3, #100	; 0x64
 8007544:	d901      	bls.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e0d7      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800754a:	4b0e      	ldr	r3, [pc, #56]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0f0      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	2b01      	cmp	r3, #1
 800755a:	f040 80cd 	bne.w	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800755e:	4b09      	ldr	r3, [pc, #36]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a08      	ldr	r2, [pc, #32]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800756a:	f7fb fa49 	bl	8002a00 <HAL_GetTick>
 800756e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007570:	e00a      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007572:	f7fb fa45 	bl	8002a00 <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	2b64      	cmp	r3, #100	; 0x64
 800757e:	d903      	bls.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e0ba      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007584:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007588:	4b5e      	ldr	r3, [pc, #376]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007594:	d0ed      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d009      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d02e      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d12a      	bne.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075be:	4b51      	ldr	r3, [pc, #324]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c4:	0c1b      	lsrs	r3, r3, #16
 80075c6:	f003 0303 	and.w	r3, r3, #3
 80075ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075cc:	4b4d      	ldr	r3, [pc, #308]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d2:	0f1b      	lsrs	r3, r3, #28
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	019a      	lsls	r2, r3, #6
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	041b      	lsls	r3, r3, #16
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	061b      	lsls	r3, r3, #24
 80075ec:	431a      	orrs	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	071b      	lsls	r3, r3, #28
 80075f2:	4944      	ldr	r1, [pc, #272]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80075fa:	4b42      	ldr	r3, [pc, #264]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007600:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007608:	3b01      	subs	r3, #1
 800760a:	021b      	lsls	r3, r3, #8
 800760c:	493d      	ldr	r1, [pc, #244]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800760e:	4313      	orrs	r3, r2
 8007610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d022      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007628:	d11d      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800762a:	4b36      	ldr	r3, [pc, #216]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800762c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007630:	0e1b      	lsrs	r3, r3, #24
 8007632:	f003 030f 	and.w	r3, r3, #15
 8007636:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007638:	4b32      	ldr	r3, [pc, #200]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800763a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800763e:	0f1b      	lsrs	r3, r3, #28
 8007640:	f003 0307 	and.w	r3, r3, #7
 8007644:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	019a      	lsls	r2, r3, #6
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	041b      	lsls	r3, r3, #16
 8007652:	431a      	orrs	r2, r3
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	061b      	lsls	r3, r3, #24
 8007658:	431a      	orrs	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	071b      	lsls	r3, r3, #28
 800765e:	4929      	ldr	r1, [pc, #164]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007660:	4313      	orrs	r3, r2
 8007662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0308 	and.w	r3, r3, #8
 800766e:	2b00      	cmp	r3, #0
 8007670:	d028      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007672:	4b24      	ldr	r3, [pc, #144]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007678:	0e1b      	lsrs	r3, r3, #24
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007680:	4b20      	ldr	r3, [pc, #128]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007686:	0c1b      	lsrs	r3, r3, #16
 8007688:	f003 0303 	and.w	r3, r3, #3
 800768c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	019a      	lsls	r2, r3, #6
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	431a      	orrs	r2, r3
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	061b      	lsls	r3, r3, #24
 800769e:	431a      	orrs	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	071b      	lsls	r3, r3, #28
 80076a6:	4917      	ldr	r1, [pc, #92]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80076ae:	4b15      	ldr	r3, [pc, #84]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	4911      	ldr	r1, [pc, #68]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80076c4:	4b0f      	ldr	r3, [pc, #60]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a0e      	ldr	r2, [pc, #56]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076d0:	f7fb f996 	bl	8002a00 <HAL_GetTick>
 80076d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076d6:	e008      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80076d8:	f7fb f992 	bl	8002a00 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b64      	cmp	r3, #100	; 0x64
 80076e4:	d901      	bls.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e007      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076ea:	4b06      	ldr	r3, [pc, #24]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076f6:	d1ef      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3720      	adds	r7, #32
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	40023800 	.word	0x40023800

08007708 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e01d      	b.n	8007756 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d105      	bne.n	8007732 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f007 f9b5 	bl	800ea9c <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2203      	movs	r2, #3
 8007736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f80f 	bl	800775e <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800775e:	b5b0      	push	{r4, r5, r7, lr}
 8007760:	b08e      	sub	sp, #56	; 0x38
 8007762:	af04      	add	r7, sp, #16
 8007764:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007766:	2300      	movs	r3, #0
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800776e:	2300      	movs	r3, #0
 8007770:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007772:	2300      	movs	r3, #0
 8007774:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007776:	2300      	movs	r3, #0
 8007778:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800777a:	2300      	movs	r3, #0
 800777c:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800777e:	2376      	movs	r3, #118	; 0x76
 8007780:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681d      	ldr	r5, [r3, #0]
 8007786:	466c      	mov	r4, sp
 8007788:	f107 0318 	add.w	r3, r7, #24
 800778c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007790:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007794:	f107 030c 	add.w	r3, r7, #12
 8007798:	cb0e      	ldmia	r3, {r1, r2, r3}
 800779a:	4628      	mov	r0, r5
 800779c:	f001 fd90 	bl	80092c0 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077ae:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f001 fdcd 	bl	8009354 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077c8:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80077ca:	2002      	movs	r0, #2
 80077cc:	f7fb f924 	bl	8002a18 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fee3 	bl	800859c <SD_PowerON>
 80077d6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00b      	beq.n	80077f6 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e013      	b.n	800781e <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fe07 	bl	800840a <SD_InitCard>
 80077fc:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	431a      	orrs	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e000      	b.n	800781e <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3728      	adds	r7, #40	; 0x28
 8007822:	46bd      	mov	sp, r7
 8007824:	bdb0      	pop	{r4, r5, r7, pc}

08007826 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007826:	b590      	push	{r4, r7, lr}
 8007828:	b08f      	sub	sp, #60	; 0x3c
 800782a:	af00      	add	r7, sp, #0
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	607a      	str	r2, [r7, #4]
 8007832:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007834:	2300      	movs	r3, #0
 8007836:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8007838:	f7fb f8e2 	bl	8002a00 <HAL_GetTick>
 800783c:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 800783e:	2300      	movs	r3, #0
 8007840:	633b      	str	r3, [r7, #48]	; 0x30
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d107      	bne.n	800785c <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007850:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e176      	b.n	8007b4a <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b01      	cmp	r3, #1
 8007866:	f040 8169 	bne.w	8007b3c <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	441a      	add	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800787a:	429a      	cmp	r2, r3
 800787c:	d907      	bls.n	800788e <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007882:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e15d      	b.n	8007b4a <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2203      	movs	r2, #3
 8007892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2200      	movs	r2, #0
 800789c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d002      	beq.n	80078ac <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	025b      	lsls	r3, r3, #9
 80078aa:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078b4:	4618      	mov	r0, r3
 80078b6:	f001 fde1 	bl	800947c <SDMMC_CmdBlockLength>
 80078ba:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80078bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d010      	beq.n	80078e4 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80078ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d2:	431a      	orrs	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e132      	b.n	8007b4a <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078e4:	f04f 33ff 	mov.w	r3, #4294967295
 80078e8:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	025b      	lsls	r3, r3, #9
 80078ee:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80078f0:	2390      	movs	r3, #144	; 0x90
 80078f2:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80078f4:	2302      	movs	r3, #2
 80078f6:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80078fc:	2301      	movs	r3, #1
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f107 0210 	add.w	r2, r7, #16
 8007908:	4611      	mov	r1, r2
 800790a:	4618      	mov	r0, r3
 800790c:	f001 fd8a 	bl	8009424 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d90a      	bls.n	800792c <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2202      	movs	r2, #2
 800791a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	4618      	mov	r0, r3
 8007924:	f001 fdf2 	bl	800950c <SDMMC_CmdReadMultiBlock>
 8007928:	6378      	str	r0, [r7, #52]	; 0x34
 800792a:	e009      	b.n	8007940 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2201      	movs	r2, #1
 8007930:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6879      	ldr	r1, [r7, #4]
 8007938:	4618      	mov	r0, r3
 800793a:	f001 fdc3 	bl	80094c4 <SDMMC_CmdReadSingleBlock>
 800793e:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007942:	2b00      	cmp	r3, #0
 8007944:	d04a      	beq.n	80079dc <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800794e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007956:	431a      	orrs	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e0f0      	b.n	8007b4a <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800796e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d016      	beq.n	80079a4 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007976:	2300      	movs	r3, #0
 8007978:	633b      	str	r3, [r7, #48]	; 0x30
 800797a:	e00d      	b.n	8007998 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6819      	ldr	r1, [r3, #0]
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007986:	18d4      	adds	r4, r2, r3
 8007988:	4608      	mov	r0, r1
 800798a:	f001 fcc5 	bl	8009318 <SDMMC_ReadFIFO>
 800798e:	4603      	mov	r3, r0
 8007990:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	3301      	adds	r3, #1
 8007996:	633b      	str	r3, [r7, #48]	; 0x30
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	2b07      	cmp	r3, #7
 800799c:	d9ee      	bls.n	800797c <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 800799e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a0:	3320      	adds	r3, #32
 80079a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80079a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d007      	beq.n	80079ba <HAL_SD_ReadBlocks+0x194>
 80079aa:	f7fb f829 	bl	8002a00 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d810      	bhi.n	80079dc <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80079c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e0b6      	b.n	8007b4a <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0be      	beq.n	8007968 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d020      	beq.n	8007a3a <HAL_SD_ReadBlocks+0x214>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d91d      	bls.n	8007a3a <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d019      	beq.n	8007a3a <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f001 fdea 	bl	80095e4 <SDMMC_CmdStopTransfer>
 8007a10:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8007a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d010      	beq.n	8007a3a <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007a20:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e087      	b.n	8007b4a <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d010      	beq.n	8007a6a <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007a50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a56:	f043 0208 	orr.w	r2, r3, #8
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e06f      	b.n	8007b4a <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d010      	beq.n	8007a9a <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a86:	f043 0202 	orr.w	r2, r3, #2
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e057      	b.n	8007b4a <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa0:	f003 0320 	and.w	r3, r3, #32
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d037      	beq.n	8007b18 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007ab0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab6:	f043 0220 	orr.w	r2, r3, #32
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e03f      	b.n	8007b4a <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f001 fc22 	bl	8009318 <SDMMC_ReadFIFO>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	3304      	adds	r3, #4
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d007      	beq.n	8007af6 <HAL_SD_ReadBlocks+0x2d0>
 8007ae6:	f7fa ff8b 	bl	8002a00 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d810      	bhi.n	8007b18 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007afe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e018      	b.n	8007b4a <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1d1      	bne.n	8007aca <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	e006      	b.n	8007b4a <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b40:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
  }
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	373c      	adds	r7, #60	; 0x3c
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd90      	pop	{r4, r7, pc}

08007b52 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b08e      	sub	sp, #56	; 0x38
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	60f8      	str	r0, [r7, #12]
 8007b5a:	60b9      	str	r1, [r7, #8]
 8007b5c:	607a      	str	r2, [r7, #4]
 8007b5e:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007b60:	2300      	movs	r3, #0
 8007b62:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8007b64:	f7fa ff4c 	bl	8002a00 <HAL_GetTick>
 8007b68:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d107      	bne.n	8007b88 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e147      	b.n	8007e18 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	f040 813a 	bne.w	8007e0a <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	441a      	add	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d907      	bls.n	8007bba <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e12e      	b.n	8007e18 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2203      	movs	r2, #3
 8007bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d002      	beq.n	8007bd8 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	025b      	lsls	r3, r3, #9
 8007bd6:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007be0:	4618      	mov	r0, r3
 8007be2:	f001 fc4b 	bl	800947c <SDMMC_CmdBlockLength>
 8007be6:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8007be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d010      	beq.n	8007c10 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007bf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e103      	b.n	8007e18 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d90a      	bls.n	8007c2c <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2220      	movs	r2, #32
 8007c1a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6879      	ldr	r1, [r7, #4]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f001 fcba 	bl	800959c <SDMMC_CmdWriteMultiBlock>
 8007c28:	6378      	str	r0, [r7, #52]	; 0x34
 8007c2a:	e009      	b.n	8007c40 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2210      	movs	r2, #16
 8007c30:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f001 fc8b 	bl	8009554 <SDMMC_CmdWriteSingleBlock>
 8007c3e:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d010      	beq.n	8007c68 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c56:	431a      	orrs	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e0d7      	b.n	8007e18 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c68:	f04f 33ff 	mov.w	r3, #4294967295
 8007c6c:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	025b      	lsls	r3, r3, #9
 8007c72:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007c74:	2390      	movs	r3, #144	; 0x90
 8007c76:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007c80:	2301      	movs	r3, #1
 8007c82:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f107 0210 	add.w	r2, r7, #16
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f001 fbc8 	bl	8009424 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007c94:	e037      	b.n	8007d06 <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d014      	beq.n	8007cce <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8007ca8:	e00b      	b.n	8007cc2 <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb4:	4413      	add	r3, r2
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	f001 fb3b 	bl	8009332 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc4:	2b07      	cmp	r3, #7
 8007cc6:	d9f0      	bls.n	8007caa <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8007cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cca:	3320      	adds	r3, #32
 8007ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d007      	beq.n	8007ce4 <HAL_SD_WriteBlocks+0x192>
 8007cd4:	f7fa fe94 	bl	8002a00 <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d810      	bhi.n	8007d06 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007cec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e088      	b.n	8007e18 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d0c0      	beq.n	8007c96 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d020      	beq.n	8007d64 <HAL_SD_WriteBlocks+0x212>
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d91d      	bls.n	8007d64 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	d019      	beq.n	8007d64 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f001 fc55 	bl	80095e4 <SDMMC_CmdStopTransfer>
 8007d3a:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8007d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d010      	beq.n	8007d64 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007d4a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d52:	431a      	orrs	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e059      	b.n	8007e18 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6a:	f003 0308 	and.w	r3, r3, #8
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d010      	beq.n	8007d94 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007d7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d80:	f043 0208 	orr.w	r2, r3, #8
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e041      	b.n	8007e18 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d010      	beq.n	8007dc4 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007daa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	f043 0202 	orr.w	r2, r3, #2
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e029      	b.n	8007e18 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dca:	f003 0310 	and.w	r3, r3, #16
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d010      	beq.n	8007df4 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007dda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	f043 0210 	orr.w	r2, r3, #16
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e011      	b.n	8007e18 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007dfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	e006      	b.n	8007e18 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
  }
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3738      	adds	r7, #56	; 0x38
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e32:	0e1b      	lsrs	r3, r3, #24
 8007e34:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	099b      	lsrs	r3, r3, #6
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	f003 0303 	and.w	r3, r3, #3
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	089b      	lsrs	r3, r3, #2
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	f003 030f 	and.w	r3, r3, #15
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	f003 0303 	and.w	r3, r3, #3
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e68:	0c1b      	lsrs	r3, r3, #16
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e7a:	0a1b      	lsrs	r3, r3, #8
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e9c:	0e1b      	lsrs	r3, r3, #24
 8007e9e:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	011b      	lsls	r3, r3, #4
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eb0:	0c1b      	lsrs	r3, r3, #16
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	88db      	ldrh	r3, [r3, #6]
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	091b      	lsrs	r3, r3, #4
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	f003 030f 	and.w	r3, r3, #15
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f003 030f 	and.w	r3, r3, #15
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ee2:	0a1b      	lsrs	r3, r3, #8
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	09db      	lsrs	r3, r3, #7
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	099b      	lsrs	r3, r3, #6
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	095b      	lsrs	r3, r3, #5
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	091b      	lsrs	r3, r3, #4
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f040 8086 	bne.w	8008044 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	029b      	lsls	r3, r3, #10
 8007f3c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	691a      	ldr	r2, [r3, #16]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	431a      	orrs	r2, r3
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f5e:	0e1b      	lsrs	r3, r3, #24
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	099b      	lsrs	r3, r3, #6
 8007f6c:	f003 0303 	and.w	r3, r3, #3
 8007f70:	431a      	orrs	r2, r3
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	08db      	lsrs	r3, r3, #3
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	f003 0307 	and.w	r3, r3, #7
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f98:	0c1b      	lsrs	r3, r3, #16
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	095b      	lsrs	r3, r3, #5
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f003 0307 	and.w	r3, r3, #7
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	089b      	lsrs	r3, r3, #2
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	f003 0307 	and.w	r3, r3, #7
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	f003 0306 	and.w	r3, r3, #6
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd4:	0a1b      	lsrs	r3, r3, #8
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	7e1b      	ldrb	r3, [r3, #24]
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	09db      	lsrs	r3, r3, #7
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	4313      	orrs	r3, r2
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	1c5a      	adds	r2, r3, #1
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	7e1b      	ldrb	r3, [r3, #24]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	3302      	adds	r3, #2
 8008006:	2201      	movs	r2, #1
 8008008:	409a      	lsls	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800800e:	fb02 f203 	mul.w	r2, r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	7a1b      	ldrb	r3, [r3, #8]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	461a      	mov	r2, r3
 800801e:	2301      	movs	r3, #1
 8008020:	4093      	lsls	r3, r2
 8008022:	461a      	mov	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008030:	0a52      	lsrs	r2, r2, #9
 8008032:	fb02 f203 	mul.w	r2, r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008040:	661a      	str	r2, [r3, #96]	; 0x60
 8008042:	e04d      	b.n	80080e0 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008048:	2b01      	cmp	r3, #1
 800804a:	d138      	bne.n	80080be <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008050:	b2db      	uxtb	r3, r3
 8008052:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	041b      	lsls	r3, r3, #16
 8008058:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008064:	0e1b      	lsrs	r3, r3, #24
 8008066:	b2db      	uxtb	r3, r3
 8008068:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	691a      	ldr	r2, [r3, #16]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	431a      	orrs	r2, r3
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800807c:	0c1b      	lsrs	r3, r3, #16
 800807e:	b2db      	uxtb	r3, r3
 8008080:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	691a      	ldr	r2, [r3, #16]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	431a      	orrs	r2, r3
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008092:	0a1b      	lsrs	r3, r3, #8
 8008094:	b2db      	uxtb	r3, r3
 8008096:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	3301      	adds	r3, #1
 800809e:	029a      	lsls	r2, r3, #10
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	655a      	str	r2, [r3, #84]	; 0x54
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080b2:	659a      	str	r2, [r3, #88]	; 0x58
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	661a      	str	r2, [r3, #96]	; 0x60
 80080bc:	e010      	b.n	80080e0 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80080c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e0c1      	b.n	8008264 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	099b      	lsrs	r3, r3, #6
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008106:	b2db      	uxtb	r3, r3
 8008108:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	7e9b      	ldrb	r3, [r3, #26]
 800810e:	b2da      	uxtb	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	09db      	lsrs	r3, r3, #7
 8008114:	b2db      	uxtb	r3, r3
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	b2db      	uxtb	r3, r3
 800811c:	4313      	orrs	r3, r2
 800811e:	b2da      	uxtb	r2, r3
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	b2db      	uxtb	r3, r3
 8008128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800812c:	b2da      	uxtb	r2, r3
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008136:	0e1b      	lsrs	r3, r3, #24
 8008138:	b2db      	uxtb	r3, r3
 800813a:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	09db      	lsrs	r3, r3, #7
 8008140:	b2db      	uxtb	r3, r3
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	b2da      	uxtb	r2, r3
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	095b      	lsrs	r3, r3, #5
 8008150:	b2db      	uxtb	r3, r3
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	b2da      	uxtb	r2, r3
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	089b      	lsrs	r3, r3, #2
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f003 0307 	and.w	r3, r3, #7
 8008166:	b2da      	uxtb	r2, r3
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	b2db      	uxtb	r3, r3
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	b2db      	uxtb	r3, r3
 8008174:	f003 030c 	and.w	r3, r3, #12
 8008178:	b2da      	uxtb	r2, r3
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008182:	0c1b      	lsrs	r3, r3, #16
 8008184:	b2db      	uxtb	r3, r3
 8008186:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	7fdb      	ldrb	r3, [r3, #31]
 800818c:	b2da      	uxtb	r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	099b      	lsrs	r3, r3, #6
 8008192:	b2db      	uxtb	r3, r3
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	b2db      	uxtb	r3, r3
 800819a:	4313      	orrs	r3, r2
 800819c:	b2da      	uxtb	r2, r3
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	095b      	lsrs	r3, r3, #5
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d0:	0a1b      	lsrs	r3, r3, #8
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	09db      	lsrs	r3, r3, #7
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	099b      	lsrs	r3, r3, #6
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	095b      	lsrs	r3, r3, #5
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	b2da      	uxtb	r2, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	091b      	lsrs	r3, r3, #4
 8008210:	b2db      	uxtb	r3, r3
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	b2da      	uxtb	r2, r3
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	089b      	lsrs	r3, r3, #2
 8008222:	b2db      	uxtb	r3, r3
 8008224:	f003 0303 	and.w	r3, r3, #3
 8008228:	b2da      	uxtb	r2, r3
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	b2db      	uxtb	r3, r3
 8008234:	f003 0303 	and.w	r3, r3, #3
 8008238:	b2da      	uxtb	r2, r3
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008244:	b2db      	uxtb	r3, r3
 8008246:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	085b      	lsrs	r3, r3, #1
 800824c:	b2db      	uxtb	r3, r3
 800824e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008252:	b2da      	uxtb	r2, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80082c8:	b5b0      	push	{r4, r5, r7, lr}
 80082ca:	b08e      	sub	sp, #56	; 0x38
 80082cc:	af04      	add	r7, sp, #16
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80082d2:	2300      	movs	r3, #0
 80082d4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2203      	movs	r2, #3
 80082da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d02e      	beq.n	8008344 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ec:	d106      	bne.n	80082fc <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	639a      	str	r2, [r3, #56]	; 0x38
 80082fa:	e029      	b.n	8008350 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008302:	d10a      	bne.n	800831a <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fa1b 	bl	8008740 <SD_WideBus_Enable>
 800830a:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	431a      	orrs	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	639a      	str	r2, [r3, #56]	; 0x38
 8008318:	e01a      	b.n	8008350 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10a      	bne.n	8008336 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fa5a 	bl	80087da <SD_WideBus_Disable>
 8008326:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	431a      	orrs	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	639a      	str	r2, [r3, #56]	; 0x38
 8008334:	e00c      	b.n	8008350 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	639a      	str	r2, [r3, #56]	; 0x38
 8008342:	e005      	b.n	8008350 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00a      	beq.n	800836e <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008360:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e024      	b.n	80083b8 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681d      	ldr	r5, [r3, #0]
 8008394:	466c      	mov	r4, sp
 8008396:	f107 0318 	add.w	r3, r7, #24
 800839a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800839e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083a2:	f107 030c 	add.w	r3, r7, #12
 80083a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083a8:	4628      	mov	r0, r5
 80083aa:	f000 ff89 	bl	80092c0 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3728      	adds	r7, #40	; 0x28
 80083bc:	46bd      	mov	sp, r7
 80083be:	bdb0      	pop	{r4, r5, r7, pc}

080083c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80083c8:	2304      	movs	r3, #4
 80083ca:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80083cc:	2300      	movs	r3, #0
 80083ce:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80083d4:	f107 030c 	add.w	r3, r7, #12
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f986 	bl	80086ec <SD_SendStatus>
 80083e0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d005      	beq.n	80083f4 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	431a      	orrs	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	0a5b      	lsrs	r3, r3, #9
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	f003 030f 	and.w	r3, r3, #15
 80083fe:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8008400:	7dfb      	ldrb	r3, [r7, #23]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3718      	adds	r7, #24
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800840a:	b5b0      	push	{r4, r5, r7, lr}
 800840c:	b094      	sub	sp, #80	; 0x50
 800840e:	af04      	add	r7, sp, #16
 8008410:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008412:	2300      	movs	r3, #0
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8008416:	2301      	movs	r3, #1
 8008418:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4618      	mov	r0, r3
 8008420:	f000 ffa6 	bl	8009370 <SDMMC_GetPowerState>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d102      	bne.n	8008430 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800842a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800842e:	e0b1      	b.n	8008594 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008434:	2b03      	cmp	r3, #3
 8008436:	d02f      	beq.n	8008498 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4618      	mov	r0, r3
 800843e:	f001 f9ec 	bl	800981a <SDMMC_CmdSendCID>
 8008442:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <SD_InitCard+0x44>
    {
      return errorstate;
 800844a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800844c:	e0a2      	b.n	8008594 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2100      	movs	r1, #0
 8008454:	4618      	mov	r0, r3
 8008456:	f000 ffd0 	bl	80093fa <SDMMC_GetResponse>
 800845a:	4602      	mov	r2, r0
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2104      	movs	r1, #4
 8008466:	4618      	mov	r0, r3
 8008468:	f000 ffc7 	bl	80093fa <SDMMC_GetResponse>
 800846c:	4602      	mov	r2, r0
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2108      	movs	r1, #8
 8008478:	4618      	mov	r0, r3
 800847a:	f000 ffbe 	bl	80093fa <SDMMC_GetResponse>
 800847e:	4602      	mov	r2, r0
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	210c      	movs	r1, #12
 800848a:	4618      	mov	r0, r3
 800848c:	f000 ffb5 	bl	80093fa <SDMMC_GetResponse>
 8008490:	4602      	mov	r2, r0
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849c:	2b03      	cmp	r3, #3
 800849e:	d00d      	beq.n	80084bc <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f107 020e 	add.w	r2, r7, #14
 80084a8:	4611      	mov	r1, r2
 80084aa:	4618      	mov	r0, r3
 80084ac:	f001 f9f6 	bl	800989c <SDMMC_CmdSetRelAdd>
 80084b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <SD_InitCard+0xb2>
    {
      return errorstate;
 80084b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ba:	e06b      	b.n	8008594 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d036      	beq.n	8008532 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80084c4:	89fb      	ldrh	r3, [r7, #14]
 80084c6:	461a      	mov	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d4:	041b      	lsls	r3, r3, #16
 80084d6:	4619      	mov	r1, r3
 80084d8:	4610      	mov	r0, r2
 80084da:	f001 f9be 	bl	800985a <SDMMC_CmdSendCSD>
 80084de:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <SD_InitCard+0xe0>
    {
      return errorstate;
 80084e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e8:	e054      	b.n	8008594 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2100      	movs	r1, #0
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 ff82 	bl	80093fa <SDMMC_GetResponse>
 80084f6:	4602      	mov	r2, r0
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2104      	movs	r1, #4
 8008502:	4618      	mov	r0, r3
 8008504:	f000 ff79 	bl	80093fa <SDMMC_GetResponse>
 8008508:	4602      	mov	r2, r0
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2108      	movs	r1, #8
 8008514:	4618      	mov	r0, r3
 8008516:	f000 ff70 	bl	80093fa <SDMMC_GetResponse>
 800851a:	4602      	mov	r2, r0
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	210c      	movs	r1, #12
 8008526:	4618      	mov	r0, r3
 8008528:	f000 ff67 	bl	80093fa <SDMMC_GetResponse>
 800852c:	4602      	mov	r2, r0
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2104      	movs	r1, #4
 8008538:	4618      	mov	r0, r3
 800853a:	f000 ff5e 	bl	80093fa <SDMMC_GetResponse>
 800853e:	4603      	mov	r3, r0
 8008540:	0d1a      	lsrs	r2, r3, #20
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8008546:	f107 0310 	add.w	r3, r7, #16
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7ff fc67 	bl	8007e20 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6819      	ldr	r1, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800855a:	041b      	lsls	r3, r3, #16
 800855c:	f04f 0400 	mov.w	r4, #0
 8008560:	461a      	mov	r2, r3
 8008562:	4623      	mov	r3, r4
 8008564:	4608      	mov	r0, r1
 8008566:	f001 f861 	bl	800962c <SDMMC_CmdSelDesel>
 800856a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800856c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800856e:	2b00      	cmp	r3, #0
 8008570:	d001      	beq.n	8008576 <SD_InitCard+0x16c>
  {
    return errorstate;
 8008572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008574:	e00e      	b.n	8008594 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681d      	ldr	r5, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	466c      	mov	r4, sp
 800857e:	f103 0210 	add.w	r2, r3, #16
 8008582:	ca07      	ldmia	r2, {r0, r1, r2}
 8008584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008588:	3304      	adds	r3, #4
 800858a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800858c:	4628      	mov	r0, r5
 800858e:	f000 fe97 	bl	80092c0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3740      	adds	r7, #64	; 0x40
 8008598:	46bd      	mov	sp, r7
 800859a:	bdb0      	pop	{r4, r5, r7, pc}

0800859c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80085a4:	2300      	movs	r3, #0
 80085a6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 80085a8:	2300      	movs	r3, #0
 80085aa:	617b      	str	r3, [r7, #20]
 80085ac:	2300      	movs	r3, #0
 80085ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80085b0:	2300      	movs	r3, #0
 80085b2:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f001 f85c 	bl	8009676 <SDMMC_CmdGoIdleState>
 80085be:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <SD_PowerON+0x2e>
  {
    return errorstate;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	e08c      	b.n	80086e4 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f001 f871 	bl	80096b6 <SDMMC_CmdOperCond>
 80085d4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d03d      	beq.n	8008658 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80085e2:	e032      	b.n	800864a <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	1c5a      	adds	r2, r3, #1
 80085e8:	60ba      	str	r2, [r7, #8]
 80085ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d102      	bne.n	80085f8 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80085f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80085f6:	e075      	b.n	80086e4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2100      	movs	r1, #0
 80085fe:	4618      	mov	r0, r3
 8008600:	f001 f87a 	bl	80096f8 <SDMMC_CmdAppCommand>
 8008604:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d002      	beq.n	8008612 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800860c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008610:	e068      	b.n	80086e4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2100      	movs	r1, #0
 8008618:	4618      	mov	r0, r3
 800861a:	f001 f891 	bl	8009740 <SDMMC_CmdAppOperCommand>
 800861e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d002      	beq.n	800862c <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008626:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800862a:	e05b      	b.n	80086e4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2100      	movs	r1, #0
 8008632:	4618      	mov	r0, r3
 8008634:	f000 fee1 	bl	80093fa <SDMMC_GetResponse>
 8008638:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	0fdb      	lsrs	r3, r3, #31
 800863e:	2b01      	cmp	r3, #1
 8008640:	bf0c      	ite	eq
 8008642:	2301      	moveq	r3, #1
 8008644:	2300      	movne	r3, #0
 8008646:	b2db      	uxtb	r3, r3
 8008648:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0c9      	beq.n	80085e4 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	645a      	str	r2, [r3, #68]	; 0x44
 8008656:	e044      	b.n	80086e2 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800865e:	e031      	b.n	80086c4 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	60ba      	str	r2, [r7, #8]
 8008666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800866a:	4293      	cmp	r3, r2
 800866c:	d102      	bne.n	8008674 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800866e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008672:	e037      	b.n	80086e4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2100      	movs	r1, #0
 800867a:	4618      	mov	r0, r3
 800867c:	f001 f83c 	bl	80096f8 <SDMMC_CmdAppCommand>
 8008680:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <SD_PowerON+0xf0>
      {
        return errorstate;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	e02b      	b.n	80086e4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008694:	4618      	mov	r0, r3
 8008696:	f001 f853 	bl	8009740 <SDMMC_CmdAppOperCommand>
 800869a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <SD_PowerON+0x10a>
      {
        return errorstate;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	e01e      	b.n	80086e4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2100      	movs	r1, #0
 80086ac:	4618      	mov	r0, r3
 80086ae:	f000 fea4 	bl	80093fa <SDMMC_GetResponse>
 80086b2:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	0fdb      	lsrs	r3, r3, #31
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	bf0c      	ite	eq
 80086bc:	2301      	moveq	r3, #1
 80086be:	2300      	movne	r3, #0
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d0ca      	beq.n	8008660 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d003      	beq.n	80086dc <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	645a      	str	r2, [r3, #68]	; 0x44
 80086da:	e002      	b.n	80086e2 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3718      	adds	r7, #24
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d102      	bne.n	8008706 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8008700:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008704:	e018      	b.n	8008738 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800870e:	041b      	lsls	r3, r3, #16
 8008710:	4619      	mov	r1, r3
 8008712:	4610      	mov	r0, r2
 8008714:	f001 f8e5 	bl	80098e2 <SDMMC_CmdSendStatus>
 8008718:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <SD_SendStatus+0x38>
  {
    return errorstate;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	e009      	b.n	8008738 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2100      	movs	r1, #0
 800872a:	4618      	mov	r0, r3
 800872c:	f000 fe65 	bl	80093fa <SDMMC_GetResponse>
 8008730:	4602      	mov	r2, r0
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	2300      	movs	r3, #0
 800874e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008750:	2300      	movs	r3, #0
 8008752:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2100      	movs	r1, #0
 800875a:	4618      	mov	r0, r3
 800875c:	f000 fe4d 	bl	80093fa <SDMMC_GetResponse>
 8008760:	4603      	mov	r3, r0
 8008762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008766:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800876a:	d102      	bne.n	8008772 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800876c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008770:	e02f      	b.n	80087d2 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008772:	f107 030c 	add.w	r3, r7, #12
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f87b 	bl	8008874 <SD_FindSCR>
 800877e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	e023      	b.n	80087d2 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d01c      	beq.n	80087ce <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800879c:	041b      	lsls	r3, r3, #16
 800879e:	4619      	mov	r1, r3
 80087a0:	4610      	mov	r0, r2
 80087a2:	f000 ffa9 	bl	80096f8 <SDMMC_CmdAppCommand>
 80087a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	e00f      	b.n	80087d2 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2102      	movs	r1, #2
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 ffe7 	bl	800978c <SDMMC_CmdBusWidth>
 80087be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	e003      	b.n	80087d2 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 80087ca:	2300      	movs	r3, #0
 80087cc:	e001      	b.n	80087d2 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b086      	sub	sp, #24
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80087e2:	2300      	movs	r3, #0
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	2300      	movs	r3, #0
 80087e8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80087ea:	2300      	movs	r3, #0
 80087ec:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2100      	movs	r1, #0
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 fe00 	bl	80093fa <SDMMC_GetResponse>
 80087fa:	4603      	mov	r3, r0
 80087fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008800:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008804:	d102      	bne.n	800880c <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008806:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800880a:	e02f      	b.n	800886c <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800880c:	f107 030c 	add.w	r3, r7, #12
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f82e 	bl	8008874 <SD_FindSCR>
 8008818:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	e023      	b.n	800886c <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d01c      	beq.n	8008868 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008836:	041b      	lsls	r3, r3, #16
 8008838:	4619      	mov	r1, r3
 800883a:	4610      	mov	r0, r2
 800883c:	f000 ff5c 	bl	80096f8 <SDMMC_CmdAppCommand>
 8008840:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d001      	beq.n	800884c <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	e00f      	b.n	800886c <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2100      	movs	r1, #0
 8008852:	4618      	mov	r0, r3
 8008854:	f000 ff9a 	bl	800978c <SDMMC_CmdBusWidth>
 8008858:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	e003      	b.n	800886c <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8008864:	2300      	movs	r3, #0
 8008866:	e001      	b.n	800886c <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008868:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800886c:	4618      	mov	r0, r3
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008874:	b590      	push	{r4, r7, lr}
 8008876:	b08f      	sub	sp, #60	; 0x3c
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800887e:	2300      	movs	r3, #0
 8008880:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8008882:	f7fa f8bd 	bl	8002a00 <HAL_GetTick>
 8008886:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 8008888:	2300      	movs	r3, #0
 800888a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 800888c:	2300      	movs	r3, #0
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	2300      	movs	r3, #0
 8008892:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2108      	movs	r1, #8
 800889a:	4618      	mov	r0, r3
 800889c:	f000 fdee 	bl	800947c <SDMMC_CmdBlockLength>
 80088a0:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <SD_FindSCR+0x38>
  {
    return errorstate;
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	e0a8      	b.n	80089fe <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b4:	041b      	lsls	r3, r3, #16
 80088b6:	4619      	mov	r1, r3
 80088b8:	4610      	mov	r0, r2
 80088ba:	f000 ff1d 	bl	80096f8 <SDMMC_CmdAppCommand>
 80088be:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <SD_FindSCR+0x56>
  {
    return errorstate;
 80088c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c8:	e099      	b.n	80089fe <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80088ca:	f04f 33ff 	mov.w	r3, #4294967295
 80088ce:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 80088d0:	2308      	movs	r3, #8
 80088d2:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80088d4:	2330      	movs	r3, #48	; 0x30
 80088d6:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80088d8:	2302      	movs	r3, #2
 80088da:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80088dc:	2300      	movs	r3, #0
 80088de:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80088e0:	2301      	movs	r3, #1
 80088e2:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f107 0214 	add.w	r2, r7, #20
 80088ec:	4611      	mov	r1, r2
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 fd98 	bl	8009424 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 ff6b 	bl	80097d4 <SDMMC_CmdSendSCR>
 80088fe:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	2b00      	cmp	r3, #0
 8008904:	d022      	beq.n	800894c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	e079      	b.n	80089fe <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00e      	beq.n	8008936 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6819      	ldr	r1, [r3, #0]
 800891c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	f107 020c 	add.w	r2, r7, #12
 8008924:	18d4      	adds	r4, r2, r3
 8008926:	4608      	mov	r0, r1
 8008928:	f000 fcf6 	bl	8009318 <SDMMC_ReadFIFO>
 800892c:	4603      	mov	r3, r0
 800892e:	6023      	str	r3, [r4, #0]
      index++;
 8008930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008932:	3301      	adds	r3, #1
 8008934:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008936:	f7fa f863 	bl	8002a00 <HAL_GetTick>
 800893a:	4602      	mov	r2, r0
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008944:	d102      	bne.n	800894c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008946:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800894a:	e058      	b.n	80089fe <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008952:	f240 432a 	movw	r3, #1066	; 0x42a
 8008956:	4013      	ands	r3, r2
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0d6      	beq.n	800890a <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008962:	f003 0308 	and.w	r3, r3, #8
 8008966:	2b00      	cmp	r3, #0
 8008968:	d005      	beq.n	8008976 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2208      	movs	r2, #8
 8008970:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008972:	2308      	movs	r3, #8
 8008974:	e043      	b.n	80089fe <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897c:	f003 0302 	and.w	r3, r3, #2
 8008980:	2b00      	cmp	r3, #0
 8008982:	d005      	beq.n	8008990 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2202      	movs	r2, #2
 800898a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800898c:	2302      	movs	r3, #2
 800898e:	e036      	b.n	80089fe <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008996:	f003 0320 	and.w	r3, r3, #32
 800899a:	2b00      	cmp	r3, #0
 800899c:	d005      	beq.n	80089aa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2220      	movs	r2, #32
 80089a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 80089a6:	2320      	movs	r3, #32
 80089a8:	e029      	b.n	80089fe <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80089b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	061a      	lsls	r2, r3, #24
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	021b      	lsls	r3, r3, #8
 80089bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089c0:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	0a1b      	lsrs	r3, r3, #8
 80089c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80089ca:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80089d6:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80089d8:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	061a      	lsls	r2, r3, #24
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	021b      	lsls	r3, r3, #8
 80089e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089e6:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	0a1b      	lsrs	r3, r3, #8
 80089ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80089f0:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	0e1b      	lsrs	r3, r3, #24
 80089f6:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	373c      	adds	r7, #60	; 0x3c
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd90      	pop	{r4, r7, pc}

08008a06 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b082      	sub	sp, #8
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e025      	b.n	8008a66 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f006 f99a 	bl	800ed68 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3304      	adds	r3, #4
 8008a44:	4619      	mov	r1, r3
 8008a46:	4610      	mov	r0, r2
 8008a48:	f000 fb14 	bl	8009074 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6818      	ldr	r0, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	461a      	mov	r2, r3
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	f000 fb7e 	bl	8009158 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d101      	bne.n	8008a8a <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008a86:	2302      	movs	r3, #2
 8008a88:	e018      	b.n	8008abc <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	68b9      	ldr	r1, [r7, #8]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fbdc 	bl	8009258 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d104      	bne.n	8008ab2 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2205      	movs	r2, #5
 8008aac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008ab0:	e003      	b.n	8008aba <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d101      	bne.n	8008ade <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008ada:	2302      	movs	r3, #2
 8008adc:	e00e      	b.n	8008afc <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2202      	movs	r2, #2
 8008ae2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 fbd4 	bl	800929a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e01d      	b.n	8008b52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d106      	bne.n	8008b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f006 f836 	bl	800eb9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2202      	movs	r2, #2
 8008b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	4619      	mov	r1, r3
 8008b42:	4610      	mov	r0, r2
 8008b44:	f000 f97c 	bl	8008e40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
	...

08008b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68da      	ldr	r2, [r3, #12]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f042 0201 	orr.w	r2, r2, #1
 8008b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	689a      	ldr	r2, [r3, #8]
 8008b7a:	4b0c      	ldr	r3, [pc, #48]	; (8008bac <HAL_TIM_Base_Start_IT+0x50>)
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2b06      	cmp	r3, #6
 8008b84:	d00b      	beq.n	8008b9e <HAL_TIM_Base_Start_IT+0x42>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b8c:	d007      	beq.n	8008b9e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f042 0201 	orr.w	r2, r2, #1
 8008b9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	00010007 	.word	0x00010007

08008bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d122      	bne.n	8008c0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	f003 0302 	and.w	r3, r3, #2
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d11b      	bne.n	8008c0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f06f 0202 	mvn.w	r2, #2
 8008bdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f905 	bl	8008e02 <HAL_TIM_IC_CaptureCallback>
 8008bf8:	e005      	b.n	8008c06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f8f7 	bl	8008dee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f908 	bl	8008e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	f003 0304 	and.w	r3, r3, #4
 8008c16:	2b04      	cmp	r3, #4
 8008c18:	d122      	bne.n	8008c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	f003 0304 	and.w	r3, r3, #4
 8008c24:	2b04      	cmp	r3, #4
 8008c26:	d11b      	bne.n	8008c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f06f 0204 	mvn.w	r2, #4
 8008c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2202      	movs	r2, #2
 8008c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f8db 	bl	8008e02 <HAL_TIM_IC_CaptureCallback>
 8008c4c:	e005      	b.n	8008c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f8cd 	bl	8008dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f8de 	bl	8008e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	f003 0308 	and.w	r3, r3, #8
 8008c6a:	2b08      	cmp	r3, #8
 8008c6c:	d122      	bne.n	8008cb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	f003 0308 	and.w	r3, r3, #8
 8008c78:	2b08      	cmp	r3, #8
 8008c7a:	d11b      	bne.n	8008cb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f06f 0208 	mvn.w	r2, #8
 8008c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2204      	movs	r2, #4
 8008c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	f003 0303 	and.w	r3, r3, #3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f8b1 	bl	8008e02 <HAL_TIM_IC_CaptureCallback>
 8008ca0:	e005      	b.n	8008cae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f8a3 	bl	8008dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f8b4 	bl	8008e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	f003 0310 	and.w	r3, r3, #16
 8008cbe:	2b10      	cmp	r3, #16
 8008cc0:	d122      	bne.n	8008d08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	f003 0310 	and.w	r3, r3, #16
 8008ccc:	2b10      	cmp	r3, #16
 8008cce:	d11b      	bne.n	8008d08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f06f 0210 	mvn.w	r2, #16
 8008cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2208      	movs	r2, #8
 8008cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d003      	beq.n	8008cf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f887 	bl	8008e02 <HAL_TIM_IC_CaptureCallback>
 8008cf4:	e005      	b.n	8008d02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f879 	bl	8008dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f88a 	bl	8008e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d10e      	bne.n	8008d34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	f003 0301 	and.w	r3, r3, #1
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d107      	bne.n	8008d34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f06f 0201 	mvn.w	r2, #1
 8008d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f003 fafe 	bl	800c330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d3e:	2b80      	cmp	r3, #128	; 0x80
 8008d40:	d10e      	bne.n	8008d60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d4c:	2b80      	cmp	r3, #128	; 0x80
 8008d4e:	d107      	bne.n	8008d60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f976 	bl	800904c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d6e:	d10e      	bne.n	8008d8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d7a:	2b80      	cmp	r3, #128	; 0x80
 8008d7c:	d107      	bne.n	8008d8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f969 	bl	8009060 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d98:	2b40      	cmp	r3, #64	; 0x40
 8008d9a:	d10e      	bne.n	8008dba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da6:	2b40      	cmp	r3, #64	; 0x40
 8008da8:	d107      	bne.n	8008dba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f838 	bl	8008e2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	f003 0320 	and.w	r3, r3, #32
 8008dc4:	2b20      	cmp	r3, #32
 8008dc6:	d10e      	bne.n	8008de6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	f003 0320 	and.w	r3, r3, #32
 8008dd2:	2b20      	cmp	r3, #32
 8008dd4:	d107      	bne.n	8008de6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f06f 0220 	mvn.w	r2, #32
 8008dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f929 	bl	8009038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b083      	sub	sp, #12
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008df6:	bf00      	nop
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b083      	sub	sp, #12
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e0a:	bf00      	nop
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b083      	sub	sp, #12
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e1e:	bf00      	nop
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b083      	sub	sp, #12
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e32:	bf00      	nop
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
	...

08008e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a40      	ldr	r2, [pc, #256]	; (8008f54 <TIM_Base_SetConfig+0x114>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d013      	beq.n	8008e80 <TIM_Base_SetConfig+0x40>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e5e:	d00f      	beq.n	8008e80 <TIM_Base_SetConfig+0x40>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a3d      	ldr	r2, [pc, #244]	; (8008f58 <TIM_Base_SetConfig+0x118>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d00b      	beq.n	8008e80 <TIM_Base_SetConfig+0x40>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a3c      	ldr	r2, [pc, #240]	; (8008f5c <TIM_Base_SetConfig+0x11c>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d007      	beq.n	8008e80 <TIM_Base_SetConfig+0x40>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a3b      	ldr	r2, [pc, #236]	; (8008f60 <TIM_Base_SetConfig+0x120>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d003      	beq.n	8008e80 <TIM_Base_SetConfig+0x40>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a3a      	ldr	r2, [pc, #232]	; (8008f64 <TIM_Base_SetConfig+0x124>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d108      	bne.n	8008e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a2f      	ldr	r2, [pc, #188]	; (8008f54 <TIM_Base_SetConfig+0x114>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d02b      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea0:	d027      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a2c      	ldr	r2, [pc, #176]	; (8008f58 <TIM_Base_SetConfig+0x118>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d023      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a2b      	ldr	r2, [pc, #172]	; (8008f5c <TIM_Base_SetConfig+0x11c>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d01f      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a2a      	ldr	r2, [pc, #168]	; (8008f60 <TIM_Base_SetConfig+0x120>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d01b      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a29      	ldr	r2, [pc, #164]	; (8008f64 <TIM_Base_SetConfig+0x124>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d017      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a28      	ldr	r2, [pc, #160]	; (8008f68 <TIM_Base_SetConfig+0x128>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d013      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a27      	ldr	r2, [pc, #156]	; (8008f6c <TIM_Base_SetConfig+0x12c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d00f      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a26      	ldr	r2, [pc, #152]	; (8008f70 <TIM_Base_SetConfig+0x130>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d00b      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a25      	ldr	r2, [pc, #148]	; (8008f74 <TIM_Base_SetConfig+0x134>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d007      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a24      	ldr	r2, [pc, #144]	; (8008f78 <TIM_Base_SetConfig+0x138>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d003      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a23      	ldr	r2, [pc, #140]	; (8008f7c <TIM_Base_SetConfig+0x13c>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d108      	bne.n	8008f04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	689a      	ldr	r2, [r3, #8]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a0a      	ldr	r2, [pc, #40]	; (8008f54 <TIM_Base_SetConfig+0x114>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d003      	beq.n	8008f38 <TIM_Base_SetConfig+0xf8>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a0c      	ldr	r2, [pc, #48]	; (8008f64 <TIM_Base_SetConfig+0x124>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d103      	bne.n	8008f40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	691a      	ldr	r2, [r3, #16]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	615a      	str	r2, [r3, #20]
}
 8008f46:	bf00      	nop
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	40010000 	.word	0x40010000
 8008f58:	40000400 	.word	0x40000400
 8008f5c:	40000800 	.word	0x40000800
 8008f60:	40000c00 	.word	0x40000c00
 8008f64:	40010400 	.word	0x40010400
 8008f68:	40014000 	.word	0x40014000
 8008f6c:	40014400 	.word	0x40014400
 8008f70:	40014800 	.word	0x40014800
 8008f74:	40001800 	.word	0x40001800
 8008f78:	40001c00 	.word	0x40001c00
 8008f7c:	40002000 	.word	0x40002000

08008f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d101      	bne.n	8008f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f94:	2302      	movs	r3, #2
 8008f96:	e045      	b.n	8009024 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a1c      	ldr	r2, [pc, #112]	; (8009030 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d004      	beq.n	8008fcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a1b      	ldr	r2, [pc, #108]	; (8009034 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d108      	bne.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008fd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ff6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	40010000 	.word	0x40010000
 8009034:	40010400 	.word	0x40010400

08009038 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d027      	beq.n	80090de <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	4b2f      	ldr	r3, [pc, #188]	; (8009154 <FMC_SDRAM_Init+0xe0>)
 8009098:	4013      	ands	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80090a4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80090aa:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80090b0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80090b6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80090bc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80090c2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80090c8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80090ce:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	601a      	str	r2, [r3, #0]
 80090dc:	e032      	b.n	8009144 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090ea:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80090f4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80090fa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	4313      	orrs	r3, r2
 8009100:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	4b12      	ldr	r3, [pc, #72]	; (8009154 <FMC_SDRAM_Init+0xe0>)
 800910c:	4013      	ands	r3, r2
 800910e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009118:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800911e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8009124:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800912a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8009130:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	4313      	orrs	r3, r2
 8009136:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	ffff8000 	.word	0xffff8000

08009158 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009158:	b480      	push	{r7}
 800915a:	b087      	sub	sp, #28
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8009164:	2300      	movs	r3, #0
 8009166:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d02e      	beq.n	80091d0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800917e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	3b01      	subs	r3, #1
 800918c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800918e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	3b01      	subs	r3, #1
 8009196:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8009198:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	3b01      	subs	r3, #1
 80091a0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80091a2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	3b01      	subs	r3, #1
 80091aa:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80091ac:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80091b6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	3b01      	subs	r3, #1
 80091be:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80091c0:	4313      	orrs	r3, r2
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	609a      	str	r2, [r3, #8]
 80091ce:	e039      	b.n	8009244 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	4b1e      	ldr	r3, [pc, #120]	; (8009254 <FMC_SDRAM_Timing_Init+0xfc>)
 80091da:	4013      	ands	r3, r2
 80091dc:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	3b01      	subs	r3, #1
 80091e4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	3b01      	subs	r3, #1
 80091ec:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80091ee:	4313      	orrs	r3, r2
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009202:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	3b01      	subs	r3, #1
 8009210:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009212:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	3b01      	subs	r3, #1
 800921a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800921c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	3b01      	subs	r3, #1
 8009224:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009226:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	3b01      	subs	r3, #1
 800922e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009230:	4313      	orrs	r3, r2
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	4313      	orrs	r3, r2
 8009236:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	371c      	adds	r7, #28
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	ff0f0fff 	.word	0xff0f0fff

08009258 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009258:	b480      	push	{r7}
 800925a:	b087      	sub	sp, #28
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8009264:	2300      	movs	r3, #0
 8009266:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009270:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	3b01      	subs	r3, #1
 8009278:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800927a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009282:	4313      	orrs	r3, r2
 8009284:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	371c      	adds	r7, #28
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800929a:	b480      	push	{r7}
 800929c:	b083      	sub	sp, #12
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	695a      	ldr	r2, [r3, #20]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	005b      	lsls	r3, r3, #1
 80092ac:	431a      	orrs	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80092c0:	b084      	sub	sp, #16
 80092c2:	b480      	push	{r7}
 80092c4:	b085      	sub	sp, #20
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	f107 001c 	add.w	r0, r7, #28
 80092ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80092d2:	2300      	movs	r3, #0
 80092d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80092d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80092d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80092da:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80092de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80092e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80092e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80092e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80092e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80092ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	4b07      	ldr	r3, [pc, #28]	; (8009314 <SDMMC_Init+0x54>)
 80092f8:	4013      	ands	r3, r2
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	431a      	orrs	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	b004      	add	sp, #16
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	ffff8100 	.word	0xffff8100

08009318 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009326:	4618      	mov	r0, r3
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8009332:	b480      	push	{r7}
 8009334:	b083      	sub	sp, #12
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2203      	movs	r2, #3
 8009360:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0303 	and.w	r3, r3, #3
}
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80093aa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80093b0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80093b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68da      	ldr	r2, [r3, #12]
 80093c2:	4b06      	ldr	r3, [pc, #24]	; (80093dc <SDMMC_SendCommand+0x50>)
 80093c4:	4013      	ands	r3, r2
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	431a      	orrs	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	fffff000 	.word	0xfffff000

080093e0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	b2db      	uxtb	r3, r3
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b085      	sub	sp, #20
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	3314      	adds	r3, #20
 800940c:	461a      	mov	r2, r3
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	4413      	add	r3, r2
 8009412:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
}  
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800942e:	2300      	movs	r3, #0
 8009430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800944a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009450:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009456:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	4313      	orrs	r3, r2
 800945c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009462:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	431a      	orrs	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800946e:	2300      	movs	r3, #0

}
 8009470:	4618      	mov	r0, r3
 8009472:	3714      	adds	r7, #20
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b088      	sub	sp, #32
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009486:	2300      	movs	r3, #0
 8009488:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800948e:	2310      	movs	r3, #16
 8009490:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009492:	2340      	movs	r3, #64	; 0x40
 8009494:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009496:	2300      	movs	r3, #0
 8009498:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800949a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800949e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094a0:	f107 0308 	add.w	r3, r7, #8
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7ff ff70 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80094ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80094b0:	2110      	movs	r1, #16
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fa64 	bl	8009980 <SDMMC_GetCmdResp1>
 80094b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ba:	69fb      	ldr	r3, [r7, #28]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3720      	adds	r7, #32
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b088      	sub	sp, #32
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80094ce:	2300      	movs	r3, #0
 80094d0:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80094d6:	2311      	movs	r3, #17
 80094d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094da:	2340      	movs	r3, #64	; 0x40
 80094dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094de:	2300      	movs	r3, #0
 80094e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094e6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094e8:	f107 0308 	add.w	r3, r7, #8
 80094ec:	4619      	mov	r1, r3
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7ff ff4c 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80094f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80094f8:	2111      	movs	r1, #17
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fa40 	bl	8009980 <SDMMC_GetCmdResp1>
 8009500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009502:	69fb      	ldr	r3, [r7, #28]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3720      	adds	r7, #32
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b088      	sub	sp, #32
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009516:	2300      	movs	r3, #0
 8009518:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800951e:	2312      	movs	r3, #18
 8009520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009522:	2340      	movs	r3, #64	; 0x40
 8009524:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009526:	2300      	movs	r3, #0
 8009528:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800952a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800952e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009530:	f107 0308 	add.w	r3, r7, #8
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7ff ff28 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800953c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009540:	2112      	movs	r1, #18
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fa1c 	bl	8009980 <SDMMC_GetCmdResp1>
 8009548:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800954a:	69fb      	ldr	r3, [r7, #28]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3720      	adds	r7, #32
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800955e:	2300      	movs	r3, #0
 8009560:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009566:	2318      	movs	r3, #24
 8009568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800956a:	2340      	movs	r3, #64	; 0x40
 800956c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800956e:	2300      	movs	r3, #0
 8009570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009576:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009578:	f107 0308 	add.w	r3, r7, #8
 800957c:	4619      	mov	r1, r3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff ff04 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009584:	f241 3288 	movw	r2, #5000	; 0x1388
 8009588:	2118      	movs	r1, #24
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f9f8 	bl	8009980 <SDMMC_GetCmdResp1>
 8009590:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009592:	69fb      	ldr	r3, [r7, #28]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3720      	adds	r7, #32
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b088      	sub	sp, #32
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80095a6:	2300      	movs	r3, #0
 80095a8:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80095ae:	2319      	movs	r3, #25
 80095b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095b2:	2340      	movs	r3, #64	; 0x40
 80095b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095b6:	2300      	movs	r3, #0
 80095b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095be:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095c0:	f107 0308 	add.w	r3, r7, #8
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7ff fee0 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80095cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80095d0:	2119      	movs	r1, #25
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f9d4 	bl	8009980 <SDMMC_GetCmdResp1>
 80095d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095da:	69fb      	ldr	r3, [r7, #28]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3720      	adds	r7, #32
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b088      	sub	sp, #32
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80095ec:	2300      	movs	r3, #0
 80095ee:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80095f4:	230c      	movs	r3, #12
 80095f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095f8:	2340      	movs	r3, #64	; 0x40
 80095fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095fc:	2300      	movs	r3, #0
 80095fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009604:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009606:	f107 0308 	add.w	r3, r7, #8
 800960a:	4619      	mov	r1, r3
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7ff febd 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8009612:	4a05      	ldr	r2, [pc, #20]	; (8009628 <SDMMC_CmdStopTransfer+0x44>)
 8009614:	210c      	movs	r1, #12
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f9b2 	bl	8009980 <SDMMC_GetCmdResp1>
 800961c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800961e:	69fb      	ldr	r3, [r7, #28]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3720      	adds	r7, #32
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	05f5e100 	.word	0x05f5e100

0800962c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b08a      	sub	sp, #40	; 0x28
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009638:	2300      	movs	r3, #0
 800963a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009640:	2307      	movs	r3, #7
 8009642:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009644:	2340      	movs	r3, #64	; 0x40
 8009646:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009648:	2300      	movs	r3, #0
 800964a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800964c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009650:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009652:	f107 0310 	add.w	r3, r7, #16
 8009656:	4619      	mov	r1, r3
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f7ff fe97 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800965e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009662:	2107      	movs	r1, #7
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 f98b 	bl	8009980 <SDMMC_GetCmdResp1>
 800966a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800966e:	4618      	mov	r0, r3
 8009670:	3728      	adds	r7, #40	; 0x28
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b088      	sub	sp, #32
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800967e:	2300      	movs	r3, #0
 8009680:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009686:	2300      	movs	r3, #0
 8009688:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800968a:	2300      	movs	r3, #0
 800968c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800968e:	2300      	movs	r3, #0
 8009690:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009696:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009698:	f107 0308 	add.w	r3, r7, #8
 800969c:	4619      	mov	r1, r3
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7ff fe74 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f941 	bl	800992c <SDMMC_GetCmdError>
 80096aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096ac:	69fb      	ldr	r3, [r7, #28]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3720      	adds	r7, #32
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b088      	sub	sp, #32
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80096be:	2300      	movs	r3, #0
 80096c0:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80096c2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80096c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80096c8:	2308      	movs	r3, #8
 80096ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096cc:	2340      	movs	r3, #64	; 0x40
 80096ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096d0:	2300      	movs	r3, #0
 80096d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096d8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096da:	f107 0308 	add.w	r3, r7, #8
 80096de:	4619      	mov	r1, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7ff fe53 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fb12 	bl	8009d10 <SDMMC_GetCmdResp7>
 80096ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096ee:	69fb      	ldr	r3, [r7, #28]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3720      	adds	r7, #32
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009702:	2300      	movs	r3, #0
 8009704:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800970a:	2337      	movs	r3, #55	; 0x37
 800970c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800970e:	2340      	movs	r3, #64	; 0x40
 8009710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009712:	2300      	movs	r3, #0
 8009714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800971a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800971c:	f107 0308 	add.w	r3, r7, #8
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7ff fe32 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009728:	f241 3288 	movw	r2, #5000	; 0x1388
 800972c:	2137      	movs	r1, #55	; 0x37
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f926 	bl	8009980 <SDMMC_GetCmdResp1>
 8009734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009736:	69fb      	ldr	r3, [r7, #28]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3720      	adds	r7, #32
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b088      	sub	sp, #32
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800974a:	2300      	movs	r3, #0
 800974c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800974e:	683a      	ldr	r2, [r7, #0]
 8009750:	4b0d      	ldr	r3, [pc, #52]	; (8009788 <SDMMC_CmdAppOperCommand+0x48>)
 8009752:	4313      	orrs	r3, r2
 8009754:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009756:	2329      	movs	r3, #41	; 0x29
 8009758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800975a:	2340      	movs	r3, #64	; 0x40
 800975c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800975e:	2300      	movs	r3, #0
 8009760:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009766:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009768:	f107 0308 	add.w	r3, r7, #8
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff fe0c 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fa29 	bl	8009bcc <SDMMC_GetCmdResp3>
 800977a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800977c:	69fb      	ldr	r3, [r7, #28]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3720      	adds	r7, #32
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	80100000 	.word	0x80100000

0800978c <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009796:	2300      	movs	r3, #0
 8009798:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800979e:	2306      	movs	r3, #6
 80097a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097a2:	2340      	movs	r3, #64	; 0x40
 80097a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097a6:	2300      	movs	r3, #0
 80097a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ae:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097b0:	f107 0308 	add.w	r3, r7, #8
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7ff fde8 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80097bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80097c0:	2106      	movs	r1, #6
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f8dc 	bl	8009980 <SDMMC_GetCmdResp1>
 80097c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097ca:	69fb      	ldr	r3, [r7, #28]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3720      	adds	r7, #32
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b088      	sub	sp, #32
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80097dc:	2300      	movs	r3, #0
 80097de:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 80097e0:	2300      	movs	r3, #0
 80097e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80097e4:	2333      	movs	r3, #51	; 0x33
 80097e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097e8:	2340      	movs	r3, #64	; 0x40
 80097ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097ec:	2300      	movs	r3, #0
 80097ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097f4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097f6:	f107 0308 	add.w	r3, r7, #8
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7ff fdc5 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009802:	f241 3288 	movw	r2, #5000	; 0x1388
 8009806:	2133      	movs	r1, #51	; 0x33
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f8b9 	bl	8009980 <SDMMC_GetCmdResp1>
 800980e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009810:	69fb      	ldr	r3, [r7, #28]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3720      	adds	r7, #32
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b088      	sub	sp, #32
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009822:	2300      	movs	r3, #0
 8009824:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800982a:	2302      	movs	r3, #2
 800982c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800982e:	23c0      	movs	r3, #192	; 0xc0
 8009830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009832:	2300      	movs	r3, #0
 8009834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800983a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800983c:	f107 0308 	add.w	r3, r7, #8
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff fda2 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f97f 	bl	8009b4c <SDMMC_GetCmdResp2>
 800984e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009850:	69fb      	ldr	r3, [r7, #28]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3720      	adds	r7, #32
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b088      	sub	sp, #32
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009864:	2300      	movs	r3, #0
 8009866:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800986c:	2309      	movs	r3, #9
 800986e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009870:	23c0      	movs	r3, #192	; 0xc0
 8009872:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009874:	2300      	movs	r3, #0
 8009876:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800987c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800987e:	f107 0308 	add.w	r3, r7, #8
 8009882:	4619      	mov	r1, r3
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7ff fd81 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f95e 	bl	8009b4c <SDMMC_GetCmdResp2>
 8009890:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009892:	69fb      	ldr	r3, [r7, #28]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3720      	adds	r7, #32
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80098a6:	2300      	movs	r3, #0
 80098a8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80098ae:	2303      	movs	r3, #3
 80098b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098b2:	2340      	movs	r3, #64	; 0x40
 80098b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098b6:	2300      	movs	r3, #0
 80098b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098be:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098c0:	f107 0308 	add.w	r3, r7, #8
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7ff fd60 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80098cc:	683a      	ldr	r2, [r7, #0]
 80098ce:	2103      	movs	r1, #3
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f9af 	bl	8009c34 <SDMMC_GetCmdResp6>
 80098d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098d8:	69fb      	ldr	r3, [r7, #28]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3720      	adds	r7, #32
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b088      	sub	sp, #32
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80098ec:	2300      	movs	r3, #0
 80098ee:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80098f4:	230d      	movs	r3, #13
 80098f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098f8:	2340      	movs	r3, #64	; 0x40
 80098fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009904:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009906:	f107 0308 	add.w	r3, r7, #8
 800990a:	4619      	mov	r1, r3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7ff fd3d 	bl	800938c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009912:	f241 3288 	movw	r2, #5000	; 0x1388
 8009916:	210d      	movs	r1, #13
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 f831 	bl	8009980 <SDMMC_GetCmdResp1>
 800991e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009920:	69fb      	ldr	r3, [r7, #28]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3720      	adds	r7, #32
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
	...

0800992c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800992c:	b490      	push	{r4, r7}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009934:	4b10      	ldr	r3, [pc, #64]	; (8009978 <SDMMC_GetCmdError+0x4c>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a10      	ldr	r2, [pc, #64]	; (800997c <SDMMC_GetCmdError+0x50>)
 800993a:	fba2 2303 	umull	r2, r3, r2, r3
 800993e:	0a5b      	lsrs	r3, r3, #9
 8009940:	f241 3288 	movw	r2, #5000	; 0x1388
 8009944:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009948:	4623      	mov	r3, r4
 800994a:	1e5c      	subs	r4, r3, #1
 800994c:	2b00      	cmp	r3, #0
 800994e:	d102      	bne.n	8009956 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009950:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009954:	e00a      	b.n	800996c <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800995a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995e:	2b00      	cmp	r3, #0
 8009960:	d0f2      	beq.n	8009948 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009968:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bc90      	pop	{r4, r7}
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	20000270 	.word	0x20000270
 800997c:	10624dd3 	.word	0x10624dd3

08009980 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009980:	b590      	push	{r4, r7, lr}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	460b      	mov	r3, r1
 800998a:	607a      	str	r2, [r7, #4]
 800998c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800998e:	4b6c      	ldr	r3, [pc, #432]	; (8009b40 <SDMMC_GetCmdResp1+0x1c0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a6c      	ldr	r2, [pc, #432]	; (8009b44 <SDMMC_GetCmdResp1+0x1c4>)
 8009994:	fba2 2303 	umull	r2, r3, r2, r3
 8009998:	0a5b      	lsrs	r3, r3, #9
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80099a0:	4623      	mov	r3, r4
 80099a2:	1e5c      	subs	r4, r3, #1
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d102      	bne.n	80099ae <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099ac:	e0c3      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0f2      	beq.n	80099a0 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099be:	f003 0304 	and.w	r3, r3, #4
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d004      	beq.n	80099d0 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2204      	movs	r2, #4
 80099ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099cc:	2304      	movs	r3, #4
 80099ce:	e0b2      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d4:	f003 0301 	and.w	r3, r3, #1
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d004      	beq.n	80099e6 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2201      	movs	r2, #1
 80099e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e0a7      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f7ff fcfa 	bl	80093e0 <SDMMC_GetCommandResponse>
 80099ec:	4603      	mov	r3, r0
 80099ee:	461a      	mov	r2, r3
 80099f0:	7afb      	ldrb	r3, [r7, #11]
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d001      	beq.n	80099fa <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e09d      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009a00:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009a02:	2100      	movs	r1, #0
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f7ff fcf8 	bl	80093fa <SDMMC_GetResponse>
 8009a0a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	4b4e      	ldr	r3, [pc, #312]	; (8009b48 <SDMMC_GetCmdResp1+0x1c8>)
 8009a10:	4013      	ands	r3, r2
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8009a16:	2300      	movs	r3, #0
 8009a18:	e08d      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	da02      	bge.n	8009a26 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a24:	e087      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009a30:	2340      	movs	r3, #64	; 0x40
 8009a32:	e080      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009a3e:	2380      	movs	r3, #128	; 0x80
 8009a40:	e079      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d002      	beq.n	8009a52 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a50:	e071      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d002      	beq.n	8009a62 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a60:	e069      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d002      	beq.n	8009a72 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a70:	e061      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d002      	beq.n	8009a82 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009a7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a80:	e059      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a90:	e051      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d002      	beq.n	8009aa2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009aa0:	e049      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009aac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ab0:	e041      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d002      	beq.n	8009ac2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8009abc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ac0:	e039      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d002      	beq.n	8009ad2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009acc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009ad0:	e031      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d002      	beq.n	8009ae2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009adc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009ae0:	e029      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d002      	beq.n	8009af2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009aec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009af0:	e021      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d002      	beq.n	8009b02 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009afc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009b00:	e019      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009b0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009b10:	e011      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d002      	beq.n	8009b22 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009b1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009b20:	e009      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f003 0308 	and.w	r3, r3, #8
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d002      	beq.n	8009b32 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009b2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009b30:	e001      	b.n	8009b36 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009b32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	371c      	adds	r7, #28
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd90      	pop	{r4, r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	20000270 	.word	0x20000270
 8009b44:	10624dd3 	.word	0x10624dd3
 8009b48:	fdffe008 	.word	0xfdffe008

08009b4c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009b4c:	b490      	push	{r4, r7}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009b54:	4b1b      	ldr	r3, [pc, #108]	; (8009bc4 <SDMMC_GetCmdResp2+0x78>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a1b      	ldr	r2, [pc, #108]	; (8009bc8 <SDMMC_GetCmdResp2+0x7c>)
 8009b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b5e:	0a5b      	lsrs	r3, r3, #9
 8009b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b64:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009b68:	4623      	mov	r3, r4
 8009b6a:	1e5c      	subs	r4, r3, #1
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d102      	bne.n	8009b76 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b74:	e020      	b.n	8009bb8 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0f2      	beq.n	8009b68 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b86:	f003 0304 	and.w	r3, r3, #4
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d004      	beq.n	8009b98 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2204      	movs	r2, #4
 8009b92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b94:	2304      	movs	r3, #4
 8009b96:	e00f      	b.n	8009bb8 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b9c:	f003 0301 	and.w	r3, r3, #1
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d004      	beq.n	8009bae <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e004      	b.n	8009bb8 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009bb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bc90      	pop	{r4, r7}
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	20000270 	.word	0x20000270
 8009bc8:	10624dd3 	.word	0x10624dd3

08009bcc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009bcc:	b490      	push	{r4, r7}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009bd4:	4b15      	ldr	r3, [pc, #84]	; (8009c2c <SDMMC_GetCmdResp3+0x60>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a15      	ldr	r2, [pc, #84]	; (8009c30 <SDMMC_GetCmdResp3+0x64>)
 8009bda:	fba2 2303 	umull	r2, r3, r2, r3
 8009bde:	0a5b      	lsrs	r3, r3, #9
 8009be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009be4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009be8:	4623      	mov	r3, r4
 8009bea:	1e5c      	subs	r4, r3, #1
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d102      	bne.n	8009bf6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009bf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bf4:	e015      	b.n	8009c22 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bfa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d0f2      	beq.n	8009be8 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c06:	f003 0304 	and.w	r3, r3, #4
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d004      	beq.n	8009c18 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2204      	movs	r2, #4
 8009c12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c14:	2304      	movs	r3, #4
 8009c16:	e004      	b.n	8009c22 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009c1e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bc90      	pop	{r4, r7}
 8009c2a:	4770      	bx	lr
 8009c2c:	20000270 	.word	0x20000270
 8009c30:	10624dd3 	.word	0x10624dd3

08009c34 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009c34:	b590      	push	{r4, r7, lr}
 8009c36:	b087      	sub	sp, #28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009c42:	4b31      	ldr	r3, [pc, #196]	; (8009d08 <SDMMC_GetCmdResp6+0xd4>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a31      	ldr	r2, [pc, #196]	; (8009d0c <SDMMC_GetCmdResp6+0xd8>)
 8009c48:	fba2 2303 	umull	r2, r3, r2, r3
 8009c4c:	0a5b      	lsrs	r3, r3, #9
 8009c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c52:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009c56:	4623      	mov	r3, r4
 8009c58:	1e5c      	subs	r4, r3, #1
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d102      	bne.n	8009c64 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c62:	e04c      	b.n	8009cfe <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c68:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d0f2      	beq.n	8009c56 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d004      	beq.n	8009c86 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2204      	movs	r2, #4
 8009c80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c82:	2304      	movs	r3, #4
 8009c84:	e03b      	b.n	8009cfe <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d004      	beq.n	8009c9c <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2201      	movs	r2, #1
 8009c96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e030      	b.n	8009cfe <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f7ff fb9f 	bl	80093e0 <SDMMC_GetCommandResponse>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	7afb      	ldrb	r3, [r7, #11]
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d001      	beq.n	8009cb0 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cac:	2301      	movs	r3, #1
 8009cae:	e026      	b.n	8009cfe <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009cb6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009cb8:	2100      	movs	r1, #0
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f7ff fb9d 	bl	80093fa <SDMMC_GetResponse>
 8009cc0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d106      	bne.n	8009cda <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	0c1b      	lsrs	r3, r3, #16
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e011      	b.n	8009cfe <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d002      	beq.n	8009cea <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ce8:	e009      	b.n	8009cfe <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d002      	beq.n	8009cfa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cf8:	e001      	b.n	8009cfe <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009cfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	371c      	adds	r7, #28
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd90      	pop	{r4, r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20000270 	.word	0x20000270
 8009d0c:	10624dd3 	.word	0x10624dd3

08009d10 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009d10:	b490      	push	{r4, r7}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009d18:	4b18      	ldr	r3, [pc, #96]	; (8009d7c <SDMMC_GetCmdResp7+0x6c>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a18      	ldr	r2, [pc, #96]	; (8009d80 <SDMMC_GetCmdResp7+0x70>)
 8009d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d22:	0a5b      	lsrs	r3, r3, #9
 8009d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d28:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009d2c:	4623      	mov	r3, r4
 8009d2e:	1e5c      	subs	r4, r3, #1
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d102      	bne.n	8009d3a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d38:	e01a      	b.n	8009d70 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d0f2      	beq.n	8009d2c <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d4a:	f003 0304 	and.w	r3, r3, #4
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d004      	beq.n	8009d5c <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2240      	movs	r2, #64	; 0x40
 8009d56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d58:	2304      	movs	r3, #4
 8009d5a:	e009      	b.n	8009d70 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2240      	movs	r2, #64	; 0x40
 8009d6c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009d6e:	2300      	movs	r3, #0
  
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3708      	adds	r7, #8
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bc90      	pop	{r4, r7}
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	20000270 	.word	0x20000270
 8009d80:	10624dd3 	.word	0x10624dd3

08009d84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009d8e:	79fb      	ldrb	r3, [r7, #7]
 8009d90:	4a08      	ldr	r2, [pc, #32]	; (8009db4 <disk_status+0x30>)
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	79fa      	ldrb	r2, [r7, #7]
 8009d9c:	4905      	ldr	r1, [pc, #20]	; (8009db4 <disk_status+0x30>)
 8009d9e:	440a      	add	r2, r1
 8009da0:	7a12      	ldrb	r2, [r2, #8]
 8009da2:	4610      	mov	r0, r2
 8009da4:	4798      	blx	r3
 8009da6:	4603      	mov	r3, r0
 8009da8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	2000052c 	.word	0x2000052c

08009db8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	4a0d      	ldr	r2, [pc, #52]	; (8009e00 <disk_initialize+0x48>)
 8009dca:	5cd3      	ldrb	r3, [r2, r3]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d111      	bne.n	8009df4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009dd0:	79fb      	ldrb	r3, [r7, #7]
 8009dd2:	4a0b      	ldr	r2, [pc, #44]	; (8009e00 <disk_initialize+0x48>)
 8009dd4:	2101      	movs	r1, #1
 8009dd6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009dd8:	79fb      	ldrb	r3, [r7, #7]
 8009dda:	4a09      	ldr	r2, [pc, #36]	; (8009e00 <disk_initialize+0x48>)
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4413      	add	r3, r2
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	79fa      	ldrb	r2, [r7, #7]
 8009de6:	4906      	ldr	r1, [pc, #24]	; (8009e00 <disk_initialize+0x48>)
 8009de8:	440a      	add	r2, r1
 8009dea:	7a12      	ldrb	r2, [r2, #8]
 8009dec:	4610      	mov	r0, r2
 8009dee:	4798      	blx	r3
 8009df0:	4603      	mov	r3, r0
 8009df2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	2000052c 	.word	0x2000052c

08009e04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009e04:	b590      	push	{r4, r7, lr}
 8009e06:	b087      	sub	sp, #28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60b9      	str	r1, [r7, #8]
 8009e0c:	607a      	str	r2, [r7, #4]
 8009e0e:	603b      	str	r3, [r7, #0]
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	4a0a      	ldr	r2, [pc, #40]	; (8009e40 <disk_read+0x3c>)
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	689c      	ldr	r4, [r3, #8]
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
 8009e22:	4a07      	ldr	r2, [pc, #28]	; (8009e40 <disk_read+0x3c>)
 8009e24:	4413      	add	r3, r2
 8009e26:	7a18      	ldrb	r0, [r3, #8]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	68b9      	ldr	r1, [r7, #8]
 8009e2e:	47a0      	blx	r4
 8009e30:	4603      	mov	r3, r0
 8009e32:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	371c      	adds	r7, #28
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd90      	pop	{r4, r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	2000052c 	.word	0x2000052c

08009e44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009e44:	b590      	push	{r4, r7, lr}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60b9      	str	r1, [r7, #8]
 8009e4c:	607a      	str	r2, [r7, #4]
 8009e4e:	603b      	str	r3, [r7, #0]
 8009e50:	4603      	mov	r3, r0
 8009e52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	4a0a      	ldr	r2, [pc, #40]	; (8009e80 <disk_write+0x3c>)
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	68dc      	ldr	r4, [r3, #12]
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
 8009e62:	4a07      	ldr	r2, [pc, #28]	; (8009e80 <disk_write+0x3c>)
 8009e64:	4413      	add	r3, r2
 8009e66:	7a18      	ldrb	r0, [r3, #8]
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	68b9      	ldr	r1, [r7, #8]
 8009e6e:	47a0      	blx	r4
 8009e70:	4603      	mov	r3, r0
 8009e72:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	371c      	adds	r7, #28
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd90      	pop	{r4, r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	2000052c 	.word	0x2000052c

08009e84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	603a      	str	r2, [r7, #0]
 8009e8e:	71fb      	strb	r3, [r7, #7]
 8009e90:	460b      	mov	r3, r1
 8009e92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009e94:	79fb      	ldrb	r3, [r7, #7]
 8009e96:	4a09      	ldr	r2, [pc, #36]	; (8009ebc <disk_ioctl+0x38>)
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4413      	add	r3, r2
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	79fa      	ldrb	r2, [r7, #7]
 8009ea2:	4906      	ldr	r1, [pc, #24]	; (8009ebc <disk_ioctl+0x38>)
 8009ea4:	440a      	add	r2, r1
 8009ea6:	7a10      	ldrb	r0, [r2, #8]
 8009ea8:	79b9      	ldrb	r1, [r7, #6]
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	4798      	blx	r3
 8009eae:	4603      	mov	r3, r0
 8009eb0:	73fb      	strb	r3, [r7, #15]
  return res;
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	2000052c 	.word	0x2000052c

08009ec0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009ed0:	89fb      	ldrh	r3, [r7, #14]
 8009ed2:	021b      	lsls	r3, r3, #8
 8009ed4:	b21a      	sxth	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	b21b      	sxth	r3, r3
 8009edc:	4313      	orrs	r3, r2
 8009ede:	b21b      	sxth	r3, r3
 8009ee0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009ee2:	89fb      	ldrh	r3, [r7, #14]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3714      	adds	r7, #20
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	3303      	adds	r3, #3
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	021b      	lsls	r3, r3, #8
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	3202      	adds	r2, #2
 8009f08:	7812      	ldrb	r2, [r2, #0]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	021b      	lsls	r3, r3, #8
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	3201      	adds	r2, #1
 8009f16:	7812      	ldrb	r2, [r2, #0]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	021b      	lsls	r3, r3, #8
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	7812      	ldrb	r2, [r2, #0]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	60fb      	str	r3, [r7, #12]
	return rv;
 8009f28:	68fb      	ldr	r3, [r7, #12]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3714      	adds	r7, #20
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009f36:	b480      	push	{r7}
 8009f38:	b083      	sub	sp, #12
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	460b      	mov	r3, r1
 8009f40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	1c5a      	adds	r2, r3, #1
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	887a      	ldrh	r2, [r7, #2]
 8009f4a:	b2d2      	uxtb	r2, r2
 8009f4c:	701a      	strb	r2, [r3, #0]
 8009f4e:	887b      	ldrh	r3, [r7, #2]
 8009f50:	0a1b      	lsrs	r3, r3, #8
 8009f52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	1c5a      	adds	r2, r3, #1
 8009f58:	607a      	str	r2, [r7, #4]
 8009f5a:	887a      	ldrh	r2, [r7, #2]
 8009f5c:	b2d2      	uxtb	r2, r2
 8009f5e:	701a      	strb	r2, [r3, #0]
}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	1c5a      	adds	r2, r3, #1
 8009f7a:	607a      	str	r2, [r7, #4]
 8009f7c:	683a      	ldr	r2, [r7, #0]
 8009f7e:	b2d2      	uxtb	r2, r2
 8009f80:	701a      	strb	r2, [r3, #0]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	0a1b      	lsrs	r3, r3, #8
 8009f86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	1c5a      	adds	r2, r3, #1
 8009f8c:	607a      	str	r2, [r7, #4]
 8009f8e:	683a      	ldr	r2, [r7, #0]
 8009f90:	b2d2      	uxtb	r2, r2
 8009f92:	701a      	strb	r2, [r3, #0]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	0a1b      	lsrs	r3, r3, #8
 8009f98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	1c5a      	adds	r2, r3, #1
 8009f9e:	607a      	str	r2, [r7, #4]
 8009fa0:	683a      	ldr	r2, [r7, #0]
 8009fa2:	b2d2      	uxtb	r2, r2
 8009fa4:	701a      	strb	r2, [r3, #0]
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	0a1b      	lsrs	r3, r3, #8
 8009faa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	1c5a      	adds	r2, r3, #1
 8009fb0:	607a      	str	r2, [r7, #4]
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	b2d2      	uxtb	r2, r2
 8009fb6:	701a      	strb	r2, [r3, #0]
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009fc4:	b480      	push	{r7}
 8009fc6:	b087      	sub	sp, #28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00d      	beq.n	8009ffa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	1c53      	adds	r3, r2, #1
 8009fe2:	613b      	str	r3, [r7, #16]
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	1c59      	adds	r1, r3, #1
 8009fe8:	6179      	str	r1, [r7, #20]
 8009fea:	7812      	ldrb	r2, [r2, #0]
 8009fec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	607b      	str	r3, [r7, #4]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1f1      	bne.n	8009fde <mem_cpy+0x1a>
	}
}
 8009ffa:	bf00      	nop
 8009ffc:	371c      	adds	r7, #28
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a006:	b480      	push	{r7}
 800a008:	b087      	sub	sp, #28
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	60f8      	str	r0, [r7, #12]
 800a00e:	60b9      	str	r1, [r7, #8]
 800a010:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	1c5a      	adds	r2, r3, #1
 800a01a:	617a      	str	r2, [r7, #20]
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	b2d2      	uxtb	r2, r2
 800a020:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	3b01      	subs	r3, #1
 800a026:	607b      	str	r3, [r7, #4]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1f3      	bne.n	800a016 <mem_set+0x10>
}
 800a02e:	bf00      	nop
 800a030:	371c      	adds	r7, #28
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a03a:	b480      	push	{r7}
 800a03c:	b089      	sub	sp, #36	; 0x24
 800a03e:	af00      	add	r7, sp, #0
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	60b9      	str	r1, [r7, #8]
 800a044:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	61fb      	str	r3, [r7, #28]
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	1c5a      	adds	r2, r3, #1
 800a056:	61fa      	str	r2, [r7, #28]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	4619      	mov	r1, r3
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	1c5a      	adds	r2, r3, #1
 800a060:	61ba      	str	r2, [r7, #24]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	1acb      	subs	r3, r1, r3
 800a066:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3b01      	subs	r3, #1
 800a06c:	607b      	str	r3, [r7, #4]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <mem_cmp+0x40>
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d0eb      	beq.n	800a052 <mem_cmp+0x18>

	return r;
 800a07a:	697b      	ldr	r3, [r7, #20]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3724      	adds	r7, #36	; 0x24
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a092:	e002      	b.n	800a09a <chk_chr+0x12>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	3301      	adds	r3, #1
 800a098:	607b      	str	r3, [r7, #4]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d005      	beq.n	800a0ae <chk_chr+0x26>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d1f2      	bne.n	800a094 <chk_chr+0xc>
	return *str;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	370c      	adds	r7, #12
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
	...

0800a0c0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	60bb      	str	r3, [r7, #8]
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	60fb      	str	r3, [r7, #12]
 800a0d2:	e029      	b.n	800a128 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a0d4:	4a27      	ldr	r2, [pc, #156]	; (800a174 <chk_lock+0xb4>)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	011b      	lsls	r3, r3, #4
 800a0da:	4413      	add	r3, r2
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d01d      	beq.n	800a11e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a0e2:	4a24      	ldr	r2, [pc, #144]	; (800a174 <chk_lock+0xb4>)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	011b      	lsls	r3, r3, #4
 800a0e8:	4413      	add	r3, r2
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d116      	bne.n	800a122 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a0f4:	4a1f      	ldr	r2, [pc, #124]	; (800a174 <chk_lock+0xb4>)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	011b      	lsls	r3, r3, #4
 800a0fa:	4413      	add	r3, r2
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a104:	429a      	cmp	r2, r3
 800a106:	d10c      	bne.n	800a122 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a108:	4a1a      	ldr	r2, [pc, #104]	; (800a174 <chk_lock+0xb4>)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	011b      	lsls	r3, r3, #4
 800a10e:	4413      	add	r3, r2
 800a110:	3308      	adds	r3, #8
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a118:	429a      	cmp	r2, r3
 800a11a:	d102      	bne.n	800a122 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a11c:	e007      	b.n	800a12e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a11e:	2301      	movs	r3, #1
 800a120:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	3301      	adds	r3, #1
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d9d2      	bls.n	800a0d4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2b02      	cmp	r3, #2
 800a132:	d109      	bne.n	800a148 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d102      	bne.n	800a140 <chk_lock+0x80>
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d101      	bne.n	800a144 <chk_lock+0x84>
 800a140:	2300      	movs	r3, #0
 800a142:	e010      	b.n	800a166 <chk_lock+0xa6>
 800a144:	2312      	movs	r3, #18
 800a146:	e00e      	b.n	800a166 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d108      	bne.n	800a160 <chk_lock+0xa0>
 800a14e:	4a09      	ldr	r2, [pc, #36]	; (800a174 <chk_lock+0xb4>)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	011b      	lsls	r3, r3, #4
 800a154:	4413      	add	r3, r2
 800a156:	330c      	adds	r3, #12
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a15e:	d101      	bne.n	800a164 <chk_lock+0xa4>
 800a160:	2310      	movs	r3, #16
 800a162:	e000      	b.n	800a166 <chk_lock+0xa6>
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	2000050c 	.word	0x2000050c

0800a178 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a17e:	2300      	movs	r3, #0
 800a180:	607b      	str	r3, [r7, #4]
 800a182:	e002      	b.n	800a18a <enq_lock+0x12>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	3301      	adds	r3, #1
 800a188:	607b      	str	r3, [r7, #4]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d806      	bhi.n	800a19e <enq_lock+0x26>
 800a190:	4a09      	ldr	r2, [pc, #36]	; (800a1b8 <enq_lock+0x40>)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	011b      	lsls	r3, r3, #4
 800a196:	4413      	add	r3, r2
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1f2      	bne.n	800a184 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	bf14      	ite	ne
 800a1a4:	2301      	movne	r3, #1
 800a1a6:	2300      	moveq	r3, #0
 800a1a8:	b2db      	uxtb	r3, r3
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	2000050c 	.word	0x2000050c

0800a1bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b085      	sub	sp, #20
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	60fb      	str	r3, [r7, #12]
 800a1ca:	e01f      	b.n	800a20c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a1cc:	4a41      	ldr	r2, [pc, #260]	; (800a2d4 <inc_lock+0x118>)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	011b      	lsls	r3, r3, #4
 800a1d2:	4413      	add	r3, r2
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d113      	bne.n	800a206 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a1de:	4a3d      	ldr	r2, [pc, #244]	; (800a2d4 <inc_lock+0x118>)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	011b      	lsls	r3, r3, #4
 800a1e4:	4413      	add	r3, r2
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d109      	bne.n	800a206 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a1f2:	4a38      	ldr	r2, [pc, #224]	; (800a2d4 <inc_lock+0x118>)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	011b      	lsls	r3, r3, #4
 800a1f8:	4413      	add	r3, r2
 800a1fa:	3308      	adds	r3, #8
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a202:	429a      	cmp	r2, r3
 800a204:	d006      	beq.n	800a214 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3301      	adds	r3, #1
 800a20a:	60fb      	str	r3, [r7, #12]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d9dc      	bls.n	800a1cc <inc_lock+0x10>
 800a212:	e000      	b.n	800a216 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a214:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d132      	bne.n	800a282 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a21c:	2300      	movs	r3, #0
 800a21e:	60fb      	str	r3, [r7, #12]
 800a220:	e002      	b.n	800a228 <inc_lock+0x6c>
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	3301      	adds	r3, #1
 800a226:	60fb      	str	r3, [r7, #12]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d806      	bhi.n	800a23c <inc_lock+0x80>
 800a22e:	4a29      	ldr	r2, [pc, #164]	; (800a2d4 <inc_lock+0x118>)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	011b      	lsls	r3, r3, #4
 800a234:	4413      	add	r3, r2
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1f2      	bne.n	800a222 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d101      	bne.n	800a246 <inc_lock+0x8a>
 800a242:	2300      	movs	r3, #0
 800a244:	e040      	b.n	800a2c8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	4922      	ldr	r1, [pc, #136]	; (800a2d4 <inc_lock+0x118>)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	440b      	add	r3, r1
 800a252:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	491e      	ldr	r1, [pc, #120]	; (800a2d4 <inc_lock+0x118>)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	011b      	lsls	r3, r3, #4
 800a25e:	440b      	add	r3, r1
 800a260:	3304      	adds	r3, #4
 800a262:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	695a      	ldr	r2, [r3, #20]
 800a268:	491a      	ldr	r1, [pc, #104]	; (800a2d4 <inc_lock+0x118>)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	011b      	lsls	r3, r3, #4
 800a26e:	440b      	add	r3, r1
 800a270:	3308      	adds	r3, #8
 800a272:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a274:	4a17      	ldr	r2, [pc, #92]	; (800a2d4 <inc_lock+0x118>)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	011b      	lsls	r3, r3, #4
 800a27a:	4413      	add	r3, r2
 800a27c:	330c      	adds	r3, #12
 800a27e:	2200      	movs	r2, #0
 800a280:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d009      	beq.n	800a29c <inc_lock+0xe0>
 800a288:	4a12      	ldr	r2, [pc, #72]	; (800a2d4 <inc_lock+0x118>)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	011b      	lsls	r3, r3, #4
 800a28e:	4413      	add	r3, r2
 800a290:	330c      	adds	r3, #12
 800a292:	881b      	ldrh	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <inc_lock+0xe0>
 800a298:	2300      	movs	r3, #0
 800a29a:	e015      	b.n	800a2c8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d108      	bne.n	800a2b4 <inc_lock+0xf8>
 800a2a2:	4a0c      	ldr	r2, [pc, #48]	; (800a2d4 <inc_lock+0x118>)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	011b      	lsls	r3, r3, #4
 800a2a8:	4413      	add	r3, r2
 800a2aa:	330c      	adds	r3, #12
 800a2ac:	881b      	ldrh	r3, [r3, #0]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	e001      	b.n	800a2b8 <inc_lock+0xfc>
 800a2b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2b8:	4906      	ldr	r1, [pc, #24]	; (800a2d4 <inc_lock+0x118>)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	011b      	lsls	r3, r3, #4
 800a2be:	440b      	add	r3, r1
 800a2c0:	330c      	adds	r3, #12
 800a2c2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	3301      	adds	r3, #1
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3714      	adds	r7, #20
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr
 800a2d4:	2000050c 	.word	0x2000050c

0800a2d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	607b      	str	r3, [r7, #4]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d825      	bhi.n	800a338 <dec_lock+0x60>
		n = Files[i].ctr;
 800a2ec:	4a17      	ldr	r2, [pc, #92]	; (800a34c <dec_lock+0x74>)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	011b      	lsls	r3, r3, #4
 800a2f2:	4413      	add	r3, r2
 800a2f4:	330c      	adds	r3, #12
 800a2f6:	881b      	ldrh	r3, [r3, #0]
 800a2f8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a2fa:	89fb      	ldrh	r3, [r7, #14]
 800a2fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a300:	d101      	bne.n	800a306 <dec_lock+0x2e>
 800a302:	2300      	movs	r3, #0
 800a304:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a306:	89fb      	ldrh	r3, [r7, #14]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d002      	beq.n	800a312 <dec_lock+0x3a>
 800a30c:	89fb      	ldrh	r3, [r7, #14]
 800a30e:	3b01      	subs	r3, #1
 800a310:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a312:	4a0e      	ldr	r2, [pc, #56]	; (800a34c <dec_lock+0x74>)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	011b      	lsls	r3, r3, #4
 800a318:	4413      	add	r3, r2
 800a31a:	330c      	adds	r3, #12
 800a31c:	89fa      	ldrh	r2, [r7, #14]
 800a31e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a320:	89fb      	ldrh	r3, [r7, #14]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d105      	bne.n	800a332 <dec_lock+0x5a>
 800a326:	4a09      	ldr	r2, [pc, #36]	; (800a34c <dec_lock+0x74>)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	011b      	lsls	r3, r3, #4
 800a32c:	4413      	add	r3, r2
 800a32e:	2200      	movs	r2, #0
 800a330:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	737b      	strb	r3, [r7, #13]
 800a336:	e001      	b.n	800a33c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a338:	2302      	movs	r3, #2
 800a33a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a33c:	7b7b      	ldrb	r3, [r7, #13]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	2000050c 	.word	0x2000050c

0800a350 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a358:	2300      	movs	r3, #0
 800a35a:	60fb      	str	r3, [r7, #12]
 800a35c:	e010      	b.n	800a380 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a35e:	4a0d      	ldr	r2, [pc, #52]	; (800a394 <clear_lock+0x44>)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	011b      	lsls	r3, r3, #4
 800a364:	4413      	add	r3, r2
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d105      	bne.n	800a37a <clear_lock+0x2a>
 800a36e:	4a09      	ldr	r2, [pc, #36]	; (800a394 <clear_lock+0x44>)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	011b      	lsls	r3, r3, #4
 800a374:	4413      	add	r3, r2
 800a376:	2200      	movs	r2, #0
 800a378:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3301      	adds	r3, #1
 800a37e:	60fb      	str	r3, [r7, #12]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b01      	cmp	r3, #1
 800a384:	d9eb      	bls.n	800a35e <clear_lock+0xe>
	}
}
 800a386:	bf00      	nop
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	2000050c 	.word	0x2000050c

0800a398 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	78db      	ldrb	r3, [r3, #3]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d034      	beq.n	800a416 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	7858      	ldrb	r0, [r3, #1]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3bc:	2301      	movs	r3, #1
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	f7ff fd40 	bl	8009e44 <disk_write>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d002      	beq.n	800a3d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	73fb      	strb	r3, [r7, #15]
 800a3ce:	e022      	b.n	800a416 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	1ad2      	subs	r2, r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d217      	bcs.n	800a416 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	789b      	ldrb	r3, [r3, #2]
 800a3ea:	613b      	str	r3, [r7, #16]
 800a3ec:	e010      	b.n	800a410 <sync_window+0x78>
					wsect += fs->fsize;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	7858      	ldrb	r0, [r3, #1]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a402:	2301      	movs	r3, #1
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	f7ff fd1d 	bl	8009e44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	3b01      	subs	r3, #1
 800a40e:	613b      	str	r3, [r7, #16]
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	2b01      	cmp	r3, #1
 800a414:	d8eb      	bhi.n	800a3ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a416:	7bfb      	ldrb	r3, [r7, #15]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3718      	adds	r7, #24
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a432:	683a      	ldr	r2, [r7, #0]
 800a434:	429a      	cmp	r2, r3
 800a436:	d01b      	beq.n	800a470 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7ff ffad 	bl	800a398 <sync_window>
 800a43e:	4603      	mov	r3, r0
 800a440:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a442:	7bfb      	ldrb	r3, [r7, #15]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d113      	bne.n	800a470 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	7858      	ldrb	r0, [r3, #1]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a452:	2301      	movs	r3, #1
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	f7ff fcd5 	bl	8009e04 <disk_read>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d004      	beq.n	800a46a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a460:	f04f 33ff 	mov.w	r3, #4294967295
 800a464:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a466:	2301      	movs	r3, #1
 800a468:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	683a      	ldr	r2, [r7, #0]
 800a46e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a470:	7bfb      	ldrb	r3, [r7, #15]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
	...

0800a47c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7ff ff87 	bl	800a398 <sync_window>
 800a48a:	4603      	mov	r3, r0
 800a48c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d158      	bne.n	800a546 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	2b03      	cmp	r3, #3
 800a49a:	d148      	bne.n	800a52e <sync_fs+0xb2>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	791b      	ldrb	r3, [r3, #4]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d144      	bne.n	800a52e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	3330      	adds	r3, #48	; 0x30
 800a4a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7ff fda9 	bl	800a006 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	3330      	adds	r3, #48	; 0x30
 800a4b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a4bc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7ff fd38 	bl	8009f36 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	3330      	adds	r3, #48	; 0x30
 800a4ca:	4921      	ldr	r1, [pc, #132]	; (800a550 <sync_fs+0xd4>)
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7ff fd4d 	bl	8009f6c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	3330      	adds	r3, #48	; 0x30
 800a4d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a4da:	491e      	ldr	r1, [pc, #120]	; (800a554 <sync_fs+0xd8>)
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7ff fd45 	bl	8009f6c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	3330      	adds	r3, #48	; 0x30
 800a4e6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	4610      	mov	r0, r2
 800a4f2:	f7ff fd3b 	bl	8009f6c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	3330      	adds	r3, #48	; 0x30
 800a4fa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	4619      	mov	r1, r3
 800a504:	4610      	mov	r0, r2
 800a506:	f7ff fd31 	bl	8009f6c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	69db      	ldr	r3, [r3, #28]
 800a50e:	1c5a      	adds	r2, r3, #1
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	7858      	ldrb	r0, [r3, #1]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a522:	2301      	movs	r3, #1
 800a524:	f7ff fc8e 	bl	8009e44 <disk_write>
			fs->fsi_flag = 0;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	785b      	ldrb	r3, [r3, #1]
 800a532:	2200      	movs	r2, #0
 800a534:	2100      	movs	r1, #0
 800a536:	4618      	mov	r0, r3
 800a538:	f7ff fca4 	bl	8009e84 <disk_ioctl>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d001      	beq.n	800a546 <sync_fs+0xca>
 800a542:	2301      	movs	r3, #1
 800a544:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a546:	7bfb      	ldrb	r3, [r7, #15]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	41615252 	.word	0x41615252
 800a554:	61417272 	.word	0x61417272

0800a558 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	3b02      	subs	r3, #2
 800a566:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	695b      	ldr	r3, [r3, #20]
 800a56c:	3b02      	subs	r3, #2
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	429a      	cmp	r2, r3
 800a572:	d301      	bcc.n	800a578 <clust2sect+0x20>
 800a574:	2300      	movs	r3, #0
 800a576:	e008      	b.n	800a58a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	895b      	ldrh	r3, [r3, #10]
 800a57c:	461a      	mov	r2, r3
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	fb03 f202 	mul.w	r2, r3, r2
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a588:	4413      	add	r3, r2
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b086      	sub	sp, #24
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d904      	bls.n	800a5b6 <get_fat+0x20>
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	695b      	ldr	r3, [r3, #20]
 800a5b0:	683a      	ldr	r2, [r7, #0]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d302      	bcc.n	800a5bc <get_fat+0x26>
		val = 1;	/* Internal error */
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	617b      	str	r3, [r7, #20]
 800a5ba:	e08c      	b.n	800a6d6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d045      	beq.n	800a656 <get_fat+0xc0>
 800a5ca:	2b03      	cmp	r3, #3
 800a5cc:	d05d      	beq.n	800a68a <get_fat+0xf4>
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d177      	bne.n	800a6c2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	60fb      	str	r3, [r7, #12]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	085b      	lsrs	r3, r3, #1
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	4413      	add	r3, r2
 800a5de:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	6a1a      	ldr	r2, [r3, #32]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	0a5b      	lsrs	r3, r3, #9
 800a5e8:	4413      	add	r3, r2
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	6938      	ldr	r0, [r7, #16]
 800a5ee:	f7ff ff17 	bl	800a420 <move_window>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d167      	bne.n	800a6c8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	1c5a      	adds	r2, r3, #1
 800a5fc:	60fa      	str	r2, [r7, #12]
 800a5fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a602:	693a      	ldr	r2, [r7, #16]
 800a604:	4413      	add	r3, r2
 800a606:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a60a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	6a1a      	ldr	r2, [r3, #32]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	0a5b      	lsrs	r3, r3, #9
 800a614:	4413      	add	r3, r2
 800a616:	4619      	mov	r1, r3
 800a618:	6938      	ldr	r0, [r7, #16]
 800a61a:	f7ff ff01 	bl	800a420 <move_window>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d153      	bne.n	800a6cc <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a62a:	693a      	ldr	r2, [r7, #16]
 800a62c:	4413      	add	r3, r2
 800a62e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a632:	021b      	lsls	r3, r3, #8
 800a634:	461a      	mov	r2, r3
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	4313      	orrs	r3, r2
 800a63a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	f003 0301 	and.w	r3, r3, #1
 800a642:	2b00      	cmp	r3, #0
 800a644:	d002      	beq.n	800a64c <get_fat+0xb6>
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	091b      	lsrs	r3, r3, #4
 800a64a:	e002      	b.n	800a652 <get_fat+0xbc>
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a652:	617b      	str	r3, [r7, #20]
			break;
 800a654:	e03f      	b.n	800a6d6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	6a1a      	ldr	r2, [r3, #32]
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	0a1b      	lsrs	r3, r3, #8
 800a65e:	4413      	add	r3, r2
 800a660:	4619      	mov	r1, r3
 800a662:	6938      	ldr	r0, [r7, #16]
 800a664:	f7ff fedc 	bl	800a420 <move_window>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d130      	bne.n	800a6d0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	005b      	lsls	r3, r3, #1
 800a678:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a67c:	4413      	add	r3, r2
 800a67e:	4618      	mov	r0, r3
 800a680:	f7ff fc1e 	bl	8009ec0 <ld_word>
 800a684:	4603      	mov	r3, r0
 800a686:	617b      	str	r3, [r7, #20]
			break;
 800a688:	e025      	b.n	800a6d6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	6a1a      	ldr	r2, [r3, #32]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	09db      	lsrs	r3, r3, #7
 800a692:	4413      	add	r3, r2
 800a694:	4619      	mov	r1, r3
 800a696:	6938      	ldr	r0, [r7, #16]
 800a698:	f7ff fec2 	bl	800a420 <move_window>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d118      	bne.n	800a6d4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a6b0:	4413      	add	r3, r2
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7ff fc1c 	bl	8009ef0 <ld_dword>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a6be:	617b      	str	r3, [r7, #20]
			break;
 800a6c0:	e009      	b.n	800a6d6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	617b      	str	r3, [r7, #20]
 800a6c6:	e006      	b.n	800a6d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6c8:	bf00      	nop
 800a6ca:	e004      	b.n	800a6d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6cc:	bf00      	nop
 800a6ce:	e002      	b.n	800a6d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a6d0:	bf00      	nop
 800a6d2:	e000      	b.n	800a6d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a6d4:	bf00      	nop
		}
	}

	return val;
 800a6d6:	697b      	ldr	r3, [r7, #20]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3718      	adds	r7, #24
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a6e0:	b590      	push	{r4, r7, lr}
 800a6e2:	b089      	sub	sp, #36	; 0x24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	f240 80d6 	bls.w	800a8a4 <put_fat+0x1c4>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	695b      	ldr	r3, [r3, #20]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	f080 80d0 	bcs.w	800a8a4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d073      	beq.n	800a7f4 <put_fat+0x114>
 800a70c:	2b03      	cmp	r3, #3
 800a70e:	f000 8091 	beq.w	800a834 <put_fat+0x154>
 800a712:	2b01      	cmp	r3, #1
 800a714:	f040 80c6 	bne.w	800a8a4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	61bb      	str	r3, [r7, #24]
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	085b      	lsrs	r3, r3, #1
 800a720:	69ba      	ldr	r2, [r7, #24]
 800a722:	4413      	add	r3, r2
 800a724:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6a1a      	ldr	r2, [r3, #32]
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	0a5b      	lsrs	r3, r3, #9
 800a72e:	4413      	add	r3, r2
 800a730:	4619      	mov	r1, r3
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f7ff fe74 	bl	800a420 <move_window>
 800a738:	4603      	mov	r3, r0
 800a73a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a73c:	7ffb      	ldrb	r3, [r7, #31]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f040 80a9 	bne.w	800a896 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	1c59      	adds	r1, r3, #1
 800a74e:	61b9      	str	r1, [r7, #24]
 800a750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a754:	4413      	add	r3, r2
 800a756:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	f003 0301 	and.w	r3, r3, #1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00d      	beq.n	800a77e <put_fat+0x9e>
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	b25b      	sxtb	r3, r3
 800a768:	f003 030f 	and.w	r3, r3, #15
 800a76c:	b25a      	sxtb	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	b2db      	uxtb	r3, r3
 800a772:	011b      	lsls	r3, r3, #4
 800a774:	b25b      	sxtb	r3, r3
 800a776:	4313      	orrs	r3, r2
 800a778:	b25b      	sxtb	r3, r3
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	e001      	b.n	800a782 <put_fat+0xa2>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	b2db      	uxtb	r3, r3
 800a782:	697a      	ldr	r2, [r7, #20]
 800a784:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2201      	movs	r2, #1
 800a78a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6a1a      	ldr	r2, [r3, #32]
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	0a5b      	lsrs	r3, r3, #9
 800a794:	4413      	add	r3, r2
 800a796:	4619      	mov	r1, r3
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f7ff fe41 	bl	800a420 <move_window>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7a2:	7ffb      	ldrb	r3, [r7, #31]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d178      	bne.n	800a89a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7b4:	4413      	add	r3, r2
 800a7b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	f003 0301 	and.w	r3, r3, #1
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d003      	beq.n	800a7ca <put_fat+0xea>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	091b      	lsrs	r3, r3, #4
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	e00e      	b.n	800a7e8 <put_fat+0x108>
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	b25b      	sxtb	r3, r3
 800a7d0:	f023 030f 	bic.w	r3, r3, #15
 800a7d4:	b25a      	sxtb	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	0a1b      	lsrs	r3, r3, #8
 800a7da:	b25b      	sxtb	r3, r3
 800a7dc:	f003 030f 	and.w	r3, r3, #15
 800a7e0:	b25b      	sxtb	r3, r3
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	b25b      	sxtb	r3, r3
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	70da      	strb	r2, [r3, #3]
			break;
 800a7f2:	e057      	b.n	800a8a4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6a1a      	ldr	r2, [r3, #32]
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	0a1b      	lsrs	r3, r3, #8
 800a7fc:	4413      	add	r3, r2
 800a7fe:	4619      	mov	r1, r3
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f7ff fe0d 	bl	800a420 <move_window>
 800a806:	4603      	mov	r3, r0
 800a808:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a80a:	7ffb      	ldrb	r3, [r7, #31]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d146      	bne.n	800a89e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	005b      	lsls	r3, r3, #1
 800a81a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a81e:	4413      	add	r3, r2
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	b292      	uxth	r2, r2
 800a824:	4611      	mov	r1, r2
 800a826:	4618      	mov	r0, r3
 800a828:	f7ff fb85 	bl	8009f36 <st_word>
			fs->wflag = 1;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2201      	movs	r2, #1
 800a830:	70da      	strb	r2, [r3, #3]
			break;
 800a832:	e037      	b.n	800a8a4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6a1a      	ldr	r2, [r3, #32]
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	09db      	lsrs	r3, r3, #7
 800a83c:	4413      	add	r3, r2
 800a83e:	4619      	mov	r1, r3
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f7ff fded 	bl	800a420 <move_window>
 800a846:	4603      	mov	r3, r0
 800a848:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a84a:	7ffb      	ldrb	r3, [r7, #31]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d128      	bne.n	800a8a2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a864:	4413      	add	r3, r2
 800a866:	4618      	mov	r0, r3
 800a868:	f7ff fb42 	bl	8009ef0 <ld_dword>
 800a86c:	4603      	mov	r3, r0
 800a86e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a872:	4323      	orrs	r3, r4
 800a874:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a884:	4413      	add	r3, r2
 800a886:	6879      	ldr	r1, [r7, #4]
 800a888:	4618      	mov	r0, r3
 800a88a:	f7ff fb6f 	bl	8009f6c <st_dword>
			fs->wflag = 1;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2201      	movs	r2, #1
 800a892:	70da      	strb	r2, [r3, #3]
			break;
 800a894:	e006      	b.n	800a8a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a896:	bf00      	nop
 800a898:	e004      	b.n	800a8a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a89a:	bf00      	nop
 800a89c:	e002      	b.n	800a8a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a89e:	bf00      	nop
 800a8a0:	e000      	b.n	800a8a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a8a2:	bf00      	nop
		}
	}
	return res;
 800a8a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3724      	adds	r7, #36	; 0x24
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd90      	pop	{r4, r7, pc}

0800a8ae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b088      	sub	sp, #32
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	60f8      	str	r0, [r7, #12]
 800a8b6:	60b9      	str	r1, [r7, #8]
 800a8b8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d904      	bls.n	800a8d4 <remove_chain+0x26>
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d301      	bcc.n	800a8d8 <remove_chain+0x2a>
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	e04b      	b.n	800a970 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00c      	beq.n	800a8f8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a8de:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e2:	6879      	ldr	r1, [r7, #4]
 800a8e4:	69b8      	ldr	r0, [r7, #24]
 800a8e6:	f7ff fefb 	bl	800a6e0 <put_fat>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a8ee:	7ffb      	ldrb	r3, [r7, #31]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d001      	beq.n	800a8f8 <remove_chain+0x4a>
 800a8f4:	7ffb      	ldrb	r3, [r7, #31]
 800a8f6:	e03b      	b.n	800a970 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a8f8:	68b9      	ldr	r1, [r7, #8]
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f7ff fe4b 	bl	800a596 <get_fat>
 800a900:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d031      	beq.n	800a96c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d101      	bne.n	800a912 <remove_chain+0x64>
 800a90e:	2302      	movs	r3, #2
 800a910:	e02e      	b.n	800a970 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a918:	d101      	bne.n	800a91e <remove_chain+0x70>
 800a91a:	2301      	movs	r3, #1
 800a91c:	e028      	b.n	800a970 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a91e:	2200      	movs	r2, #0
 800a920:	68b9      	ldr	r1, [r7, #8]
 800a922:	69b8      	ldr	r0, [r7, #24]
 800a924:	f7ff fedc 	bl	800a6e0 <put_fat>
 800a928:	4603      	mov	r3, r0
 800a92a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a92c:	7ffb      	ldrb	r3, [r7, #31]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <remove_chain+0x88>
 800a932:	7ffb      	ldrb	r3, [r7, #31]
 800a934:	e01c      	b.n	800a970 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	691a      	ldr	r2, [r3, #16]
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	695b      	ldr	r3, [r3, #20]
 800a93e:	3b02      	subs	r3, #2
 800a940:	429a      	cmp	r2, r3
 800a942:	d20b      	bcs.n	800a95c <remove_chain+0xae>
			fs->free_clst++;
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	1c5a      	adds	r2, r3, #1
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	791b      	ldrb	r3, [r3, #4]
 800a952:	f043 0301 	orr.w	r3, r3, #1
 800a956:	b2da      	uxtb	r2, r3
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	695b      	ldr	r3, [r3, #20]
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	429a      	cmp	r2, r3
 800a968:	d3c6      	bcc.n	800a8f8 <remove_chain+0x4a>
 800a96a:	e000      	b.n	800a96e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a96c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3720      	adds	r7, #32
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b088      	sub	sp, #32
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10d      	bne.n	800a9aa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d004      	beq.n	800a9a4 <create_chain+0x2c>
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	695b      	ldr	r3, [r3, #20]
 800a99e:	69ba      	ldr	r2, [r7, #24]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d31b      	bcc.n	800a9dc <create_chain+0x64>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	61bb      	str	r3, [r7, #24]
 800a9a8:	e018      	b.n	800a9dc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a9aa:	6839      	ldr	r1, [r7, #0]
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f7ff fdf2 	bl	800a596 <get_fat>
 800a9b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d801      	bhi.n	800a9be <create_chain+0x46>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e070      	b.n	800aaa0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c4:	d101      	bne.n	800a9ca <create_chain+0x52>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	e06a      	b.n	800aaa0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d201      	bcs.n	800a9d8 <create_chain+0x60>
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	e063      	b.n	800aaa0 <create_chain+0x128>
		scl = clst;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	695b      	ldr	r3, [r3, #20]
 800a9ea:	69fa      	ldr	r2, [r7, #28]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d307      	bcc.n	800aa00 <create_chain+0x88>
				ncl = 2;
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a9f4:	69fa      	ldr	r2, [r7, #28]
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d901      	bls.n	800aa00 <create_chain+0x88>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e04f      	b.n	800aaa0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aa00:	69f9      	ldr	r1, [r7, #28]
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7ff fdc7 	bl	800a596 <get_fat>
 800aa08:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00e      	beq.n	800aa2e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d003      	beq.n	800aa1e <create_chain+0xa6>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1c:	d101      	bne.n	800aa22 <create_chain+0xaa>
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	e03e      	b.n	800aaa0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800aa22:	69fa      	ldr	r2, [r7, #28]
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d1da      	bne.n	800a9e0 <create_chain+0x68>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	e038      	b.n	800aaa0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800aa2e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aa30:	f04f 32ff 	mov.w	r2, #4294967295
 800aa34:	69f9      	ldr	r1, [r7, #28]
 800aa36:	6938      	ldr	r0, [r7, #16]
 800aa38:	f7ff fe52 	bl	800a6e0 <put_fat>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800aa40:	7dfb      	ldrb	r3, [r7, #23]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d109      	bne.n	800aa5a <create_chain+0xe2>
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d006      	beq.n	800aa5a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800aa4c:	69fa      	ldr	r2, [r7, #28]
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6938      	ldr	r0, [r7, #16]
 800aa52:	f7ff fe45 	bl	800a6e0 <put_fat>
 800aa56:	4603      	mov	r3, r0
 800aa58:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800aa5a:	7dfb      	ldrb	r3, [r7, #23]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d116      	bne.n	800aa8e <create_chain+0x116>
		fs->last_clst = ncl;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	69fa      	ldr	r2, [r7, #28]
 800aa64:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	691a      	ldr	r2, [r3, #16]
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	3b02      	subs	r3, #2
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d804      	bhi.n	800aa7e <create_chain+0x106>
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	1e5a      	subs	r2, r3, #1
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	791b      	ldrb	r3, [r3, #4]
 800aa82:	f043 0301 	orr.w	r3, r3, #1
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	711a      	strb	r2, [r3, #4]
 800aa8c:	e007      	b.n	800aa9e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800aa8e:	7dfb      	ldrb	r3, [r7, #23]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d102      	bne.n	800aa9a <create_chain+0x122>
 800aa94:	f04f 33ff 	mov.w	r3, #4294967295
 800aa98:	e000      	b.n	800aa9c <create_chain+0x124>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800aa9e:	69fb      	ldr	r3, [r7, #28]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3720      	adds	r7, #32
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b087      	sub	sp, #28
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aabc:	3304      	adds	r3, #4
 800aabe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	0a5b      	lsrs	r3, r3, #9
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	8952      	ldrh	r2, [r2, #10]
 800aac8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aacc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	1d1a      	adds	r2, r3, #4
 800aad2:	613a      	str	r2, [r7, #16]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <clmt_clust+0x3a>
 800aade:	2300      	movs	r3, #0
 800aae0:	e010      	b.n	800ab04 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d307      	bcc.n	800aafa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	1ad3      	subs	r3, r2, r3
 800aaf0:	617b      	str	r3, [r7, #20]
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aaf8:	e7e9      	b.n	800aace <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800aafa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	4413      	add	r3, r2
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	371c      	adds	r7, #28
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab26:	d204      	bcs.n	800ab32 <dir_sdi+0x22>
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	f003 031f 	and.w	r3, r3, #31
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d001      	beq.n	800ab36 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ab32:	2302      	movs	r3, #2
 800ab34:	e063      	b.n	800abfe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d106      	bne.n	800ab56 <dir_sdi+0x46>
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d902      	bls.n	800ab56 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab54:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10c      	bne.n	800ab76 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	095b      	lsrs	r3, r3, #5
 800ab60:	693a      	ldr	r2, [r7, #16]
 800ab62:	8912      	ldrh	r2, [r2, #8]
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d301      	bcc.n	800ab6c <dir_sdi+0x5c>
 800ab68:	2302      	movs	r3, #2
 800ab6a:	e048      	b.n	800abfe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	61da      	str	r2, [r3, #28]
 800ab74:	e029      	b.n	800abca <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	895b      	ldrh	r3, [r3, #10]
 800ab7a:	025b      	lsls	r3, r3, #9
 800ab7c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ab7e:	e019      	b.n	800abb4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6979      	ldr	r1, [r7, #20]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7ff fd06 	bl	800a596 <get_fat>
 800ab8a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab92:	d101      	bne.n	800ab98 <dir_sdi+0x88>
 800ab94:	2301      	movs	r3, #1
 800ab96:	e032      	b.n	800abfe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d904      	bls.n	800aba8 <dir_sdi+0x98>
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	695b      	ldr	r3, [r3, #20]
 800aba2:	697a      	ldr	r2, [r7, #20]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d301      	bcc.n	800abac <dir_sdi+0x9c>
 800aba8:	2302      	movs	r3, #2
 800abaa:	e028      	b.n	800abfe <dir_sdi+0xee>
			ofs -= csz;
 800abac:	683a      	ldr	r2, [r7, #0]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d2e1      	bcs.n	800ab80 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800abbc:	6979      	ldr	r1, [r7, #20]
 800abbe:	6938      	ldr	r0, [r7, #16]
 800abc0:	f7ff fcca 	bl	800a558 <clust2sect>
 800abc4:	4602      	mov	r2, r0
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	69db      	ldr	r3, [r3, #28]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <dir_sdi+0xcc>
 800abd8:	2302      	movs	r3, #2
 800abda:	e010      	b.n	800abfe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	69da      	ldr	r2, [r3, #28]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	0a5b      	lsrs	r3, r3, #9
 800abe4:	441a      	add	r2, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abf6:	441a      	add	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3718      	adds	r7, #24
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b086      	sub	sp, #24
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	695b      	ldr	r3, [r3, #20]
 800ac1a:	3320      	adds	r3, #32
 800ac1c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	69db      	ldr	r3, [r3, #28]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d003      	beq.n	800ac2e <dir_next+0x28>
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac2c:	d301      	bcc.n	800ac32 <dir_next+0x2c>
 800ac2e:	2304      	movs	r3, #4
 800ac30:	e0aa      	b.n	800ad88 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f040 8098 	bne.w	800ad6e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	69db      	ldr	r3, [r3, #28]
 800ac42:	1c5a      	adds	r2, r3, #1
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10b      	bne.n	800ac68 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	095b      	lsrs	r3, r3, #5
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	8912      	ldrh	r2, [r2, #8]
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	f0c0 8088 	bcc.w	800ad6e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	61da      	str	r2, [r3, #28]
 800ac64:	2304      	movs	r3, #4
 800ac66:	e08f      	b.n	800ad88 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	0a5b      	lsrs	r3, r3, #9
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	8952      	ldrh	r2, [r2, #10]
 800ac70:	3a01      	subs	r2, #1
 800ac72:	4013      	ands	r3, r2
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d17a      	bne.n	800ad6e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	699b      	ldr	r3, [r3, #24]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	4610      	mov	r0, r2
 800ac82:	f7ff fc88 	bl	800a596 <get_fat>
 800ac86:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d801      	bhi.n	800ac92 <dir_next+0x8c>
 800ac8e:	2302      	movs	r3, #2
 800ac90:	e07a      	b.n	800ad88 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac98:	d101      	bne.n	800ac9e <dir_next+0x98>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e074      	b.n	800ad88 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	695b      	ldr	r3, [r3, #20]
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d358      	bcc.n	800ad5a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d104      	bne.n	800acb8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	61da      	str	r2, [r3, #28]
 800acb4:	2304      	movs	r3, #4
 800acb6:	e067      	b.n	800ad88 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	699b      	ldr	r3, [r3, #24]
 800acbe:	4619      	mov	r1, r3
 800acc0:	4610      	mov	r0, r2
 800acc2:	f7ff fe59 	bl	800a978 <create_chain>
 800acc6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <dir_next+0xcc>
 800acce:	2307      	movs	r3, #7
 800acd0:	e05a      	b.n	800ad88 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d101      	bne.n	800acdc <dir_next+0xd6>
 800acd8:	2302      	movs	r3, #2
 800acda:	e055      	b.n	800ad88 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace2:	d101      	bne.n	800ace8 <dir_next+0xe2>
 800ace4:	2301      	movs	r3, #1
 800ace6:	e04f      	b.n	800ad88 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f7ff fb55 	bl	800a398 <sync_window>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d001      	beq.n	800acf8 <dir_next+0xf2>
 800acf4:	2301      	movs	r3, #1
 800acf6:	e047      	b.n	800ad88 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	3330      	adds	r3, #48	; 0x30
 800acfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad00:	2100      	movs	r1, #0
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7ff f97f 	bl	800a006 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ad08:	2300      	movs	r3, #0
 800ad0a:	613b      	str	r3, [r7, #16]
 800ad0c:	6979      	ldr	r1, [r7, #20]
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f7ff fc22 	bl	800a558 <clust2sect>
 800ad14:	4602      	mov	r2, r0
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	62da      	str	r2, [r3, #44]	; 0x2c
 800ad1a:	e012      	b.n	800ad42 <dir_next+0x13c>
						fs->wflag = 1;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f7ff fb38 	bl	800a398 <sync_window>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d001      	beq.n	800ad32 <dir_next+0x12c>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e02a      	b.n	800ad88 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	3301      	adds	r3, #1
 800ad36:	613b      	str	r3, [r7, #16]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad3c:	1c5a      	adds	r2, r3, #1
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	62da      	str	r2, [r3, #44]	; 0x2c
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	895b      	ldrh	r3, [r3, #10]
 800ad46:	461a      	mov	r2, r3
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d3e6      	bcc.n	800ad1c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	1ad2      	subs	r2, r2, r3
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	697a      	ldr	r2, [r7, #20]
 800ad5e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ad60:	6979      	ldr	r1, [r7, #20]
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f7ff fbf8 	bl	800a558 <clust2sect>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	68ba      	ldr	r2, [r7, #8]
 800ad72:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad80:	441a      	add	r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ada0:	2100      	movs	r1, #0
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f7ff feb4 	bl	800ab10 <dir_sdi>
 800ada8:	4603      	mov	r3, r0
 800adaa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800adac:	7dfb      	ldrb	r3, [r7, #23]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d12b      	bne.n	800ae0a <dir_alloc+0x7a>
		n = 0;
 800adb2:	2300      	movs	r3, #0
 800adb4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	69db      	ldr	r3, [r3, #28]
 800adba:	4619      	mov	r1, r3
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f7ff fb2f 	bl	800a420 <move_window>
 800adc2:	4603      	mov	r3, r0
 800adc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800adc6:	7dfb      	ldrb	r3, [r7, #23]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d11d      	bne.n	800ae08 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a1b      	ldr	r3, [r3, #32]
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	2be5      	cmp	r3, #229	; 0xe5
 800add4:	d004      	beq.n	800ade0 <dir_alloc+0x50>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a1b      	ldr	r3, [r3, #32]
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d107      	bne.n	800adf0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	3301      	adds	r3, #1
 800ade4:	613b      	str	r3, [r7, #16]
 800ade6:	693a      	ldr	r2, [r7, #16]
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	429a      	cmp	r2, r3
 800adec:	d102      	bne.n	800adf4 <dir_alloc+0x64>
 800adee:	e00c      	b.n	800ae0a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800adf0:	2300      	movs	r3, #0
 800adf2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800adf4:	2101      	movs	r1, #1
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f7ff ff05 	bl	800ac06 <dir_next>
 800adfc:	4603      	mov	r3, r0
 800adfe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ae00:	7dfb      	ldrb	r3, [r7, #23]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d0d7      	beq.n	800adb6 <dir_alloc+0x26>
 800ae06:	e000      	b.n	800ae0a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ae08:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ae0a:	7dfb      	ldrb	r3, [r7, #23]
 800ae0c:	2b04      	cmp	r3, #4
 800ae0e:	d101      	bne.n	800ae14 <dir_alloc+0x84>
 800ae10:	2307      	movs	r3, #7
 800ae12:	75fb      	strb	r3, [r7, #23]
	return res;
 800ae14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3718      	adds	r7, #24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b084      	sub	sp, #16
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	331a      	adds	r3, #26
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7ff f847 	bl	8009ec0 <ld_word>
 800ae32:	4603      	mov	r3, r0
 800ae34:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	2b03      	cmp	r3, #3
 800ae3c:	d109      	bne.n	800ae52 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	3314      	adds	r3, #20
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7ff f83c 	bl	8009ec0 <ld_word>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	041b      	lsls	r3, r3, #16
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ae52:	68fb      	ldr	r3, [r7, #12]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	331a      	adds	r3, #26
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	b292      	uxth	r2, r2
 800ae70:	4611      	mov	r1, r2
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7ff f85f 	bl	8009f36 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	d109      	bne.n	800ae94 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	f103 0214 	add.w	r2, r3, #20
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	0c1b      	lsrs	r3, r3, #16
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	4610      	mov	r0, r2
 800ae90:	f7ff f851 	bl	8009f36 <st_word>
	}
}
 800ae94:	bf00      	nop
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aeaa:	2100      	movs	r1, #0
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff fe2f 	bl	800ab10 <dir_sdi>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aeb6:	7dfb      	ldrb	r3, [r7, #23]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d001      	beq.n	800aec0 <dir_find+0x24>
 800aebc:	7dfb      	ldrb	r3, [r7, #23]
 800aebe:	e03e      	b.n	800af3e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	69db      	ldr	r3, [r3, #28]
 800aec4:	4619      	mov	r1, r3
 800aec6:	6938      	ldr	r0, [r7, #16]
 800aec8:	f7ff faaa 	bl	800a420 <move_window>
 800aecc:	4603      	mov	r3, r0
 800aece:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d12f      	bne.n	800af36 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aede:	7bfb      	ldrb	r3, [r7, #15]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d102      	bne.n	800aeea <dir_find+0x4e>
 800aee4:	2304      	movs	r3, #4
 800aee6:	75fb      	strb	r3, [r7, #23]
 800aee8:	e028      	b.n	800af3c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a1b      	ldr	r3, [r3, #32]
 800aeee:	330b      	adds	r3, #11
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a1b      	ldr	r3, [r3, #32]
 800af00:	330b      	adds	r3, #11
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	f003 0308 	and.w	r3, r3, #8
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d10a      	bne.n	800af22 <dir_find+0x86>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6a18      	ldr	r0, [r3, #32]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	3324      	adds	r3, #36	; 0x24
 800af14:	220b      	movs	r2, #11
 800af16:	4619      	mov	r1, r3
 800af18:	f7ff f88f 	bl	800a03a <mem_cmp>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00b      	beq.n	800af3a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800af22:	2100      	movs	r1, #0
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7ff fe6e 	bl	800ac06 <dir_next>
 800af2a:	4603      	mov	r3, r0
 800af2c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800af2e:	7dfb      	ldrb	r3, [r7, #23]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d0c5      	beq.n	800aec0 <dir_find+0x24>
 800af34:	e002      	b.n	800af3c <dir_find+0xa0>
		if (res != FR_OK) break;
 800af36:	bf00      	nop
 800af38:	e000      	b.n	800af3c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800af3a:	bf00      	nop

	return res;
 800af3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3718      	adds	r7, #24
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b084      	sub	sp, #16
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800af54:	2101      	movs	r1, #1
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7ff ff1a 	bl	800ad90 <dir_alloc>
 800af5c:	4603      	mov	r3, r0
 800af5e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800af60:	7bfb      	ldrb	r3, [r7, #15]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d11c      	bne.n	800afa0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	4619      	mov	r1, r3
 800af6c:	68b8      	ldr	r0, [r7, #8]
 800af6e:	f7ff fa57 	bl	800a420 <move_window>
 800af72:	4603      	mov	r3, r0
 800af74:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800af76:	7bfb      	ldrb	r3, [r7, #15]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d111      	bne.n	800afa0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a1b      	ldr	r3, [r3, #32]
 800af80:	2220      	movs	r2, #32
 800af82:	2100      	movs	r1, #0
 800af84:	4618      	mov	r0, r3
 800af86:	f7ff f83e 	bl	800a006 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a18      	ldr	r0, [r3, #32]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	3324      	adds	r3, #36	; 0x24
 800af92:	220b      	movs	r2, #11
 800af94:	4619      	mov	r1, r3
 800af96:	f7ff f815 	bl	8009fc4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	2201      	movs	r2, #1
 800af9e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800afa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
	...

0800afac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b088      	sub	sp, #32
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	60fb      	str	r3, [r7, #12]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	3324      	adds	r3, #36	; 0x24
 800afc0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800afc2:	220b      	movs	r2, #11
 800afc4:	2120      	movs	r1, #32
 800afc6:	68b8      	ldr	r0, [r7, #8]
 800afc8:	f7ff f81d 	bl	800a006 <mem_set>
	si = i = 0; ni = 8;
 800afcc:	2300      	movs	r3, #0
 800afce:	613b      	str	r3, [r7, #16]
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	617b      	str	r3, [r7, #20]
 800afd4:	2308      	movs	r3, #8
 800afd6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	1c5a      	adds	r2, r3, #1
 800afdc:	617a      	str	r2, [r7, #20]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	4413      	add	r3, r2
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800afe6:	7ffb      	ldrb	r3, [r7, #31]
 800afe8:	2b20      	cmp	r3, #32
 800afea:	d94e      	bls.n	800b08a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800afec:	7ffb      	ldrb	r3, [r7, #31]
 800afee:	2b2f      	cmp	r3, #47	; 0x2f
 800aff0:	d006      	beq.n	800b000 <create_name+0x54>
 800aff2:	7ffb      	ldrb	r3, [r7, #31]
 800aff4:	2b5c      	cmp	r3, #92	; 0x5c
 800aff6:	d110      	bne.n	800b01a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aff8:	e002      	b.n	800b000 <create_name+0x54>
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	3301      	adds	r3, #1
 800affe:	617b      	str	r3, [r7, #20]
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	4413      	add	r3, r2
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	2b2f      	cmp	r3, #47	; 0x2f
 800b00a:	d0f6      	beq.n	800affa <create_name+0x4e>
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	4413      	add	r3, r2
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	2b5c      	cmp	r3, #92	; 0x5c
 800b016:	d0f0      	beq.n	800affa <create_name+0x4e>
			break;
 800b018:	e038      	b.n	800b08c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b01a:	7ffb      	ldrb	r3, [r7, #31]
 800b01c:	2b2e      	cmp	r3, #46	; 0x2e
 800b01e:	d003      	beq.n	800b028 <create_name+0x7c>
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	429a      	cmp	r2, r3
 800b026:	d30c      	bcc.n	800b042 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	2b0b      	cmp	r3, #11
 800b02c:	d002      	beq.n	800b034 <create_name+0x88>
 800b02e:	7ffb      	ldrb	r3, [r7, #31]
 800b030:	2b2e      	cmp	r3, #46	; 0x2e
 800b032:	d001      	beq.n	800b038 <create_name+0x8c>
 800b034:	2306      	movs	r3, #6
 800b036:	e044      	b.n	800b0c2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b038:	2308      	movs	r3, #8
 800b03a:	613b      	str	r3, [r7, #16]
 800b03c:	230b      	movs	r3, #11
 800b03e:	61bb      	str	r3, [r7, #24]
			continue;
 800b040:	e022      	b.n	800b088 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b042:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b046:	2b00      	cmp	r3, #0
 800b048:	da04      	bge.n	800b054 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b04a:	7ffb      	ldrb	r3, [r7, #31]
 800b04c:	3b80      	subs	r3, #128	; 0x80
 800b04e:	4a1f      	ldr	r2, [pc, #124]	; (800b0cc <create_name+0x120>)
 800b050:	5cd3      	ldrb	r3, [r2, r3]
 800b052:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b054:	7ffb      	ldrb	r3, [r7, #31]
 800b056:	4619      	mov	r1, r3
 800b058:	481d      	ldr	r0, [pc, #116]	; (800b0d0 <create_name+0x124>)
 800b05a:	f7ff f815 	bl	800a088 <chk_chr>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d001      	beq.n	800b068 <create_name+0xbc>
 800b064:	2306      	movs	r3, #6
 800b066:	e02c      	b.n	800b0c2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b068:	7ffb      	ldrb	r3, [r7, #31]
 800b06a:	2b60      	cmp	r3, #96	; 0x60
 800b06c:	d905      	bls.n	800b07a <create_name+0xce>
 800b06e:	7ffb      	ldrb	r3, [r7, #31]
 800b070:	2b7a      	cmp	r3, #122	; 0x7a
 800b072:	d802      	bhi.n	800b07a <create_name+0xce>
 800b074:	7ffb      	ldrb	r3, [r7, #31]
 800b076:	3b20      	subs	r3, #32
 800b078:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	1c5a      	adds	r2, r3, #1
 800b07e:	613a      	str	r2, [r7, #16]
 800b080:	68ba      	ldr	r2, [r7, #8]
 800b082:	4413      	add	r3, r2
 800b084:	7ffa      	ldrb	r2, [r7, #31]
 800b086:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b088:	e7a6      	b.n	800afd8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b08a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	441a      	add	r2, r3
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d101      	bne.n	800b0a0 <create_name+0xf4>
 800b09c:	2306      	movs	r3, #6
 800b09e:	e010      	b.n	800b0c2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	2be5      	cmp	r3, #229	; 0xe5
 800b0a6:	d102      	bne.n	800b0ae <create_name+0x102>
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2205      	movs	r2, #5
 800b0ac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b0ae:	7ffb      	ldrb	r3, [r7, #31]
 800b0b0:	2b20      	cmp	r3, #32
 800b0b2:	d801      	bhi.n	800b0b8 <create_name+0x10c>
 800b0b4:	2204      	movs	r2, #4
 800b0b6:	e000      	b.n	800b0ba <create_name+0x10e>
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	330b      	adds	r3, #11
 800b0be:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b0c0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3720      	adds	r7, #32
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	08012464 	.word	0x08012464
 800b0d0:	0800f8fc 	.word	0x0800f8fc

0800b0d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b0e8:	e002      	b.n	800b0f0 <follow_path+0x1c>
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	603b      	str	r3, [r7, #0]
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	2b2f      	cmp	r3, #47	; 0x2f
 800b0f6:	d0f8      	beq.n	800b0ea <follow_path+0x16>
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	2b5c      	cmp	r3, #92	; 0x5c
 800b0fe:	d0f4      	beq.n	800b0ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	2200      	movs	r2, #0
 800b104:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	2b1f      	cmp	r3, #31
 800b10c:	d80a      	bhi.n	800b124 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2280      	movs	r2, #128	; 0x80
 800b112:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b116:	2100      	movs	r1, #0
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7ff fcf9 	bl	800ab10 <dir_sdi>
 800b11e:	4603      	mov	r3, r0
 800b120:	75fb      	strb	r3, [r7, #23]
 800b122:	e043      	b.n	800b1ac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b124:	463b      	mov	r3, r7
 800b126:	4619      	mov	r1, r3
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f7ff ff3f 	bl	800afac <create_name>
 800b12e:	4603      	mov	r3, r0
 800b130:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b132:	7dfb      	ldrb	r3, [r7, #23]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d134      	bne.n	800b1a2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f7ff feaf 	bl	800ae9c <dir_find>
 800b13e:	4603      	mov	r3, r0
 800b140:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b148:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b14a:	7dfb      	ldrb	r3, [r7, #23]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00a      	beq.n	800b166 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b150:	7dfb      	ldrb	r3, [r7, #23]
 800b152:	2b04      	cmp	r3, #4
 800b154:	d127      	bne.n	800b1a6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b156:	7afb      	ldrb	r3, [r7, #11]
 800b158:	f003 0304 	and.w	r3, r3, #4
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d122      	bne.n	800b1a6 <follow_path+0xd2>
 800b160:	2305      	movs	r3, #5
 800b162:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b164:	e01f      	b.n	800b1a6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b166:	7afb      	ldrb	r3, [r7, #11]
 800b168:	f003 0304 	and.w	r3, r3, #4
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d11c      	bne.n	800b1aa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	799b      	ldrb	r3, [r3, #6]
 800b174:	f003 0310 	and.w	r3, r3, #16
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d102      	bne.n	800b182 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b17c:	2305      	movs	r3, #5
 800b17e:	75fb      	strb	r3, [r7, #23]
 800b180:	e014      	b.n	800b1ac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	695b      	ldr	r3, [r3, #20]
 800b18c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b190:	4413      	add	r3, r2
 800b192:	4619      	mov	r1, r3
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f7ff fe42 	bl	800ae1e <ld_clust>
 800b19a:	4602      	mov	r2, r0
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b1a0:	e7c0      	b.n	800b124 <follow_path+0x50>
			if (res != FR_OK) break;
 800b1a2:	bf00      	nop
 800b1a4:	e002      	b.n	800b1ac <follow_path+0xd8>
				break;
 800b1a6:	bf00      	nop
 800b1a8:	e000      	b.n	800b1ac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b1aa:	bf00      	nop
			}
		}
	}

	return res;
 800b1ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3718      	adds	r7, #24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b087      	sub	sp, #28
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b1be:	f04f 33ff 	mov.w	r3, #4294967295
 800b1c2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d031      	beq.n	800b230 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	617b      	str	r3, [r7, #20]
 800b1d2:	e002      	b.n	800b1da <get_ldnumber+0x24>
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	617b      	str	r3, [r7, #20]
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	2b20      	cmp	r3, #32
 800b1e0:	d903      	bls.n	800b1ea <get_ldnumber+0x34>
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	2b3a      	cmp	r3, #58	; 0x3a
 800b1e8:	d1f4      	bne.n	800b1d4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	2b3a      	cmp	r3, #58	; 0x3a
 800b1f0:	d11c      	bne.n	800b22c <get_ldnumber+0x76>
			tp = *path;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	1c5a      	adds	r2, r3, #1
 800b1fc:	60fa      	str	r2, [r7, #12]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	3b30      	subs	r3, #48	; 0x30
 800b202:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	2b09      	cmp	r3, #9
 800b208:	d80e      	bhi.n	800b228 <get_ldnumber+0x72>
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d10a      	bne.n	800b228 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d107      	bne.n	800b228 <get_ldnumber+0x72>
					vol = (int)i;
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	3301      	adds	r3, #1
 800b220:	617b      	str	r3, [r7, #20]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	697a      	ldr	r2, [r7, #20]
 800b226:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	e002      	b.n	800b232 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b22c:	2300      	movs	r3, #0
 800b22e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b230:	693b      	ldr	r3, [r7, #16]
}
 800b232:	4618      	mov	r0, r3
 800b234:	371c      	adds	r7, #28
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr
	...

0800b240 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	70da      	strb	r2, [r3, #3]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f04f 32ff 	mov.w	r2, #4294967295
 800b256:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b258:	6839      	ldr	r1, [r7, #0]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7ff f8e0 	bl	800a420 <move_window>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d001      	beq.n	800b26a <check_fs+0x2a>
 800b266:	2304      	movs	r3, #4
 800b268:	e038      	b.n	800b2dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	3330      	adds	r3, #48	; 0x30
 800b26e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b272:	4618      	mov	r0, r3
 800b274:	f7fe fe24 	bl	8009ec0 <ld_word>
 800b278:	4603      	mov	r3, r0
 800b27a:	461a      	mov	r2, r3
 800b27c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b280:	429a      	cmp	r2, r3
 800b282:	d001      	beq.n	800b288 <check_fs+0x48>
 800b284:	2303      	movs	r3, #3
 800b286:	e029      	b.n	800b2dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b28e:	2be9      	cmp	r3, #233	; 0xe9
 800b290:	d009      	beq.n	800b2a6 <check_fs+0x66>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b298:	2beb      	cmp	r3, #235	; 0xeb
 800b29a:	d11e      	bne.n	800b2da <check_fs+0x9a>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b2a2:	2b90      	cmp	r3, #144	; 0x90
 800b2a4:	d119      	bne.n	800b2da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3330      	adds	r3, #48	; 0x30
 800b2aa:	3336      	adds	r3, #54	; 0x36
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7fe fe1f 	bl	8009ef0 <ld_dword>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b2b8:	4a0a      	ldr	r2, [pc, #40]	; (800b2e4 <check_fs+0xa4>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d101      	bne.n	800b2c2 <check_fs+0x82>
 800b2be:	2300      	movs	r3, #0
 800b2c0:	e00c      	b.n	800b2dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	3330      	adds	r3, #48	; 0x30
 800b2c6:	3352      	adds	r3, #82	; 0x52
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7fe fe11 	bl	8009ef0 <ld_dword>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	4b05      	ldr	r3, [pc, #20]	; (800b2e8 <check_fs+0xa8>)
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d101      	bne.n	800b2da <check_fs+0x9a>
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	e000      	b.n	800b2dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b2da:	2302      	movs	r3, #2
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	00544146 	.word	0x00544146
 800b2e8:	33544146 	.word	0x33544146

0800b2ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b096      	sub	sp, #88	; 0x58
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f7ff ff58 	bl	800b1b6 <get_ldnumber>
 800b306:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	da01      	bge.n	800b312 <find_volume+0x26>
 800b30e:	230b      	movs	r3, #11
 800b310:	e22e      	b.n	800b770 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b312:	4aa8      	ldr	r2, [pc, #672]	; (800b5b4 <find_volume+0x2c8>)
 800b314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b31a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d101      	bne.n	800b326 <find_volume+0x3a>
 800b322:	230c      	movs	r3, #12
 800b324:	e224      	b.n	800b770 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b32a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b32c:	79fb      	ldrb	r3, [r7, #7]
 800b32e:	f023 0301 	bic.w	r3, r3, #1
 800b332:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d01a      	beq.n	800b372 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33e:	785b      	ldrb	r3, [r3, #1]
 800b340:	4618      	mov	r0, r3
 800b342:	f7fe fd1f 	bl	8009d84 <disk_status>
 800b346:	4603      	mov	r3, r0
 800b348:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b34c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b350:	f003 0301 	and.w	r3, r3, #1
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10c      	bne.n	800b372 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b358:	79fb      	ldrb	r3, [r7, #7]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d007      	beq.n	800b36e <find_volume+0x82>
 800b35e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b362:	f003 0304 	and.w	r3, r3, #4
 800b366:	2b00      	cmp	r3, #0
 800b368:	d001      	beq.n	800b36e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b36a:	230a      	movs	r3, #10
 800b36c:	e200      	b.n	800b770 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800b36e:	2300      	movs	r3, #0
 800b370:	e1fe      	b.n	800b770 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b374:	2200      	movs	r2, #0
 800b376:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b37a:	b2da      	uxtb	r2, r3
 800b37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b382:	785b      	ldrb	r3, [r3, #1]
 800b384:	4618      	mov	r0, r3
 800b386:	f7fe fd17 	bl	8009db8 <disk_initialize>
 800b38a:	4603      	mov	r3, r0
 800b38c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b390:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b394:	f003 0301 	and.w	r3, r3, #1
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d001      	beq.n	800b3a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b39c:	2303      	movs	r3, #3
 800b39e:	e1e7      	b.n	800b770 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b3a0:	79fb      	ldrb	r3, [r7, #7]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d007      	beq.n	800b3b6 <find_volume+0xca>
 800b3a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b3aa:	f003 0304 	and.w	r3, r3, #4
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d001      	beq.n	800b3b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b3b2:	230a      	movs	r3, #10
 800b3b4:	e1dc      	b.n	800b770 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b3ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b3bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3be:	f7ff ff3f 	bl	800b240 <check_fs>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b3c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3cc:	2b02      	cmp	r3, #2
 800b3ce:	d14b      	bne.n	800b468 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	643b      	str	r3, [r7, #64]	; 0x40
 800b3d4:	e01f      	b.n	800b416 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b3dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3de:	011b      	lsls	r3, r3, #4
 800b3e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b3e4:	4413      	add	r3, r2
 800b3e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ea:	3304      	adds	r3, #4
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d006      	beq.n	800b400 <find_volume+0x114>
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f4:	3308      	adds	r3, #8
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fe fd7a 	bl	8009ef0 <ld_dword>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	e000      	b.n	800b402 <find_volume+0x116>
 800b400:	2200      	movs	r2, #0
 800b402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b40a:	440b      	add	r3, r1
 800b40c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b412:	3301      	adds	r3, #1
 800b414:	643b      	str	r3, [r7, #64]	; 0x40
 800b416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b418:	2b03      	cmp	r3, #3
 800b41a:	d9dc      	bls.n	800b3d6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b41c:	2300      	movs	r3, #0
 800b41e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b422:	2b00      	cmp	r3, #0
 800b424:	d002      	beq.n	800b42c <find_volume+0x140>
 800b426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b428:	3b01      	subs	r3, #1
 800b42a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b42c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b434:	4413      	add	r3, r2
 800b436:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b43a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b43c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d005      	beq.n	800b44e <find_volume+0x162>
 800b442:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b444:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b446:	f7ff fefb 	bl	800b240 <check_fs>
 800b44a:	4603      	mov	r3, r0
 800b44c:	e000      	b.n	800b450 <find_volume+0x164>
 800b44e:	2303      	movs	r3, #3
 800b450:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b454:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d905      	bls.n	800b468 <find_volume+0x17c>
 800b45c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b45e:	3301      	adds	r3, #1
 800b460:	643b      	str	r3, [r7, #64]	; 0x40
 800b462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b464:	2b03      	cmp	r3, #3
 800b466:	d9e1      	bls.n	800b42c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b468:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b46c:	2b04      	cmp	r3, #4
 800b46e:	d101      	bne.n	800b474 <find_volume+0x188>
 800b470:	2301      	movs	r3, #1
 800b472:	e17d      	b.n	800b770 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b474:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d901      	bls.n	800b480 <find_volume+0x194>
 800b47c:	230d      	movs	r3, #13
 800b47e:	e177      	b.n	800b770 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b482:	3330      	adds	r3, #48	; 0x30
 800b484:	330b      	adds	r3, #11
 800b486:	4618      	mov	r0, r3
 800b488:	f7fe fd1a 	bl	8009ec0 <ld_word>
 800b48c:	4603      	mov	r3, r0
 800b48e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b492:	d001      	beq.n	800b498 <find_volume+0x1ac>
 800b494:	230d      	movs	r3, #13
 800b496:	e16b      	b.n	800b770 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49a:	3330      	adds	r3, #48	; 0x30
 800b49c:	3316      	adds	r3, #22
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7fe fd0e 	bl	8009ec0 <ld_word>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b4a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d106      	bne.n	800b4bc <find_volume+0x1d0>
 800b4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b0:	3330      	adds	r3, #48	; 0x30
 800b4b2:	3324      	adds	r3, #36	; 0x24
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7fe fd1b 	bl	8009ef0 <ld_dword>
 800b4ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ce:	789b      	ldrb	r3, [r3, #2]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d005      	beq.n	800b4e0 <find_volume+0x1f4>
 800b4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d6:	789b      	ldrb	r3, [r3, #2]
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	d001      	beq.n	800b4e0 <find_volume+0x1f4>
 800b4dc:	230d      	movs	r3, #13
 800b4de:	e147      	b.n	800b770 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e2:	789b      	ldrb	r3, [r3, #2]
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4e8:	fb02 f303 	mul.w	r3, r2, r3
 800b4ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fc:	895b      	ldrh	r3, [r3, #10]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d008      	beq.n	800b514 <find_volume+0x228>
 800b502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b504:	895b      	ldrh	r3, [r3, #10]
 800b506:	461a      	mov	r2, r3
 800b508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50a:	895b      	ldrh	r3, [r3, #10]
 800b50c:	3b01      	subs	r3, #1
 800b50e:	4013      	ands	r3, r2
 800b510:	2b00      	cmp	r3, #0
 800b512:	d001      	beq.n	800b518 <find_volume+0x22c>
 800b514:	230d      	movs	r3, #13
 800b516:	e12b      	b.n	800b770 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51a:	3330      	adds	r3, #48	; 0x30
 800b51c:	3311      	adds	r3, #17
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fe fcce 	bl	8009ec0 <ld_word>
 800b524:	4603      	mov	r3, r0
 800b526:	461a      	mov	r2, r3
 800b528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52e:	891b      	ldrh	r3, [r3, #8]
 800b530:	f003 030f 	and.w	r3, r3, #15
 800b534:	b29b      	uxth	r3, r3
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <find_volume+0x252>
 800b53a:	230d      	movs	r3, #13
 800b53c:	e118      	b.n	800b770 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b540:	3330      	adds	r3, #48	; 0x30
 800b542:	3313      	adds	r3, #19
 800b544:	4618      	mov	r0, r3
 800b546:	f7fe fcbb 	bl	8009ec0 <ld_word>
 800b54a:	4603      	mov	r3, r0
 800b54c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b54e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b550:	2b00      	cmp	r3, #0
 800b552:	d106      	bne.n	800b562 <find_volume+0x276>
 800b554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b556:	3330      	adds	r3, #48	; 0x30
 800b558:	3320      	adds	r3, #32
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fe fcc8 	bl	8009ef0 <ld_dword>
 800b560:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b564:	3330      	adds	r3, #48	; 0x30
 800b566:	330e      	adds	r3, #14
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fe fca9 	bl	8009ec0 <ld_word>
 800b56e:	4603      	mov	r3, r0
 800b570:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b572:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b574:	2b00      	cmp	r3, #0
 800b576:	d101      	bne.n	800b57c <find_volume+0x290>
 800b578:	230d      	movs	r3, #13
 800b57a:	e0f9      	b.n	800b770 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b57c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b57e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b580:	4413      	add	r3, r2
 800b582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b584:	8912      	ldrh	r2, [r2, #8]
 800b586:	0912      	lsrs	r2, r2, #4
 800b588:	b292      	uxth	r2, r2
 800b58a:	4413      	add	r3, r2
 800b58c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b58e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b592:	429a      	cmp	r2, r3
 800b594:	d201      	bcs.n	800b59a <find_volume+0x2ae>
 800b596:	230d      	movs	r3, #13
 800b598:	e0ea      	b.n	800b770 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b59a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5a2:	8952      	ldrh	r2, [r2, #10]
 800b5a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d103      	bne.n	800b5b8 <find_volume+0x2cc>
 800b5b0:	230d      	movs	r3, #13
 800b5b2:	e0dd      	b.n	800b770 <find_volume+0x484>
 800b5b4:	20000504 	.word	0x20000504
		fmt = FS_FAT32;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d802      	bhi.n	800b5ce <find_volume+0x2e2>
 800b5c8:	2302      	movs	r3, #2
 800b5ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d802      	bhi.n	800b5de <find_volume+0x2f2>
 800b5d8:	2301      	movs	r3, #1
 800b5da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e0:	1c9a      	adds	r2, r3, #2
 800b5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5ea:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b5ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b5ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5f0:	441a      	add	r2, r3
 800b5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b5f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fa:	441a      	add	r2, r3
 800b5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fe:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b600:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b604:	2b03      	cmp	r3, #3
 800b606:	d11e      	bne.n	800b646 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60a:	3330      	adds	r3, #48	; 0x30
 800b60c:	332a      	adds	r3, #42	; 0x2a
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fe fc56 	bl	8009ec0 <ld_word>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d001      	beq.n	800b61e <find_volume+0x332>
 800b61a:	230d      	movs	r3, #13
 800b61c:	e0a8      	b.n	800b770 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b620:	891b      	ldrh	r3, [r3, #8]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d001      	beq.n	800b62a <find_volume+0x33e>
 800b626:	230d      	movs	r3, #13
 800b628:	e0a2      	b.n	800b770 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62c:	3330      	adds	r3, #48	; 0x30
 800b62e:	332c      	adds	r3, #44	; 0x2c
 800b630:	4618      	mov	r0, r3
 800b632:	f7fe fc5d 	bl	8009ef0 <ld_dword>
 800b636:	4602      	mov	r2, r0
 800b638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63e:	695b      	ldr	r3, [r3, #20]
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	647b      	str	r3, [r7, #68]	; 0x44
 800b644:	e01f      	b.n	800b686 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b648:	891b      	ldrh	r3, [r3, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d101      	bne.n	800b652 <find_volume+0x366>
 800b64e:	230d      	movs	r3, #13
 800b650:	e08e      	b.n	800b770 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b654:	6a1a      	ldr	r2, [r3, #32]
 800b656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b658:	441a      	add	r2, r3
 800b65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b65e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b662:	2b02      	cmp	r3, #2
 800b664:	d103      	bne.n	800b66e <find_volume+0x382>
 800b666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b668:	695b      	ldr	r3, [r3, #20]
 800b66a:	005b      	lsls	r3, r3, #1
 800b66c:	e00a      	b.n	800b684 <find_volume+0x398>
 800b66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b670:	695a      	ldr	r2, [r3, #20]
 800b672:	4613      	mov	r3, r2
 800b674:	005b      	lsls	r3, r3, #1
 800b676:	4413      	add	r3, r2
 800b678:	085a      	lsrs	r2, r3, #1
 800b67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67c:	695b      	ldr	r3, [r3, #20]
 800b67e:	f003 0301 	and.w	r3, r3, #1
 800b682:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b684:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b688:	699a      	ldr	r2, [r3, #24]
 800b68a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b68c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b690:	0a5b      	lsrs	r3, r3, #9
 800b692:	429a      	cmp	r2, r3
 800b694:	d201      	bcs.n	800b69a <find_volume+0x3ae>
 800b696:	230d      	movs	r3, #13
 800b698:	e06a      	b.n	800b770 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69c:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a0:	611a      	str	r2, [r3, #16]
 800b6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a4:	691a      	ldr	r2, [r3, #16]
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ac:	2280      	movs	r2, #128	; 0x80
 800b6ae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b6b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6b4:	2b03      	cmp	r3, #3
 800b6b6:	d149      	bne.n	800b74c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ba:	3330      	adds	r3, #48	; 0x30
 800b6bc:	3330      	adds	r3, #48	; 0x30
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7fe fbfe 	bl	8009ec0 <ld_word>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d140      	bne.n	800b74c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b6ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6d2:	f7fe fea5 	bl	800a420 <move_window>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d137      	bne.n	800b74c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6de:	2200      	movs	r2, #0
 800b6e0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e4:	3330      	adds	r3, #48	; 0x30
 800b6e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7fe fbe8 	bl	8009ec0 <ld_word>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d127      	bne.n	800b74c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fe:	3330      	adds	r3, #48	; 0x30
 800b700:	4618      	mov	r0, r3
 800b702:	f7fe fbf5 	bl	8009ef0 <ld_dword>
 800b706:	4602      	mov	r2, r0
 800b708:	4b1b      	ldr	r3, [pc, #108]	; (800b778 <find_volume+0x48c>)
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d11e      	bne.n	800b74c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b710:	3330      	adds	r3, #48	; 0x30
 800b712:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b716:	4618      	mov	r0, r3
 800b718:	f7fe fbea 	bl	8009ef0 <ld_dword>
 800b71c:	4602      	mov	r2, r0
 800b71e:	4b17      	ldr	r3, [pc, #92]	; (800b77c <find_volume+0x490>)
 800b720:	429a      	cmp	r2, r3
 800b722:	d113      	bne.n	800b74c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b726:	3330      	adds	r3, #48	; 0x30
 800b728:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7fe fbdf 	bl	8009ef0 <ld_dword>
 800b732:	4602      	mov	r2, r0
 800b734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b736:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73a:	3330      	adds	r3, #48	; 0x30
 800b73c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b740:	4618      	mov	r0, r3
 800b742:	f7fe fbd5 	bl	8009ef0 <ld_dword>
 800b746:	4602      	mov	r2, r0
 800b748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b752:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b754:	4b0a      	ldr	r3, [pc, #40]	; (800b780 <find_volume+0x494>)
 800b756:	881b      	ldrh	r3, [r3, #0]
 800b758:	3301      	adds	r3, #1
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	4b08      	ldr	r3, [pc, #32]	; (800b780 <find_volume+0x494>)
 800b75e:	801a      	strh	r2, [r3, #0]
 800b760:	4b07      	ldr	r3, [pc, #28]	; (800b780 <find_volume+0x494>)
 800b762:	881a      	ldrh	r2, [r3, #0]
 800b764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b766:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b768:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b76a:	f7fe fdf1 	bl	800a350 <clear_lock>
#endif
	return FR_OK;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3758      	adds	r7, #88	; 0x58
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	41615252 	.word	0x41615252
 800b77c:	61417272 	.word	0x61417272
 800b780:	20000508 	.word	0x20000508

0800b784 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b78e:	2309      	movs	r3, #9
 800b790:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d01c      	beq.n	800b7d2 <validate+0x4e>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d018      	beq.n	800b7d2 <validate+0x4e>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d013      	beq.n	800b7d2 <validate+0x4e>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	889a      	ldrh	r2, [r3, #4]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	88db      	ldrh	r3, [r3, #6]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d10c      	bne.n	800b7d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	785b      	ldrb	r3, [r3, #1]
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7fe fae0 	bl	8009d84 <disk_status>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	f003 0301 	and.w	r3, r3, #1
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d101      	bne.n	800b7d2 <validate+0x4e>
			res = FR_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b7d2:	7bfb      	ldrb	r3, [r7, #15]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d102      	bne.n	800b7de <validate+0x5a>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	e000      	b.n	800b7e0 <validate+0x5c>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	683a      	ldr	r2, [r7, #0]
 800b7e2:	6013      	str	r3, [r2, #0]
	return res;
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
	...

0800b7f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b088      	sub	sp, #32
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b802:	f107 0310 	add.w	r3, r7, #16
 800b806:	4618      	mov	r0, r3
 800b808:	f7ff fcd5 	bl	800b1b6 <get_ldnumber>
 800b80c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	2b00      	cmp	r3, #0
 800b812:	da01      	bge.n	800b818 <f_mount+0x28>
 800b814:	230b      	movs	r3, #11
 800b816:	e02b      	b.n	800b870 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b818:	4a17      	ldr	r2, [pc, #92]	; (800b878 <f_mount+0x88>)
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b820:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d005      	beq.n	800b834 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b828:	69b8      	ldr	r0, [r7, #24]
 800b82a:	f7fe fd91 	bl	800a350 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	2200      	movs	r2, #0
 800b832:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d002      	beq.n	800b840 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2200      	movs	r2, #0
 800b83e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b840:	68fa      	ldr	r2, [r7, #12]
 800b842:	490d      	ldr	r1, [pc, #52]	; (800b878 <f_mount+0x88>)
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d002      	beq.n	800b856 <f_mount+0x66>
 800b850:	79fb      	ldrb	r3, [r7, #7]
 800b852:	2b01      	cmp	r3, #1
 800b854:	d001      	beq.n	800b85a <f_mount+0x6a>
 800b856:	2300      	movs	r3, #0
 800b858:	e00a      	b.n	800b870 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b85a:	f107 010c 	add.w	r1, r7, #12
 800b85e:	f107 0308 	add.w	r3, r7, #8
 800b862:	2200      	movs	r2, #0
 800b864:	4618      	mov	r0, r3
 800b866:	f7ff fd41 	bl	800b2ec <find_volume>
 800b86a:	4603      	mov	r3, r0
 800b86c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b86e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b870:	4618      	mov	r0, r3
 800b872:	3720      	adds	r7, #32
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	20000504 	.word	0x20000504

0800b87c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b098      	sub	sp, #96	; 0x60
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	4613      	mov	r3, r2
 800b888:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <f_open+0x18>
 800b890:	2309      	movs	r3, #9
 800b892:	e1ad      	b.n	800bbf0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b894:	79fb      	ldrb	r3, [r7, #7]
 800b896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b89a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b89c:	79fa      	ldrb	r2, [r7, #7]
 800b89e:	f107 0110 	add.w	r1, r7, #16
 800b8a2:	f107 0308 	add.w	r3, r7, #8
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7ff fd20 	bl	800b2ec <find_volume>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b8b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f040 8191 	bne.w	800bbde <f_open+0x362>
		dj.obj.fs = fs;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b8c0:	68ba      	ldr	r2, [r7, #8]
 800b8c2:	f107 0314 	add.w	r3, r7, #20
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7ff fc03 	bl	800b0d4 <follow_path>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b8d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d11a      	bne.n	800b912 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b8dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b8e0:	b25b      	sxtb	r3, r3
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	da03      	bge.n	800b8ee <f_open+0x72>
				res = FR_INVALID_NAME;
 800b8e6:	2306      	movs	r3, #6
 800b8e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b8ec:	e011      	b.n	800b912 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b8ee:	79fb      	ldrb	r3, [r7, #7]
 800b8f0:	f023 0301 	bic.w	r3, r3, #1
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	bf14      	ite	ne
 800b8f8:	2301      	movne	r3, #1
 800b8fa:	2300      	moveq	r3, #0
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	461a      	mov	r2, r3
 800b900:	f107 0314 	add.w	r3, r7, #20
 800b904:	4611      	mov	r1, r2
 800b906:	4618      	mov	r0, r3
 800b908:	f7fe fbda 	bl	800a0c0 <chk_lock>
 800b90c:	4603      	mov	r3, r0
 800b90e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b912:	79fb      	ldrb	r3, [r7, #7]
 800b914:	f003 031c 	and.w	r3, r3, #28
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d07f      	beq.n	800ba1c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b91c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b920:	2b00      	cmp	r3, #0
 800b922:	d017      	beq.n	800b954 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b924:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b928:	2b04      	cmp	r3, #4
 800b92a:	d10e      	bne.n	800b94a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b92c:	f7fe fc24 	bl	800a178 <enq_lock>
 800b930:	4603      	mov	r3, r0
 800b932:	2b00      	cmp	r3, #0
 800b934:	d006      	beq.n	800b944 <f_open+0xc8>
 800b936:	f107 0314 	add.w	r3, r7, #20
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7ff fb03 	bl	800af46 <dir_register>
 800b940:	4603      	mov	r3, r0
 800b942:	e000      	b.n	800b946 <f_open+0xca>
 800b944:	2312      	movs	r3, #18
 800b946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b94a:	79fb      	ldrb	r3, [r7, #7]
 800b94c:	f043 0308 	orr.w	r3, r3, #8
 800b950:	71fb      	strb	r3, [r7, #7]
 800b952:	e010      	b.n	800b976 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b954:	7ebb      	ldrb	r3, [r7, #26]
 800b956:	f003 0311 	and.w	r3, r3, #17
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d003      	beq.n	800b966 <f_open+0xea>
					res = FR_DENIED;
 800b95e:	2307      	movs	r3, #7
 800b960:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b964:	e007      	b.n	800b976 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b966:	79fb      	ldrb	r3, [r7, #7]
 800b968:	f003 0304 	and.w	r3, r3, #4
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <f_open+0xfa>
 800b970:	2308      	movs	r3, #8
 800b972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d168      	bne.n	800ba50 <f_open+0x1d4>
 800b97e:	79fb      	ldrb	r3, [r7, #7]
 800b980:	f003 0308 	and.w	r3, r3, #8
 800b984:	2b00      	cmp	r3, #0
 800b986:	d063      	beq.n	800ba50 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b988:	f000 fc54 	bl	800c234 <get_fattime>
 800b98c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b990:	330e      	adds	r3, #14
 800b992:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b994:	4618      	mov	r0, r3
 800b996:	f7fe fae9 	bl	8009f6c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b99c:	3316      	adds	r3, #22
 800b99e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fe fae3 	bl	8009f6c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a8:	330b      	adds	r3, #11
 800b9aa:	2220      	movs	r2, #32
 800b9ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9b2:	4611      	mov	r1, r2
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7ff fa32 	bl	800ae1e <ld_clust>
 800b9ba:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7ff fa4a 	bl	800ae5c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ca:	331c      	adds	r3, #28
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fe facc 	bl	8009f6c <st_dword>
					fs->wflag = 1;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d037      	beq.n	800ba50 <f_open+0x1d4>
						dw = fs->winsect;
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b9e6:	f107 0314 	add.w	r3, r7, #20
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7fe ff5d 	bl	800a8ae <remove_chain>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b9fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d126      	bne.n	800ba50 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fe fd0a 	bl	800a420 <move_window>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba16:	3a01      	subs	r2, #1
 800ba18:	60da      	str	r2, [r3, #12]
 800ba1a:	e019      	b.n	800ba50 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ba1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d115      	bne.n	800ba50 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ba24:	7ebb      	ldrb	r3, [r7, #26]
 800ba26:	f003 0310 	and.w	r3, r3, #16
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d003      	beq.n	800ba36 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ba2e:	2304      	movs	r3, #4
 800ba30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ba34:	e00c      	b.n	800ba50 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ba36:	79fb      	ldrb	r3, [r7, #7]
 800ba38:	f003 0302 	and.w	r3, r3, #2
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d007      	beq.n	800ba50 <f_open+0x1d4>
 800ba40:	7ebb      	ldrb	r3, [r7, #26]
 800ba42:	f003 0301 	and.w	r3, r3, #1
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d002      	beq.n	800ba50 <f_open+0x1d4>
						res = FR_DENIED;
 800ba4a:	2307      	movs	r3, #7
 800ba4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ba50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d128      	bne.n	800baaa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ba58:	79fb      	ldrb	r3, [r7, #7]
 800ba5a:	f003 0308 	and.w	r3, r3, #8
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d003      	beq.n	800ba6a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ba62:	79fb      	ldrb	r3, [r7, #7]
 800ba64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ba72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ba78:	79fb      	ldrb	r3, [r7, #7]
 800ba7a:	f023 0301 	bic.w	r3, r3, #1
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	bf14      	ite	ne
 800ba82:	2301      	movne	r3, #1
 800ba84:	2300      	moveq	r3, #0
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	461a      	mov	r2, r3
 800ba8a:	f107 0314 	add.w	r3, r7, #20
 800ba8e:	4611      	mov	r1, r2
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7fe fb93 	bl	800a1bc <inc_lock>
 800ba96:	4602      	mov	r2, r0
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	691b      	ldr	r3, [r3, #16]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d102      	bne.n	800baaa <f_open+0x22e>
 800baa4:	2302      	movs	r3, #2
 800baa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800baaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f040 8095 	bne.w	800bbde <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bab8:	4611      	mov	r1, r2
 800baba:	4618      	mov	r0, r3
 800babc:	f7ff f9af 	bl	800ae1e <ld_clust>
 800bac0:	4602      	mov	r2, r0
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bac8:	331c      	adds	r3, #28
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fe fa10 	bl	8009ef0 <ld_dword>
 800bad0:	4602      	mov	r2, r0
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2200      	movs	r2, #0
 800bada:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	88da      	ldrh	r2, [r3, #6]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	79fa      	ldrb	r2, [r7, #7]
 800baee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2200      	movs	r2, #0
 800bafa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	3330      	adds	r3, #48	; 0x30
 800bb06:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7fe fa7a 	bl	800a006 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bb12:	79fb      	ldrb	r3, [r7, #7]
 800bb14:	f003 0320 	and.w	r3, r3, #32
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d060      	beq.n	800bbde <f_open+0x362>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d05c      	beq.n	800bbde <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	68da      	ldr	r2, [r3, #12]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	895b      	ldrh	r3, [r3, #10]
 800bb30:	025b      	lsls	r3, r3, #9
 800bb32:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	657b      	str	r3, [r7, #84]	; 0x54
 800bb40:	e016      	b.n	800bb70 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fe fd25 	bl	800a596 <get_fat>
 800bb4c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bb4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d802      	bhi.n	800bb5a <f_open+0x2de>
 800bb54:	2302      	movs	r3, #2
 800bb56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bb5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb60:	d102      	bne.n	800bb68 <f_open+0x2ec>
 800bb62:	2301      	movs	r3, #1
 800bb64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bb68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb6c:	1ad3      	subs	r3, r2, r3
 800bb6e:	657b      	str	r3, [r7, #84]	; 0x54
 800bb70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d103      	bne.n	800bb80 <f_open+0x304>
 800bb78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d8e0      	bhi.n	800bb42 <f_open+0x2c6>
				}
				fp->clust = clst;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bb86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d127      	bne.n	800bbde <f_open+0x362>
 800bb8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d022      	beq.n	800bbde <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fe fcdb 	bl	800a558 <clust2sect>
 800bba2:	6478      	str	r0, [r7, #68]	; 0x44
 800bba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d103      	bne.n	800bbb2 <f_open+0x336>
						res = FR_INT_ERR;
 800bbaa:	2302      	movs	r3, #2
 800bbac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bbb0:	e015      	b.n	800bbde <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bbb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbb4:	0a5a      	lsrs	r2, r3, #9
 800bbb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbb8:	441a      	add	r2, r3
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	7858      	ldrb	r0, [r3, #1]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	6a1a      	ldr	r2, [r3, #32]
 800bbcc:	2301      	movs	r3, #1
 800bbce:	f7fe f919 	bl	8009e04 <disk_read>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d002      	beq.n	800bbde <f_open+0x362>
 800bbd8:	2301      	movs	r3, #1
 800bbda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bbde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d002      	beq.n	800bbec <f_open+0x370>
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bbec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3760      	adds	r7, #96	; 0x60
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b08c      	sub	sp, #48	; 0x30
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
 800bc04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f107 0210 	add.w	r2, r7, #16
 800bc16:	4611      	mov	r1, r2
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7ff fdb3 	bl	800b784 <validate>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bc24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d107      	bne.n	800bc3c <f_write+0x44>
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	7d5b      	ldrb	r3, [r3, #21]
 800bc30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bc34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <f_write+0x4a>
 800bc3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc40:	e14b      	b.n	800beda <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	7d1b      	ldrb	r3, [r3, #20]
 800bc46:	f003 0302 	and.w	r3, r3, #2
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d101      	bne.n	800bc52 <f_write+0x5a>
 800bc4e:	2307      	movs	r3, #7
 800bc50:	e143      	b.n	800beda <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	699a      	ldr	r2, [r3, #24]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	441a      	add	r2, r3
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	699b      	ldr	r3, [r3, #24]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	f080 812d 	bcs.w	800bebe <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	699b      	ldr	r3, [r3, #24]
 800bc68:	43db      	mvns	r3, r3
 800bc6a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bc6c:	e127      	b.n	800bebe <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	699b      	ldr	r3, [r3, #24]
 800bc72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f040 80e3 	bne.w	800be42 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	699b      	ldr	r3, [r3, #24]
 800bc80:	0a5b      	lsrs	r3, r3, #9
 800bc82:	693a      	ldr	r2, [r7, #16]
 800bc84:	8952      	ldrh	r2, [r2, #10]
 800bc86:	3a01      	subs	r2, #1
 800bc88:	4013      	ands	r3, r2
 800bc8a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d143      	bne.n	800bd1a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10c      	bne.n	800bcb4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d11a      	bne.n	800bcdc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2100      	movs	r1, #0
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7fe fe64 	bl	800a978 <create_chain>
 800bcb0:	62b8      	str	r0, [r7, #40]	; 0x28
 800bcb2:	e013      	b.n	800bcdc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d007      	beq.n	800bccc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	699b      	ldr	r3, [r3, #24]
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	68f8      	ldr	r0, [r7, #12]
 800bcc4:	f7fe fef0 	bl	800aaa8 <clmt_clust>
 800bcc8:	62b8      	str	r0, [r7, #40]	; 0x28
 800bcca:	e007      	b.n	800bcdc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	69db      	ldr	r3, [r3, #28]
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	f7fe fe4f 	bl	800a978 <create_chain>
 800bcda:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bcdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f000 80f2 	beq.w	800bec8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d104      	bne.n	800bcf4 <f_write+0xfc>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2202      	movs	r2, #2
 800bcee:	755a      	strb	r2, [r3, #21]
 800bcf0:	2302      	movs	r3, #2
 800bcf2:	e0f2      	b.n	800beda <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcfa:	d104      	bne.n	800bd06 <f_write+0x10e>
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	755a      	strb	r2, [r3, #21]
 800bd02:	2301      	movs	r3, #1
 800bd04:	e0e9      	b.n	800beda <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd0a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d102      	bne.n	800bd1a <f_write+0x122>
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd18:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	7d1b      	ldrb	r3, [r3, #20]
 800bd1e:	b25b      	sxtb	r3, r3
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	da18      	bge.n	800bd56 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	7858      	ldrb	r0, [r3, #1]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6a1a      	ldr	r2, [r3, #32]
 800bd32:	2301      	movs	r3, #1
 800bd34:	f7fe f886 	bl	8009e44 <disk_write>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d004      	beq.n	800bd48 <f_write+0x150>
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2201      	movs	r2, #1
 800bd42:	755a      	strb	r2, [r3, #21]
 800bd44:	2301      	movs	r3, #1
 800bd46:	e0c8      	b.n	800beda <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	7d1b      	ldrb	r3, [r3, #20]
 800bd4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bd56:	693a      	ldr	r2, [r7, #16]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	69db      	ldr	r3, [r3, #28]
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	4610      	mov	r0, r2
 800bd60:	f7fe fbfa 	bl	800a558 <clust2sect>
 800bd64:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d104      	bne.n	800bd76 <f_write+0x17e>
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2202      	movs	r2, #2
 800bd70:	755a      	strb	r2, [r3, #21]
 800bd72:	2302      	movs	r3, #2
 800bd74:	e0b1      	b.n	800beda <f_write+0x2e2>
			sect += csect;
 800bd76:	697a      	ldr	r2, [r7, #20]
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	0a5b      	lsrs	r3, r3, #9
 800bd82:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bd84:	6a3b      	ldr	r3, [r7, #32]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d03c      	beq.n	800be04 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bd8a:	69ba      	ldr	r2, [r7, #24]
 800bd8c:	6a3b      	ldr	r3, [r7, #32]
 800bd8e:	4413      	add	r3, r2
 800bd90:	693a      	ldr	r2, [r7, #16]
 800bd92:	8952      	ldrh	r2, [r2, #10]
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d905      	bls.n	800bda4 <f_write+0x1ac>
					cc = fs->csize - csect;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	895b      	ldrh	r3, [r3, #10]
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	1ad3      	subs	r3, r2, r3
 800bda2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	7858      	ldrb	r0, [r3, #1]
 800bda8:	6a3b      	ldr	r3, [r7, #32]
 800bdaa:	697a      	ldr	r2, [r7, #20]
 800bdac:	69f9      	ldr	r1, [r7, #28]
 800bdae:	f7fe f849 	bl	8009e44 <disk_write>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d004      	beq.n	800bdc2 <f_write+0x1ca>
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	755a      	strb	r2, [r3, #21]
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e08b      	b.n	800beda <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6a1a      	ldr	r2, [r3, #32]
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	6a3a      	ldr	r2, [r7, #32]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d915      	bls.n	800bdfc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	6a1a      	ldr	r2, [r3, #32]
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	1ad3      	subs	r3, r2, r3
 800bdde:	025b      	lsls	r3, r3, #9
 800bde0:	69fa      	ldr	r2, [r7, #28]
 800bde2:	4413      	add	r3, r2
 800bde4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bde8:	4619      	mov	r1, r3
 800bdea:	f7fe f8eb 	bl	8009fc4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	7d1b      	ldrb	r3, [r3, #20]
 800bdf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bdfc:	6a3b      	ldr	r3, [r7, #32]
 800bdfe:	025b      	lsls	r3, r3, #9
 800be00:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800be02:	e03f      	b.n	800be84 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6a1b      	ldr	r3, [r3, #32]
 800be08:	697a      	ldr	r2, [r7, #20]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d016      	beq.n	800be3c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	699a      	ldr	r2, [r3, #24]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800be16:	429a      	cmp	r2, r3
 800be18:	d210      	bcs.n	800be3c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	7858      	ldrb	r0, [r3, #1]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be24:	2301      	movs	r3, #1
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	f7fd ffec 	bl	8009e04 <disk_read>
 800be2c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d004      	beq.n	800be3c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2201      	movs	r2, #1
 800be36:	755a      	strb	r2, [r3, #21]
 800be38:	2301      	movs	r3, #1
 800be3a:	e04e      	b.n	800beda <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	697a      	ldr	r2, [r7, #20]
 800be40:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	699b      	ldr	r3, [r3, #24]
 800be46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be4a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800be4e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800be50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	429a      	cmp	r2, r3
 800be56:	d901      	bls.n	800be5c <f_write+0x264>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	699b      	ldr	r3, [r3, #24]
 800be66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be6a:	4413      	add	r3, r2
 800be6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be6e:	69f9      	ldr	r1, [r7, #28]
 800be70:	4618      	mov	r0, r3
 800be72:	f7fe f8a7 	bl	8009fc4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	7d1b      	ldrb	r3, [r3, #20]
 800be7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be7e:	b2da      	uxtb	r2, r3
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800be84:	69fa      	ldr	r2, [r7, #28]
 800be86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be88:	4413      	add	r3, r2
 800be8a:	61fb      	str	r3, [r7, #28]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	699a      	ldr	r2, [r3, #24]
 800be90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be92:	441a      	add	r2, r3
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	619a      	str	r2, [r3, #24]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	68da      	ldr	r2, [r3, #12]
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	699b      	ldr	r3, [r3, #24]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	bf38      	it	cc
 800bea4:	461a      	movcc	r2, r3
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	60da      	str	r2, [r3, #12]
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb0:	441a      	add	r2, r3
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	601a      	str	r2, [r3, #0]
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beba:	1ad3      	subs	r3, r2, r3
 800bebc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f47f aed4 	bne.w	800bc6e <f_write+0x76>
 800bec6:	e000      	b.n	800beca <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bec8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	7d1b      	ldrb	r3, [r3, #20]
 800bece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3730      	adds	r7, #48	; 0x30
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b086      	sub	sp, #24
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f107 0208 	add.w	r2, r7, #8
 800bef0:	4611      	mov	r1, r2
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7ff fc46 	bl	800b784 <validate>
 800bef8:	4603      	mov	r3, r0
 800befa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800befc:	7dfb      	ldrb	r3, [r7, #23]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d168      	bne.n	800bfd4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	7d1b      	ldrb	r3, [r3, #20]
 800bf06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d062      	beq.n	800bfd4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	7d1b      	ldrb	r3, [r3, #20]
 800bf12:	b25b      	sxtb	r3, r3
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	da15      	bge.n	800bf44 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	7858      	ldrb	r0, [r3, #1]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a1a      	ldr	r2, [r3, #32]
 800bf26:	2301      	movs	r3, #1
 800bf28:	f7fd ff8c 	bl	8009e44 <disk_write>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d001      	beq.n	800bf36 <f_sync+0x54>
 800bf32:	2301      	movs	r3, #1
 800bf34:	e04f      	b.n	800bfd6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	7d1b      	ldrb	r3, [r3, #20]
 800bf3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf3e:	b2da      	uxtb	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bf44:	f000 f976 	bl	800c234 <get_fattime>
 800bf48:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf50:	4619      	mov	r1, r3
 800bf52:	4610      	mov	r0, r2
 800bf54:	f7fe fa64 	bl	800a420 <move_window>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bf5c:	7dfb      	ldrb	r3, [r7, #23]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d138      	bne.n	800bfd4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf66:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	330b      	adds	r3, #11
 800bf6c:	781a      	ldrb	r2, [r3, #0]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	330b      	adds	r3, #11
 800bf72:	f042 0220 	orr.w	r2, r2, #32
 800bf76:	b2d2      	uxtb	r2, r2
 800bf78:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6818      	ldr	r0, [r3, #0]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	461a      	mov	r2, r3
 800bf84:	68f9      	ldr	r1, [r7, #12]
 800bf86:	f7fe ff69 	bl	800ae5c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f103 021c 	add.w	r2, r3, #28
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	4619      	mov	r1, r3
 800bf96:	4610      	mov	r0, r2
 800bf98:	f7fd ffe8 	bl	8009f6c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	3316      	adds	r3, #22
 800bfa0:	6939      	ldr	r1, [r7, #16]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7fd ffe2 	bl	8009f6c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	3312      	adds	r3, #18
 800bfac:	2100      	movs	r1, #0
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fd ffc1 	bl	8009f36 <st_word>
					fs->wflag = 1;
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7fe fa5d 	bl	800a47c <sync_fs>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	7d1b      	ldrb	r3, [r3, #20]
 800bfca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfce:	b2da      	uxtb	r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bfd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3718      	adds	r7, #24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b084      	sub	sp, #16
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7ff ff7b 	bl	800bee2 <f_sync>
 800bfec:	4603      	mov	r3, r0
 800bfee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d118      	bne.n	800c028 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f107 0208 	add.w	r2, r7, #8
 800bffc:	4611      	mov	r1, r2
 800bffe:	4618      	mov	r0, r3
 800c000:	f7ff fbc0 	bl	800b784 <validate>
 800c004:	4603      	mov	r3, r0
 800c006:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c008:	7bfb      	ldrb	r3, [r7, #15]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10c      	bne.n	800c028 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	4618      	mov	r0, r3
 800c014:	f7fe f960 	bl	800a2d8 <dec_lock>
 800c018:	4603      	mov	r3, r0
 800c01a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c01c:	7bfb      	ldrb	r3, [r7, #15]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d102      	bne.n	800c028 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c028:	7bfb      	ldrb	r3, [r7, #15]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
	...

0800c034 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c034:	b480      	push	{r7}
 800c036:	b087      	sub	sp, #28
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	4613      	mov	r3, r2
 800c040:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c042:	2301      	movs	r3, #1
 800c044:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c046:	2300      	movs	r3, #0
 800c048:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c04a:	4b1f      	ldr	r3, [pc, #124]	; (800c0c8 <FATFS_LinkDriverEx+0x94>)
 800c04c:	7a5b      	ldrb	r3, [r3, #9]
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	2b00      	cmp	r3, #0
 800c052:	d131      	bne.n	800c0b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c054:	4b1c      	ldr	r3, [pc, #112]	; (800c0c8 <FATFS_LinkDriverEx+0x94>)
 800c056:	7a5b      	ldrb	r3, [r3, #9]
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	461a      	mov	r2, r3
 800c05c:	4b1a      	ldr	r3, [pc, #104]	; (800c0c8 <FATFS_LinkDriverEx+0x94>)
 800c05e:	2100      	movs	r1, #0
 800c060:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c062:	4b19      	ldr	r3, [pc, #100]	; (800c0c8 <FATFS_LinkDriverEx+0x94>)
 800c064:	7a5b      	ldrb	r3, [r3, #9]
 800c066:	b2db      	uxtb	r3, r3
 800c068:	4a17      	ldr	r2, [pc, #92]	; (800c0c8 <FATFS_LinkDriverEx+0x94>)
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	4413      	add	r3, r2
 800c06e:	68fa      	ldr	r2, [r7, #12]
 800c070:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c072:	4b15      	ldr	r3, [pc, #84]	; (800c0c8 <FATFS_LinkDriverEx+0x94>)
 800c074:	7a5b      	ldrb	r3, [r3, #9]
 800c076:	b2db      	uxtb	r3, r3
 800c078:	461a      	mov	r2, r3
 800c07a:	4b13      	ldr	r3, [pc, #76]	; (800c0c8 <FATFS_LinkDriverEx+0x94>)
 800c07c:	4413      	add	r3, r2
 800c07e:	79fa      	ldrb	r2, [r7, #7]
 800c080:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c082:	4b11      	ldr	r3, [pc, #68]	; (800c0c8 <FATFS_LinkDriverEx+0x94>)
 800c084:	7a5b      	ldrb	r3, [r3, #9]
 800c086:	b2db      	uxtb	r3, r3
 800c088:	1c5a      	adds	r2, r3, #1
 800c08a:	b2d1      	uxtb	r1, r2
 800c08c:	4a0e      	ldr	r2, [pc, #56]	; (800c0c8 <FATFS_LinkDriverEx+0x94>)
 800c08e:	7251      	strb	r1, [r2, #9]
 800c090:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c092:	7dbb      	ldrb	r3, [r7, #22]
 800c094:	3330      	adds	r3, #48	; 0x30
 800c096:	b2da      	uxtb	r2, r3
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	223a      	movs	r2, #58	; 0x3a
 800c0a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	3302      	adds	r3, #2
 800c0a8:	222f      	movs	r2, #47	; 0x2f
 800c0aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	3303      	adds	r3, #3
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	371c      	adds	r7, #28
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr
 800c0c6:	bf00      	nop
 800c0c8:	2000052c 	.word	0x2000052c

0800c0cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	6839      	ldr	r1, [r7, #0]
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7ff ffaa 	bl	800c034 <FATFS_LinkDriverEx>
 800c0e0:	4603      	mov	r3, r0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3708      	adds	r7, #8
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
	...

0800c0ec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c0f6:	f000 f879 	bl	800c1ec <BSP_SD_IsDetected>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d001      	beq.n	800c104 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c100:	2302      	movs	r3, #2
 800c102:	e012      	b.n	800c12a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800c104:	480b      	ldr	r0, [pc, #44]	; (800c134 <BSP_SD_Init+0x48>)
 800c106:	f7fb faff 	bl	8007708 <HAL_SD_Init>
 800c10a:	4603      	mov	r3, r0
 800c10c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c10e:	79fb      	ldrb	r3, [r7, #7]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d109      	bne.n	800c128 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c114:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c118:	4806      	ldr	r0, [pc, #24]	; (800c134 <BSP_SD_Init+0x48>)
 800c11a:	f7fc f8d5 	bl	80082c8 <HAL_SD_ConfigWideBusOperation>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d001      	beq.n	800c128 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c124:	2301      	movs	r3, #1
 800c126:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c128:	79fb      	ldrb	r3, [r7, #7]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	20000b5c 	.word	0x20000b5c

0800c138 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b088      	sub	sp, #32
 800c13c:	af02      	add	r7, sp, #8
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
 800c144:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c146:	2300      	movs	r3, #0
 800c148:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	68ba      	ldr	r2, [r7, #8]
 800c152:	68f9      	ldr	r1, [r7, #12]
 800c154:	4806      	ldr	r0, [pc, #24]	; (800c170 <BSP_SD_ReadBlocks+0x38>)
 800c156:	f7fb fb66 	bl	8007826 <HAL_SD_ReadBlocks>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c160:	2301      	movs	r3, #1
 800c162:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800c164:	7dfb      	ldrb	r3, [r7, #23]
}
 800c166:	4618      	mov	r0, r3
 800c168:	3718      	adds	r7, #24
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	20000b5c 	.word	0x20000b5c

0800c174 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b088      	sub	sp, #32
 800c178:	af02      	add	r7, sp, #8
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	60b9      	str	r1, [r7, #8]
 800c17e:	607a      	str	r2, [r7, #4]
 800c180:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	9300      	str	r3, [sp, #0]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	68f9      	ldr	r1, [r7, #12]
 800c190:	4806      	ldr	r0, [pc, #24]	; (800c1ac <BSP_SD_WriteBlocks+0x38>)
 800c192:	f7fb fcde 	bl	8007b52 <HAL_SD_WriteBlocks>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d001      	beq.n	800c1a0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c19c:	2301      	movs	r3, #1
 800c19e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800c1a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3718      	adds	r7, #24
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	20000b5c 	.word	0x20000b5c

0800c1b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c1b4:	4805      	ldr	r0, [pc, #20]	; (800c1cc <BSP_SD_GetCardState+0x1c>)
 800c1b6:	f7fc f903 	bl	80083c0 <HAL_SD_GetCardState>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b04      	cmp	r3, #4
 800c1be:	bf14      	ite	ne
 800c1c0:	2301      	movne	r3, #1
 800c1c2:	2300      	moveq	r3, #0
 800c1c4:	b2db      	uxtb	r3, r3
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	20000b5c 	.word	0x20000b5c

0800c1d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800c1d8:	6879      	ldr	r1, [r7, #4]
 800c1da:	4803      	ldr	r0, [pc, #12]	; (800c1e8 <BSP_SD_GetCardInfo+0x18>)
 800c1dc:	f7fc f848 	bl	8008270 <HAL_SD_GetCardInfo>
}
 800c1e0:	bf00      	nop
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	20000b5c 	.word	0x20000b5c

0800c1ec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c1f6:	f000 f825 	bl	800c244 <BSP_PlatformIsDetected>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d101      	bne.n	800c204 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c200:	2300      	movs	r3, #0
 800c202:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c204:	79fb      	ldrb	r3, [r7, #7]
 800c206:	b2db      	uxtb	r3, r3
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c210:	b580      	push	{r7, lr}
 800c212:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c214:	4904      	ldr	r1, [pc, #16]	; (800c228 <MX_FATFS_Init+0x18>)
 800c216:	4805      	ldr	r0, [pc, #20]	; (800c22c <MX_FATFS_Init+0x1c>)
 800c218:	f7ff ff58 	bl	800c0cc <FATFS_LinkDriver>
 800c21c:	4603      	mov	r3, r0
 800c21e:	461a      	mov	r2, r3
 800c220:	4b03      	ldr	r3, [pc, #12]	; (800c230 <MX_FATFS_Init+0x20>)
 800c222:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c224:	bf00      	nop
 800c226:	bd80      	pop	{r7, pc}
 800c228:	200006bc 	.word	0x200006bc
 800c22c:	080124e4 	.word	0x080124e4
 800c230:	200006b8 	.word	0x200006b8

0800c234 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c234:	b480      	push	{r7}
 800c236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c238:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c24a:	2301      	movs	r3, #1
 800c24c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c24e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c252:	4806      	ldr	r0, [pc, #24]	; (800c26c <BSP_PlatformIsDetected+0x28>)
 800c254:	f7f9 f94e 	bl	80054f4 <HAL_GPIO_ReadPin>
 800c258:	4603      	mov	r3, r0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d001      	beq.n	800c262 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c25e:	2300      	movs	r3, #0
 800c260:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c262:	79fb      	ldrb	r3, [r7, #7]
}  
 800c264:	4618      	mov	r0, r3
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	40022000 	.word	0x40022000

0800c270 <SCB_EnableICache>:
{
 800c270:	b480      	push	{r7}
 800c272:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c274:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c278:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800c27c:	4b0b      	ldr	r3, [pc, #44]	; (800c2ac <SCB_EnableICache+0x3c>)
 800c27e:	2200      	movs	r2, #0
 800c280:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800c284:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c288:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800c28c:	4b07      	ldr	r3, [pc, #28]	; (800c2ac <SCB_EnableICache+0x3c>)
 800c28e:	695b      	ldr	r3, [r3, #20]
 800c290:	4a06      	ldr	r2, [pc, #24]	; (800c2ac <SCB_EnableICache+0x3c>)
 800c292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c296:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c298:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c29c:	f3bf 8f6f 	isb	sy
}
 800c2a0:	bf00      	nop
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	e000ed00 	.word	0xe000ed00

0800c2b0 <SCB_EnableDCache>:
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800c2b6:	4b1d      	ldr	r3, [pc, #116]	; (800c32c <SCB_EnableDCache+0x7c>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800c2be:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800c2c2:	4b1a      	ldr	r3, [pc, #104]	; (800c32c <SCB_EnableDCache+0x7c>)
 800c2c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2c8:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	0b5b      	lsrs	r3, r3, #13
 800c2ce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c2d2:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	08db      	lsrs	r3, r3, #3
 800c2d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2dc:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	015a      	lsls	r2, r3, #5
 800c2e2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800c2e6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800c2e8:	68ba      	ldr	r2, [r7, #8]
 800c2ea:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c2ec:	490f      	ldr	r1, [pc, #60]	; (800c32c <SCB_EnableDCache+0x7c>)
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	1e5a      	subs	r2, r3, #1
 800c2f8:	60ba      	str	r2, [r7, #8]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1ef      	bne.n	800c2de <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	1e5a      	subs	r2, r3, #1
 800c302:	60fa      	str	r2, [r7, #12]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1e5      	bne.n	800c2d4 <SCB_EnableDCache+0x24>
 800c308:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800c30c:	4b07      	ldr	r3, [pc, #28]	; (800c32c <SCB_EnableDCache+0x7c>)
 800c30e:	695b      	ldr	r3, [r3, #20]
 800c310:	4a06      	ldr	r2, [pc, #24]	; (800c32c <SCB_EnableDCache+0x7c>)
 800c312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c316:	6153      	str	r3, [r2, #20]
 800c318:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c31c:	f3bf 8f6f 	isb	sy
}
 800c320:	bf00      	nop
 800c322:	3714      	adds	r7, #20
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr
 800c32c:	e000ed00 	.word	0xe000ed00

0800c330 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a0b      	ldr	r2, [pc, #44]	; (800c36c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d102      	bne.n	800c348 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		flagTimer6_temperature=1;
 800c342:	4b0b      	ldr	r3, [pc, #44]	; (800c370 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800c344:	2201      	movs	r2, #1
 800c346:	701a      	strb	r2, [r3, #0]
	}

	if(htim->Instance == TIM7)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a09      	ldr	r2, [pc, #36]	; (800c374 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d105      	bne.n	800c35e <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		flagTimer7_gametime=1;
 800c352:	4b09      	ldr	r3, [pc, #36]	; (800c378 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800c354:	2201      	movs	r2, #1
 800c356:	701a      	strb	r2, [r3, #0]
		flagTimer7_roundtimeleft=1;
 800c358:	4b08      	ldr	r3, [pc, #32]	; (800c37c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800c35a:	2201      	movs	r2, #1
 800c35c:	701a      	strb	r2, [r3, #0]
	}


}
 800c35e:	bf00      	nop
 800c360:	370c      	adds	r7, #12
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	40001000 	.word	0x40001000
 800c370:	20000538 	.word	0x20000538
 800c374:	40001400 	.word	0x40001400
 800c378:	20000539 	.word	0x20000539
 800c37c:	2000053a 	.word	0x2000053a

0800c380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c380:	b598      	push	{r3, r4, r7, lr}
 800c382:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800c384:	f7ff ff74 	bl	800c270 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800c388:	f7ff ff92 	bl	800c2b0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c38c:	f7f6 fae6 	bl	800295c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c390:	f000 f89c 	bl	800c4cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c394:	f000 fc4c 	bl	800cc30 <MX_GPIO_Init>
  MX_ADC1_Init();
 800c398:	f000 f93a 	bl	800c610 <MX_ADC1_Init>
  MX_DMA2D_Init();
 800c39c:	f000 f98c 	bl	800c6b8 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800c3a0:	f000 f9c2 	bl	800c728 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 800c3a4:	f000 fbf6 	bl	800cb94 <MX_FMC_Init>
  MX_LTDC_Init();
 800c3a8:	f000 fab2 	bl	800c910 <MX_LTDC_Init>
  MX_TIM6_Init();
 800c3ac:	f000 fb82 	bl	800cab4 <MX_TIM6_Init>
  MX_TIM7_Init();
 800c3b0:	f000 fbb8 	bl	800cb24 <MX_TIM7_Init>
  MX_SDMMC2_SD_Init();
 800c3b4:	f000 fb5e 	bl	800ca74 <MX_SDMMC2_SD_Init>
  MX_FATFS_Init();
 800c3b8:	f7ff ff2a 	bl	800c210 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  //Inicializaçãoo dos LEDS e USER BUTTON
  BSP_LED_Init(LED_GREEN);
 800c3bc:	2001      	movs	r0, #1
 800c3be:	f7f4 fca5 	bl	8000d0c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800c3c2:	2000      	movs	r0, #0
 800c3c4:	f7f4 fca2 	bl	8000d0c <BSP_LED_Init>

  BSP_PB_Init(BUTTON_WAKEUP,BUTTON_MODE_EXTI);
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	2000      	movs	r0, #0
 800c3cc:	f7f4 fce8 	bl	8000da0 <BSP_PB_Init>

  //Inicialização do LCD e Touch Sensor
  LCD_Config();
 800c3d0:	f000 fd08 	bl	800cde4 <LCD_Config>
  BSP_TS_Init(BSP_LCD_GetXSize(),BSP_LCD_GetYSize());
 800c3d4:	f7f5 f88c 	bl	80014f0 <BSP_LCD_GetXSize>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	b29c      	uxth	r4, r3
 800c3dc:	f7f5 f894 	bl	8001508 <BSP_LCD_GetYSize>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f7f6 f8dc 	bl	80025a4 <BSP_TS_Init>
  BSP_TS_ITConfig();
 800c3ec:	f7f6 f93a 	bl	8002664 <BSP_TS_ITConfig>

  //Inicialização do ADC1
  HAL_ADC_Start_IT(&hadc1);
 800c3f0:	4828      	ldr	r0, [pc, #160]	; (800c494 <main+0x114>)
 800c3f2:	f7f6 fb77 	bl	8002ae4 <HAL_ADC_Start_IT>

  //Inicialização dos Interrupts dos Timers 6 e 7
  HAL_TIM_Base_Start_IT(&htim6);
 800c3f6:	4828      	ldr	r0, [pc, #160]	; (800c498 <main+0x118>)
 800c3f8:	f7fc fbb0 	bl	8008b5c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800c3fc:	4827      	ldr	r0, [pc, #156]	; (800c49c <main+0x11c>)
 800c3fe:	f7fc fbad 	bl	8008b5c <HAL_TIM_Base_Start_IT>

  //variáveis jogadores



  strcpy(jogador1.name,"Player1");
 800c402:	4b27      	ldr	r3, [pc, #156]	; (800c4a0 <main+0x120>)
 800c404:	4a27      	ldr	r2, [pc, #156]	; (800c4a4 <main+0x124>)
 800c406:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c40a:	e883 0003 	stmia.w	r3, {r0, r1}
  jogador1.pieceColor=LCD_COLOR_RED;
 800c40e:	4b24      	ldr	r3, [pc, #144]	; (800c4a0 <main+0x120>)
 800c410:	4a25      	ldr	r2, [pc, #148]	; (800c4a8 <main+0x128>)
 800c412:	619a      	str	r2, [r3, #24]
  jogador1.ID=1;
 800c414:	4b22      	ldr	r3, [pc, #136]	; (800c4a0 <main+0x120>)
 800c416:	2201      	movs	r2, #1
 800c418:	615a      	str	r2, [r3, #20]


  strcpy(jogador2.name,"Player2");
 800c41a:	4b24      	ldr	r3, [pc, #144]	; (800c4ac <main+0x12c>)
 800c41c:	4a24      	ldr	r2, [pc, #144]	; (800c4b0 <main+0x130>)
 800c41e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c422:	e883 0003 	stmia.w	r3, {r0, r1}
  jogador2.pieceColor=LCD_COLOR_BLACK;
 800c426:	4b21      	ldr	r3, [pc, #132]	; (800c4ac <main+0x12c>)
 800c428:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800c42c:	619a      	str	r2, [r3, #24]
  jogador2.ID=2;
 800c42e:	4b1f      	ldr	r3, [pc, #124]	; (800c4ac <main+0x12c>)
 800c430:	2202      	movs	r2, #2
 800c432:	615a      	str	r2, [r3, #20]


  strcpy(arm.name,"ARM");
 800c434:	4b1f      	ldr	r3, [pc, #124]	; (800c4b4 <main+0x134>)
 800c436:	4a20      	ldr	r2, [pc, #128]	; (800c4b8 <main+0x138>)
 800c438:	601a      	str	r2, [r3, #0]
  arm.pieceColor=LCD_COLOR_BLACK;
 800c43a:	4b1e      	ldr	r3, [pc, #120]	; (800c4b4 <main+0x134>)
 800c43c:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800c440:	619a      	str	r2, [r3, #24]
  arm.ID=2;
 800c442:	4b1c      	ldr	r3, [pc, #112]	; (800c4b4 <main+0x134>)
 800c444:	2202      	movs	r2, #2
 800c446:	615a      	str	r2, [r3, #20]



  if(f_mount(&SDFatFS,SDPath,0)!=FR_OK)
 800c448:	2200      	movs	r2, #0
 800c44a:	491c      	ldr	r1, [pc, #112]	; (800c4bc <main+0x13c>)
 800c44c:	481c      	ldr	r0, [pc, #112]	; (800c4c0 <main+0x140>)
 800c44e:	f7ff f9cf 	bl	800b7f0 <f_mount>
 800c452:	4603      	mov	r3, r0
 800c454:	2b00      	cmp	r3, #0
 800c456:	d001      	beq.n	800c45c <main+0xdc>
  		  Error_Handler();
 800c458:	f002 f946 	bl	800e6e8 <Error_Handler>


  if(f_open(&SDFile,"gamelog.txt",FA_WRITE | FA_CREATE_ALWAYS)!=FR_OK)
 800c45c:	220a      	movs	r2, #10
 800c45e:	4919      	ldr	r1, [pc, #100]	; (800c4c4 <main+0x144>)
 800c460:	4819      	ldr	r0, [pc, #100]	; (800c4c8 <main+0x148>)
 800c462:	f7ff fa0b 	bl	800b87c <f_open>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <main+0xf0>
  		  Error_Handler();
 800c46c:	f002 f93c 	bl	800e6e8 <Error_Handler>


  displayGame();
 800c470:	f000 fcd2 	bl	800ce18 <displayGame>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  displayTemperature();
 800c474:	f000 fe08 	bl	800d088 <displayTemperature>
	  showGameTime();
 800c478:	f000 fe66 	bl	800d148 <showGameTime>
	  showRoundTimeLeft();
 800c47c:	f000 feb2 	bl	800d1e4 <showRoundTimeLeft>
	  InterruptResetWithBlueButton();
 800c480:	f002 f914 	bl	800e6ac <InterruptResetWithBlueButton>

	  menu();
 800c484:	f001 fb48 	bl	800db18 <menu>
	  jogo();
 800c488:	f000 fef2 	bl	800d270 <jogo>
	  gameOver();
 800c48c:	f001 ffa2 	bl	800e3d4 <gameOver>
	  displayTemperature();
 800c490:	e7f0      	b.n	800c474 <main+0xf4>
 800c492:	bf00      	nop
 800c494:	20000c88 	.word	0x20000c88
 800c498:	20000cf0 	.word	0x20000cf0
 800c49c:	20000e1c 	.word	0x20000e1c
 800c4a0:	20000b3c 	.word	0x20000b3c
 800c4a4:	0800f940 	.word	0x0800f940
 800c4a8:	ffff0000 	.word	0xffff0000
 800c4ac:	20000cd4 	.word	0x20000cd4
 800c4b0:	0800f948 	.word	0x0800f948
 800c4b4:	20000dcc 	.word	0x20000dcc
 800c4b8:	004d5241 	.word	0x004d5241
 800c4bc:	200006bc 	.word	0x200006bc
 800c4c0:	200008f0 	.word	0x200008f0
 800c4c4:	0800f950 	.word	0x0800f950
 800c4c8:	200006c0 	.word	0x200006c0

0800c4cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b0b8      	sub	sp, #224	; 0xe0
 800c4d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c4d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c4d6:	2234      	movs	r2, #52	; 0x34
 800c4d8:	2100      	movs	r1, #0
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f002 fd60 	bl	800efa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c4e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	601a      	str	r2, [r3, #0]
 800c4e8:	605a      	str	r2, [r3, #4]
 800c4ea:	609a      	str	r2, [r3, #8]
 800c4ec:	60da      	str	r2, [r3, #12]
 800c4ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c4f0:	f107 0308 	add.w	r3, r7, #8
 800c4f4:	2290      	movs	r2, #144	; 0x90
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f002 fd51 	bl	800efa0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c4fe:	4b41      	ldr	r3, [pc, #260]	; (800c604 <SystemClock_Config+0x138>)
 800c500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c502:	4a40      	ldr	r2, [pc, #256]	; (800c604 <SystemClock_Config+0x138>)
 800c504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c508:	6413      	str	r3, [r2, #64]	; 0x40
 800c50a:	4b3e      	ldr	r3, [pc, #248]	; (800c604 <SystemClock_Config+0x138>)
 800c50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c512:	607b      	str	r3, [r7, #4]
 800c514:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c516:	4b3c      	ldr	r3, [pc, #240]	; (800c608 <SystemClock_Config+0x13c>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a3b      	ldr	r2, [pc, #236]	; (800c608 <SystemClock_Config+0x13c>)
 800c51c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c520:	6013      	str	r3, [r2, #0]
 800c522:	4b39      	ldr	r3, [pc, #228]	; (800c608 <SystemClock_Config+0x13c>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c52a:	603b      	str	r3, [r7, #0]
 800c52c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c52e:	2301      	movs	r3, #1
 800c530:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c53c:	2302      	movs	r3, #2
 800c53e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c542:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c546:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800c54a:	2319      	movs	r3, #25
 800c54c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 800c550:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c558:	2302      	movs	r3, #2
 800c55a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800c55e:	2308      	movs	r3, #8
 800c560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c564:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c568:	4618      	mov	r0, r3
 800c56a:	f7fa f89b 	bl	80066a4 <HAL_RCC_OscConfig>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d001      	beq.n	800c578 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800c574:	f002 f8b8 	bl	800e6e8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800c578:	f7fa f844 	bl	8006604 <HAL_PWREx_EnableOverDrive>
 800c57c:	4603      	mov	r3, r0
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d001      	beq.n	800c586 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800c582:	f002 f8b1 	bl	800e6e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c586:	230f      	movs	r3, #15
 800c588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c58c:	2302      	movs	r3, #2
 800c58e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c592:	2300      	movs	r3, #0
 800c594:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c598:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c59c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c5a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800c5a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800c5ac:	2106      	movs	r1, #6
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fa faea 	bl	8006b88 <HAL_RCC_ClockConfig>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d001      	beq.n	800c5be <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800c5ba:	f002 f895 	bl	800e6e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SDMMC2
 800c5be:	4b13      	ldr	r3, [pc, #76]	; (800c60c <SystemClock_Config+0x140>)
 800c5c0:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 196;
 800c5c2:	23c4      	movs	r3, #196	; 0xc4
 800c5c4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800c5c6:	2302      	movs	r3, #2
 800c5c8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800c5ca:	2302      	movs	r3, #2
 800c5cc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c5e6:	f107 0308 	add.w	r3, r7, #8
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fa fc66 	bl	8006ebc <HAL_RCCEx_PeriphCLKConfig>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d001      	beq.n	800c5fa <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800c5f6:	f002 f877 	bl	800e6e8 <Error_Handler>
  }
}
 800c5fa:	bf00      	nop
 800c5fc:	37e0      	adds	r7, #224	; 0xe0
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	40023800 	.word	0x40023800
 800c608:	40007000 	.word	0x40007000
 800c60c:	04200008 	.word	0x04200008

0800c610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c616:	463b      	mov	r3, r7
 800c618:	2200      	movs	r2, #0
 800c61a:	601a      	str	r2, [r3, #0]
 800c61c:	605a      	str	r2, [r3, #4]
 800c61e:	609a      	str	r2, [r3, #8]
 800c620:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800c622:	4b21      	ldr	r3, [pc, #132]	; (800c6a8 <MX_ADC1_Init+0x98>)
 800c624:	4a21      	ldr	r2, [pc, #132]	; (800c6ac <MX_ADC1_Init+0x9c>)
 800c626:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c628:	4b1f      	ldr	r3, [pc, #124]	; (800c6a8 <MX_ADC1_Init+0x98>)
 800c62a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c62e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c630:	4b1d      	ldr	r3, [pc, #116]	; (800c6a8 <MX_ADC1_Init+0x98>)
 800c632:	2200      	movs	r2, #0
 800c634:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800c636:	4b1c      	ldr	r3, [pc, #112]	; (800c6a8 <MX_ADC1_Init+0x98>)
 800c638:	2200      	movs	r2, #0
 800c63a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800c63c:	4b1a      	ldr	r3, [pc, #104]	; (800c6a8 <MX_ADC1_Init+0x98>)
 800c63e:	2200      	movs	r2, #0
 800c640:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c642:	4b19      	ldr	r3, [pc, #100]	; (800c6a8 <MX_ADC1_Init+0x98>)
 800c644:	2200      	movs	r2, #0
 800c646:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c64a:	4b17      	ldr	r3, [pc, #92]	; (800c6a8 <MX_ADC1_Init+0x98>)
 800c64c:	2200      	movs	r2, #0
 800c64e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c650:	4b15      	ldr	r3, [pc, #84]	; (800c6a8 <MX_ADC1_Init+0x98>)
 800c652:	4a17      	ldr	r2, [pc, #92]	; (800c6b0 <MX_ADC1_Init+0xa0>)
 800c654:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c656:	4b14      	ldr	r3, [pc, #80]	; (800c6a8 <MX_ADC1_Init+0x98>)
 800c658:	2200      	movs	r2, #0
 800c65a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800c65c:	4b12      	ldr	r3, [pc, #72]	; (800c6a8 <MX_ADC1_Init+0x98>)
 800c65e:	2201      	movs	r2, #1
 800c660:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800c662:	4b11      	ldr	r3, [pc, #68]	; (800c6a8 <MX_ADC1_Init+0x98>)
 800c664:	2200      	movs	r2, #0
 800c666:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c66a:	4b0f      	ldr	r3, [pc, #60]	; (800c6a8 <MX_ADC1_Init+0x98>)
 800c66c:	2201      	movs	r2, #1
 800c66e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c670:	480d      	ldr	r0, [pc, #52]	; (800c6a8 <MX_ADC1_Init+0x98>)
 800c672:	f7f6 f9f3 	bl	8002a5c <HAL_ADC_Init>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d001      	beq.n	800c680 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800c67c:	f002 f834 	bl	800e6e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c680:	4b0c      	ldr	r3, [pc, #48]	; (800c6b4 <MX_ADC1_Init+0xa4>)
 800c682:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800c684:	2301      	movs	r3, #1
 800c686:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800c688:	2300      	movs	r3, #0
 800c68a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c68c:	463b      	mov	r3, r7
 800c68e:	4619      	mov	r1, r3
 800c690:	4805      	ldr	r0, [pc, #20]	; (800c6a8 <MX_ADC1_Init+0x98>)
 800c692:	f7f6 fc5d 	bl	8002f50 <HAL_ADC_ConfigChannel>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d001      	beq.n	800c6a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800c69c:	f002 f824 	bl	800e6e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800c6a0:	bf00      	nop
 800c6a2:	3710      	adds	r7, #16
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	20000c88 	.word	0x20000c88
 800c6ac:	40012000 	.word	0x40012000
 800c6b0:	0f000001 	.word	0x0f000001
 800c6b4:	10000012 	.word	0x10000012

0800c6b8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800c6bc:	4b18      	ldr	r3, [pc, #96]	; (800c720 <MX_DMA2D_Init+0x68>)
 800c6be:	4a19      	ldr	r2, [pc, #100]	; (800c724 <MX_DMA2D_Init+0x6c>)
 800c6c0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800c6c2:	4b17      	ldr	r3, [pc, #92]	; (800c720 <MX_DMA2D_Init+0x68>)
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800c6c8:	4b15      	ldr	r3, [pc, #84]	; (800c720 <MX_DMA2D_Init+0x68>)
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800c6ce:	4b14      	ldr	r3, [pc, #80]	; (800c720 <MX_DMA2D_Init+0x68>)
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800c6d4:	4b12      	ldr	r3, [pc, #72]	; (800c720 <MX_DMA2D_Init+0x68>)
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800c6da:	4b11      	ldr	r3, [pc, #68]	; (800c720 <MX_DMA2D_Init+0x68>)
 800c6dc:	2200      	movs	r2, #0
 800c6de:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800c6e0:	4b0f      	ldr	r3, [pc, #60]	; (800c720 <MX_DMA2D_Init+0x68>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800c6e6:	4b0e      	ldr	r3, [pc, #56]	; (800c720 <MX_DMA2D_Init+0x68>)
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800c6ec:	4b0c      	ldr	r3, [pc, #48]	; (800c720 <MX_DMA2D_Init+0x68>)
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800c6f2:	4b0b      	ldr	r3, [pc, #44]	; (800c720 <MX_DMA2D_Init+0x68>)
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800c6f8:	4809      	ldr	r0, [pc, #36]	; (800c720 <MX_DMA2D_Init+0x68>)
 800c6fa:	f7f7 f92f 	bl	800395c <HAL_DMA2D_Init>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 800c704:	f001 fff0 	bl	800e6e8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800c708:	2101      	movs	r1, #1
 800c70a:	4805      	ldr	r0, [pc, #20]	; (800c720 <MX_DMA2D_Init+0x68>)
 800c70c:	f7f7 fa94 	bl	8003c38 <HAL_DMA2D_ConfigLayer>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d001      	beq.n	800c71a <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800c716:	f001 ffe7 	bl	800e6e8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800c71a:	bf00      	nop
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	20000d68 	.word	0x20000d68
 800c724:	4002b000 	.word	0x4002b000

0800c728 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b0aa      	sub	sp, #168	; 0xa8
 800c72c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800c72e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800c732:	2200      	movs	r2, #0
 800c734:	601a      	str	r2, [r3, #0]
 800c736:	605a      	str	r2, [r3, #4]
 800c738:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800c73a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c73e:	2224      	movs	r2, #36	; 0x24
 800c740:	2100      	movs	r1, #0
 800c742:	4618      	mov	r0, r3
 800c744:	f002 fc2c 	bl	800efa0 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800c748:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c74c:	2200      	movs	r2, #0
 800c74e:	601a      	str	r2, [r3, #0]
 800c750:	605a      	str	r2, [r3, #4]
 800c752:	609a      	str	r2, [r3, #8]
 800c754:	60da      	str	r2, [r3, #12]
 800c756:	611a      	str	r2, [r3, #16]
 800c758:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800c75a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c75e:	2234      	movs	r2, #52	; 0x34
 800c760:	2100      	movs	r1, #0
 800c762:	4618      	mov	r0, r3
 800c764:	f002 fc1c 	bl	800efa0 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800c768:	463b      	mov	r3, r7
 800c76a:	222c      	movs	r2, #44	; 0x2c
 800c76c:	2100      	movs	r1, #0
 800c76e:	4618      	mov	r0, r3
 800c770:	f002 fc16 	bl	800efa0 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800c774:	4b64      	ldr	r3, [pc, #400]	; (800c908 <MX_DSIHOST_DSI_Init+0x1e0>)
 800c776:	4a65      	ldr	r2, [pc, #404]	; (800c90c <MX_DSIHOST_DSI_Init+0x1e4>)
 800c778:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800c77a:	4b63      	ldr	r3, [pc, #396]	; (800c908 <MX_DSIHOST_DSI_Init+0x1e0>)
 800c77c:	2200      	movs	r2, #0
 800c77e:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800c780:	4b61      	ldr	r3, [pc, #388]	; (800c908 <MX_DSIHOST_DSI_Init+0x1e0>)
 800c782:	2204      	movs	r2, #4
 800c784:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800c786:	4b60      	ldr	r3, [pc, #384]	; (800c908 <MX_DSIHOST_DSI_Init+0x1e0>)
 800c788:	2200      	movs	r2, #0
 800c78a:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 800c78c:	2314      	movs	r3, #20
 800c78e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800c792:	2301      	movs	r3, #1
 800c794:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800c798:	2300      	movs	r3, #0
 800c79a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800c79e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	4858      	ldr	r0, [pc, #352]	; (800c908 <MX_DSIHOST_DSI_Init+0x1e0>)
 800c7a6:	f7f7 fbc9 	bl	8003f3c <HAL_DSI_Init>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d001      	beq.n	800c7b4 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800c7b0:	f001 ff9a 	bl	800e6e8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800c7e6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	4846      	ldr	r0, [pc, #280]	; (800c908 <MX_DSIHOST_DSI_Init+0x1e0>)
 800c7ee:	f7f8 f9e1 	bl	8004bb4 <HAL_DSI_ConfigHostTimeouts>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d001      	beq.n	800c7fc <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800c7f8:	f001 ff76 	bl	800e6e8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 800c7fc:	231c      	movs	r3, #28
 800c7fe:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 800c800:	2321      	movs	r3, #33	; 0x21
 800c802:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800c804:	230f      	movs	r3, #15
 800c806:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800c808:	2319      	movs	r3, #25
 800c80a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 800c80c:	2300      	movs	r3, #0
 800c80e:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 800c810:	2300      	movs	r3, #0
 800c812:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800c814:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c818:	4619      	mov	r1, r3
 800c81a:	483b      	ldr	r0, [pc, #236]	; (800c908 <MX_DSIHOST_DSI_Init+0x1e0>)
 800c81c:	f7f8 f960 	bl	8004ae0 <HAL_DSI_ConfigPhyTimer>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d001      	beq.n	800c82a <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800c826:	f001 ff5f 	bl	800e6e8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800c82a:	2104      	movs	r1, #4
 800c82c:	4836      	ldr	r0, [pc, #216]	; (800c908 <MX_DSIHOST_DSI_Init+0x1e0>)
 800c82e:	f7f8 f92f 	bl	8004a90 <HAL_DSI_ConfigFlowControl>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d001      	beq.n	800c83c <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 800c838:	f001 ff56 	bl	800e6e8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800c83c:	f242 7110 	movw	r1, #10000	; 0x2710
 800c840:	4831      	ldr	r0, [pc, #196]	; (800c908 <MX_DSIHOST_DSI_Init+0x1e0>)
 800c842:	f7f8 fb75 	bl	8004f30 <HAL_DSI_SetLowPowerRXFilter>
 800c846:	4603      	mov	r3, r0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d001      	beq.n	800c850 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 800c84c:	f001 ff4c 	bl	800e6e8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800c850:	2100      	movs	r1, #0
 800c852:	482d      	ldr	r0, [pc, #180]	; (800c908 <MX_DSIHOST_DSI_Init+0x1e0>)
 800c854:	f7f7 fd00 	bl	8004258 <HAL_DSI_ConfigErrorMonitor>
 800c858:	4603      	mov	r3, r0
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d001      	beq.n	800c862 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800c85e:	f001 ff43 	bl	800e6e8 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 800c862:	2300      	movs	r3, #0
 800c864:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 800c866:	2300      	movs	r3, #0
 800c868:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 800c86a:	2300      	movs	r3, #0
 800c86c:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800c86e:	2300      	movs	r3, #0
 800c870:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 800c872:	2300      	movs	r3, #0
 800c874:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 800c876:	2300      	movs	r3, #0
 800c878:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 800c87a:	2300      	movs	r3, #0
 800c87c:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 800c87e:	2300      	movs	r3, #0
 800c880:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 800c882:	2300      	movs	r3, #0
 800c884:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 800c886:	2300      	movs	r3, #0
 800c888:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800c88a:	2300      	movs	r3, #0
 800c88c:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 800c88e:	2300      	movs	r3, #0
 800c890:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800c892:	2300      	movs	r3, #0
 800c894:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800c896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c89a:	4619      	mov	r1, r3
 800c89c:	481a      	ldr	r0, [pc, #104]	; (800c908 <MX_DSIHOST_DSI_Init+0x1e0>)
 800c89e:	f7f8 f899 	bl	80049d4 <HAL_DSI_ConfigCommand>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d001      	beq.n	800c8ac <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 800c8a8:	f001 ff1e 	bl	800e6e8 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 800c8b0:	2305      	movs	r3, #5
 800c8b2:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 800c8b4:	f44f 7320 	mov.w	r3, #640	; 0x280
 800c8b8:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800c8ba:	2310      	movs	r3, #16
 800c8bc:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800c8c2:	2304      	movs	r3, #4
 800c8c4:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800c8c6:	2302      	movs	r3, #2
 800c8c8:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800c8d2:	2340      	movs	r3, #64	; 0x40
 800c8d4:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800c8da:	463b      	mov	r3, r7
 800c8dc:	4619      	mov	r1, r3
 800c8de:	480a      	ldr	r0, [pc, #40]	; (800c908 <MX_DSIHOST_DSI_Init+0x1e0>)
 800c8e0:	f7f7 ff9e 	bl	8004820 <HAL_DSI_ConfigAdaptedCommandMode>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d001      	beq.n	800c8ee <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 800c8ea:	f001 fefd 	bl	800e6e8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	4805      	ldr	r0, [pc, #20]	; (800c908 <MX_DSIHOST_DSI_Init+0x1e0>)
 800c8f2:	f7f7 fd6d 	bl	80043d0 <HAL_DSI_SetGenericVCID>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d001      	beq.n	800c900 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 800c8fc:	f001 fef4 	bl	800e6e8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800c900:	bf00      	nop
 800c902:	37a8      	adds	r7, #168	; 0xa8
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	20000b20 	.word	0x20000b20
 800c90c:	40016c00 	.word	0x40016c00

0800c910 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b09a      	sub	sp, #104	; 0x68
 800c914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800c916:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c91a:	2234      	movs	r2, #52	; 0x34
 800c91c:	2100      	movs	r1, #0
 800c91e:	4618      	mov	r0, r3
 800c920:	f002 fb3e 	bl	800efa0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800c924:	463b      	mov	r3, r7
 800c926:	2234      	movs	r2, #52	; 0x34
 800c928:	2100      	movs	r1, #0
 800c92a:	4618      	mov	r0, r3
 800c92c:	f002 fb38 	bl	800efa0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800c930:	4b4e      	ldr	r3, [pc, #312]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c932:	4a4f      	ldr	r2, [pc, #316]	; (800ca70 <MX_LTDC_Init+0x160>)
 800c934:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800c936:	4b4d      	ldr	r3, [pc, #308]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c938:	2200      	movs	r2, #0
 800c93a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800c93c:	4b4b      	ldr	r3, [pc, #300]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c93e:	2200      	movs	r2, #0
 800c940:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800c942:	4b4a      	ldr	r3, [pc, #296]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c944:	2200      	movs	r2, #0
 800c946:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800c948:	4b48      	ldr	r3, [pc, #288]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c94a:	2200      	movs	r2, #0
 800c94c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800c94e:	4b47      	ldr	r3, [pc, #284]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c950:	2207      	movs	r2, #7
 800c952:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800c954:	4b45      	ldr	r3, [pc, #276]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c956:	2203      	movs	r2, #3
 800c958:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800c95a:	4b44      	ldr	r3, [pc, #272]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c95c:	220e      	movs	r2, #14
 800c95e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800c960:	4b42      	ldr	r3, [pc, #264]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c962:	2205      	movs	r2, #5
 800c964:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800c966:	4b41      	ldr	r3, [pc, #260]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c968:	f240 228e 	movw	r2, #654	; 0x28e
 800c96c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800c96e:	4b3f      	ldr	r3, [pc, #252]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c970:	f240 12e5 	movw	r2, #485	; 0x1e5
 800c974:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800c976:	4b3d      	ldr	r3, [pc, #244]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c978:	f44f 7225 	mov.w	r2, #660	; 0x294
 800c97c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800c97e:	4b3b      	ldr	r3, [pc, #236]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c980:	f240 12e7 	movw	r2, #487	; 0x1e7
 800c984:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800c986:	4b39      	ldr	r3, [pc, #228]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c988:	2200      	movs	r2, #0
 800c98a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800c98e:	4b37      	ldr	r3, [pc, #220]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c990:	2200      	movs	r2, #0
 800c992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800c996:	4b35      	ldr	r3, [pc, #212]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c998:	2200      	movs	r2, #0
 800c99a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800c99e:	4833      	ldr	r0, [pc, #204]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c9a0:	f7f9 fb38 	bl	8006014 <HAL_LTDC_Init>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d001      	beq.n	800c9ae <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800c9aa:	f001 fe9d 	bl	800e6e8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800c9ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9ce:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800c9d0:	2305      	movs	r3, #5
 800c9d2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800c9f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	481c      	ldr	r0, [pc, #112]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800c9fc:	f7f9 fbda 	bl	80061b4 <HAL_LTDC_ConfigLayer>
 800ca00:	4603      	mov	r3, r0
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800ca06:	f001 fe6f 	bl	800e6e8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800ca12:	2300      	movs	r3, #0
 800ca14:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800ca16:	2300      	movs	r3, #0
 800ca18:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800ca22:	2300      	movs	r3, #0
 800ca24:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800ca26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca2a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800ca2c:	2305      	movs	r3, #5
 800ca2e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800ca30:	2300      	movs	r3, #0
 800ca32:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800ca42:	2300      	movs	r3, #0
 800ca44:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800ca4e:	463b      	mov	r3, r7
 800ca50:	2201      	movs	r2, #1
 800ca52:	4619      	mov	r1, r3
 800ca54:	4805      	ldr	r0, [pc, #20]	; (800ca6c <MX_LTDC_Init+0x15c>)
 800ca56:	f7f9 fbad 	bl	80061b4 <HAL_LTDC_ConfigLayer>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d001      	beq.n	800ca64 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800ca60:	f001 fe42 	bl	800e6e8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800ca64:	bf00      	nop
 800ca66:	3768      	adds	r7, #104	; 0x68
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	20000be0 	.word	0x20000be0
 800ca70:	40016800 	.word	0x40016800

0800ca74 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800ca74:	b480      	push	{r7}
 800ca76:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800ca78:	4b0c      	ldr	r3, [pc, #48]	; (800caac <MX_SDMMC2_SD_Init+0x38>)
 800ca7a:	4a0d      	ldr	r2, [pc, #52]	; (800cab0 <MX_SDMMC2_SD_Init+0x3c>)
 800ca7c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800ca7e:	4b0b      	ldr	r3, [pc, #44]	; (800caac <MX_SDMMC2_SD_Init+0x38>)
 800ca80:	2200      	movs	r2, #0
 800ca82:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800ca84:	4b09      	ldr	r3, [pc, #36]	; (800caac <MX_SDMMC2_SD_Init+0x38>)
 800ca86:	2200      	movs	r2, #0
 800ca88:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ca8a:	4b08      	ldr	r3, [pc, #32]	; (800caac <MX_SDMMC2_SD_Init+0x38>)
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800ca90:	4b06      	ldr	r3, [pc, #24]	; (800caac <MX_SDMMC2_SD_Init+0x38>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ca96:	4b05      	ldr	r3, [pc, #20]	; (800caac <MX_SDMMC2_SD_Init+0x38>)
 800ca98:	2200      	movs	r2, #0
 800ca9a:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 800ca9c:	4b03      	ldr	r3, [pc, #12]	; (800caac <MX_SDMMC2_SD_Init+0x38>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800caa2:	bf00      	nop
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr
 800caac:	20000b5c 	.word	0x20000b5c
 800cab0:	40011c00 	.word	0x40011c00

0800cab4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800caba:	1d3b      	adds	r3, r7, #4
 800cabc:	2200      	movs	r2, #0
 800cabe:	601a      	str	r2, [r3, #0]
 800cac0:	605a      	str	r2, [r3, #4]
 800cac2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800cac4:	4b15      	ldr	r3, [pc, #84]	; (800cb1c <MX_TIM6_Init+0x68>)
 800cac6:	4a16      	ldr	r2, [pc, #88]	; (800cb20 <MX_TIM6_Init+0x6c>)
 800cac8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 800caca:	4b14      	ldr	r3, [pc, #80]	; (800cb1c <MX_TIM6_Init+0x68>)
 800cacc:	f242 720f 	movw	r2, #9999	; 0x270f
 800cad0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cad2:	4b12      	ldr	r3, [pc, #72]	; (800cb1c <MX_TIM6_Init+0x68>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 800cad8:	4b10      	ldr	r3, [pc, #64]	; (800cb1c <MX_TIM6_Init+0x68>)
 800cada:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800cade:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cae0:	4b0e      	ldr	r3, [pc, #56]	; (800cb1c <MX_TIM6_Init+0x68>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800cae6:	480d      	ldr	r0, [pc, #52]	; (800cb1c <MX_TIM6_Init+0x68>)
 800cae8:	f7fc f80c 	bl	8008b04 <HAL_TIM_Base_Init>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800caf2:	f001 fdf9 	bl	800e6e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800caf6:	2300      	movs	r3, #0
 800caf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cafa:	2300      	movs	r3, #0
 800cafc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800cafe:	1d3b      	adds	r3, r7, #4
 800cb00:	4619      	mov	r1, r3
 800cb02:	4806      	ldr	r0, [pc, #24]	; (800cb1c <MX_TIM6_Init+0x68>)
 800cb04:	f7fc fa3c 	bl	8008f80 <HAL_TIMEx_MasterConfigSynchronization>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800cb0e:	f001 fdeb 	bl	800e6e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800cb12:	bf00      	nop
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	20000cf0 	.word	0x20000cf0
 800cb20:	40001000 	.word	0x40001000

0800cb24 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cb2a:	1d3b      	adds	r3, r7, #4
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	601a      	str	r2, [r3, #0]
 800cb30:	605a      	str	r2, [r3, #4]
 800cb32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800cb34:	4b15      	ldr	r3, [pc, #84]	; (800cb8c <MX_TIM7_Init+0x68>)
 800cb36:	4a16      	ldr	r2, [pc, #88]	; (800cb90 <MX_TIM7_Init+0x6c>)
 800cb38:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 800cb3a:	4b14      	ldr	r3, [pc, #80]	; (800cb8c <MX_TIM7_Init+0x68>)
 800cb3c:	f242 720f 	movw	r2, #9999	; 0x270f
 800cb40:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cb42:	4b12      	ldr	r3, [pc, #72]	; (800cb8c <MX_TIM7_Init+0x68>)
 800cb44:	2200      	movs	r2, #0
 800cb46:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800cb48:	4b10      	ldr	r3, [pc, #64]	; (800cb8c <MX_TIM7_Init+0x68>)
 800cb4a:	f242 720f 	movw	r2, #9999	; 0x270f
 800cb4e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cb50:	4b0e      	ldr	r3, [pc, #56]	; (800cb8c <MX_TIM7_Init+0x68>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800cb56:	480d      	ldr	r0, [pc, #52]	; (800cb8c <MX_TIM7_Init+0x68>)
 800cb58:	f7fb ffd4 	bl	8008b04 <HAL_TIM_Base_Init>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d001      	beq.n	800cb66 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800cb62:	f001 fdc1 	bl	800e6e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cb66:	2300      	movs	r3, #0
 800cb68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800cb6e:	1d3b      	adds	r3, r7, #4
 800cb70:	4619      	mov	r1, r3
 800cb72:	4806      	ldr	r0, [pc, #24]	; (800cb8c <MX_TIM7_Init+0x68>)
 800cb74:	f7fc fa04 	bl	8008f80 <HAL_TIMEx_MasterConfigSynchronization>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d001      	beq.n	800cb82 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800cb7e:	f001 fdb3 	bl	800e6e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800cb82:	bf00      	nop
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	20000e1c 	.word	0x20000e1c
 800cb90:	40001400 	.word	0x40001400

0800cb94 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b088      	sub	sp, #32
 800cb98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800cb9a:	1d3b      	adds	r3, r7, #4
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	601a      	str	r2, [r3, #0]
 800cba0:	605a      	str	r2, [r3, #4]
 800cba2:	609a      	str	r2, [r3, #8]
 800cba4:	60da      	str	r2, [r3, #12]
 800cba6:	611a      	str	r2, [r3, #16]
 800cba8:	615a      	str	r2, [r3, #20]
 800cbaa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800cbac:	4b1e      	ldr	r3, [pc, #120]	; (800cc28 <MX_FMC_Init+0x94>)
 800cbae:	4a1f      	ldr	r2, [pc, #124]	; (800cc2c <MX_FMC_Init+0x98>)
 800cbb0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800cbb2:	4b1d      	ldr	r3, [pc, #116]	; (800cc28 <MX_FMC_Init+0x94>)
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800cbb8:	4b1b      	ldr	r3, [pc, #108]	; (800cc28 <MX_FMC_Init+0x94>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800cbbe:	4b1a      	ldr	r3, [pc, #104]	; (800cc28 <MX_FMC_Init+0x94>)
 800cbc0:	2208      	movs	r2, #8
 800cbc2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800cbc4:	4b18      	ldr	r3, [pc, #96]	; (800cc28 <MX_FMC_Init+0x94>)
 800cbc6:	2220      	movs	r2, #32
 800cbc8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800cbca:	4b17      	ldr	r3, [pc, #92]	; (800cc28 <MX_FMC_Init+0x94>)
 800cbcc:	2240      	movs	r2, #64	; 0x40
 800cbce:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800cbd0:	4b15      	ldr	r3, [pc, #84]	; (800cc28 <MX_FMC_Init+0x94>)
 800cbd2:	2280      	movs	r2, #128	; 0x80
 800cbd4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800cbd6:	4b14      	ldr	r3, [pc, #80]	; (800cc28 <MX_FMC_Init+0x94>)
 800cbd8:	2200      	movs	r2, #0
 800cbda:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800cbdc:	4b12      	ldr	r3, [pc, #72]	; (800cc28 <MX_FMC_Init+0x94>)
 800cbde:	2200      	movs	r2, #0
 800cbe0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800cbe2:	4b11      	ldr	r3, [pc, #68]	; (800cc28 <MX_FMC_Init+0x94>)
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800cbe8:	4b0f      	ldr	r3, [pc, #60]	; (800cc28 <MX_FMC_Init+0x94>)
 800cbea:	2200      	movs	r2, #0
 800cbec:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800cbee:	2310      	movs	r3, #16
 800cbf0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800cbf2:	2310      	movs	r3, #16
 800cbf4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800cbf6:	2310      	movs	r3, #16
 800cbf8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800cbfa:	2310      	movs	r3, #16
 800cbfc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800cbfe:	2310      	movs	r3, #16
 800cc00:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800cc02:	2310      	movs	r3, #16
 800cc04:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800cc06:	2310      	movs	r3, #16
 800cc08:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800cc0a:	1d3b      	adds	r3, r7, #4
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	4806      	ldr	r0, [pc, #24]	; (800cc28 <MX_FMC_Init+0x94>)
 800cc10:	f7fb fef9 	bl	8008a06 <HAL_SDRAM_Init>
 800cc14:	4603      	mov	r3, r0
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d001      	beq.n	800cc1e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800cc1a:	f001 fd65 	bl	800e6e8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800cc1e:	bf00      	nop
 800cc20:	3720      	adds	r7, #32
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	20000de8 	.word	0x20000de8
 800cc2c:	a0000140 	.word	0xa0000140

0800cc30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b08e      	sub	sp, #56	; 0x38
 800cc34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	601a      	str	r2, [r3, #0]
 800cc3e:	605a      	str	r2, [r3, #4]
 800cc40:	609a      	str	r2, [r3, #8]
 800cc42:	60da      	str	r2, [r3, #12]
 800cc44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cc46:	4b53      	ldr	r3, [pc, #332]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cc48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc4a:	4a52      	ldr	r2, [pc, #328]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cc4c:	f043 0310 	orr.w	r3, r3, #16
 800cc50:	6313      	str	r3, [r2, #48]	; 0x30
 800cc52:	4b50      	ldr	r3, [pc, #320]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc56:	f003 0310 	and.w	r3, r3, #16
 800cc5a:	623b      	str	r3, [r7, #32]
 800cc5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cc5e:	4b4d      	ldr	r3, [pc, #308]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cc60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc62:	4a4c      	ldr	r2, [pc, #304]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cc64:	f043 0302 	orr.w	r3, r3, #2
 800cc68:	6313      	str	r3, [r2, #48]	; 0x30
 800cc6a:	4b4a      	ldr	r3, [pc, #296]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cc6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc6e:	f003 0302 	and.w	r3, r3, #2
 800cc72:	61fb      	str	r3, [r7, #28]
 800cc74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cc76:	4b47      	ldr	r3, [pc, #284]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cc78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc7a:	4a46      	ldr	r2, [pc, #280]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cc7c:	f043 0308 	orr.w	r3, r3, #8
 800cc80:	6313      	str	r3, [r2, #48]	; 0x30
 800cc82:	4b44      	ldr	r3, [pc, #272]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cc84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc86:	f003 0308 	and.w	r3, r3, #8
 800cc8a:	61bb      	str	r3, [r7, #24]
 800cc8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800cc8e:	4b41      	ldr	r3, [pc, #260]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cc90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc92:	4a40      	ldr	r2, [pc, #256]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cc94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc98:	6313      	str	r3, [r2, #48]	; 0x30
 800cc9a:	4b3e      	ldr	r3, [pc, #248]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cca2:	617b      	str	r3, [r7, #20]
 800cca4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800cca6:	4b3b      	ldr	r3, [pc, #236]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccaa:	4a3a      	ldr	r2, [pc, #232]	; (800cd94 <MX_GPIO_Init+0x164>)
 800ccac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccb0:	6313      	str	r3, [r2, #48]	; 0x30
 800ccb2:	4b38      	ldr	r3, [pc, #224]	; (800cd94 <MX_GPIO_Init+0x164>)
 800ccb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccba:	613b      	str	r3, [r7, #16]
 800ccbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800ccbe:	4b35      	ldr	r3, [pc, #212]	; (800cd94 <MX_GPIO_Init+0x164>)
 800ccc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc2:	4a34      	ldr	r2, [pc, #208]	; (800cd94 <MX_GPIO_Init+0x164>)
 800ccc4:	f043 0320 	orr.w	r3, r3, #32
 800ccc8:	6313      	str	r3, [r2, #48]	; 0x30
 800ccca:	4b32      	ldr	r3, [pc, #200]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccce:	f003 0320 	and.w	r3, r3, #32
 800ccd2:	60fb      	str	r3, [r7, #12]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ccd6:	4b2f      	ldr	r3, [pc, #188]	; (800cd94 <MX_GPIO_Init+0x164>)
 800ccd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccda:	4a2e      	ldr	r2, [pc, #184]	; (800cd94 <MX_GPIO_Init+0x164>)
 800ccdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cce0:	6313      	str	r3, [r2, #48]	; 0x30
 800cce2:	4b2c      	ldr	r3, [pc, #176]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccea:	60bb      	str	r3, [r7, #8]
 800ccec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ccee:	4b29      	ldr	r3, [pc, #164]	; (800cd94 <MX_GPIO_Init+0x164>)
 800ccf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccf2:	4a28      	ldr	r2, [pc, #160]	; (800cd94 <MX_GPIO_Init+0x164>)
 800ccf4:	f043 0301 	orr.w	r3, r3, #1
 800ccf8:	6313      	str	r3, [r2, #48]	; 0x30
 800ccfa:	4b26      	ldr	r3, [pc, #152]	; (800cd94 <MX_GPIO_Init+0x164>)
 800ccfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccfe:	f003 0301 	and.w	r3, r3, #1
 800cd02:	607b      	str	r3, [r7, #4]
 800cd04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800cd06:	4b23      	ldr	r3, [pc, #140]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd0a:	4a22      	ldr	r2, [pc, #136]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cd0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cd10:	6313      	str	r3, [r2, #48]	; 0x30
 800cd12:	4b20      	ldr	r3, [pc, #128]	; (800cd94 <MX_GPIO_Init+0x164>)
 800cd14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd1a:	603b      	str	r3, [r7, #0]
 800cd1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800cd1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cd22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cd24:	4b1c      	ldr	r3, [pc, #112]	; (800cd98 <MX_GPIO_Init+0x168>)
 800cd26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cd2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd30:	4619      	mov	r1, r3
 800cd32:	481a      	ldr	r0, [pc, #104]	; (800cd9c <MX_GPIO_Init+0x16c>)
 800cd34:	f7f8 f92a 	bl	8004f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800cd38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd42:	2300      	movs	r3, #0
 800cd44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cd46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	4813      	ldr	r0, [pc, #76]	; (800cd9c <MX_GPIO_Init+0x16c>)
 800cd4e:	f7f8 f91d 	bl	8004f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800cd52:	2301      	movs	r3, #1
 800cd54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cd56:	4b10      	ldr	r3, [pc, #64]	; (800cd98 <MX_GPIO_Init+0x168>)
 800cd58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd62:	4619      	mov	r1, r3
 800cd64:	480e      	ldr	r0, [pc, #56]	; (800cda0 <MX_GPIO_Init+0x170>)
 800cd66:	f7f8 f911 	bl	8004f8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	2006      	movs	r0, #6
 800cd70:	f7f6 fc01 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800cd74:	2006      	movs	r0, #6
 800cd76:	f7f6 fc1a 	bl	80035ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	2028      	movs	r0, #40	; 0x28
 800cd80:	f7f6 fbf9 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800cd84:	2028      	movs	r0, #40	; 0x28
 800cd86:	f7f6 fc12 	bl	80035ae <HAL_NVIC_EnableIRQ>

}
 800cd8a:	bf00      	nop
 800cd8c:	3738      	adds	r7, #56	; 0x38
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	40023800 	.word	0x40023800
 800cd98:	10110000 	.word	0x10110000
 800cd9c:	40022000 	.word	0x40022000
 800cda0:	40020000 	.word	0x40020000

0800cda4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	4603      	mov	r3, r0
 800cdac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800cdae:	88fb      	ldrh	r3, [r7, #6]
 800cdb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdb4:	d105      	bne.n	800cdc2 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		touchScreenFlag=1;
 800cdb6:	4b08      	ldr	r3, [pc, #32]	; (800cdd8 <HAL_GPIO_EXTI_Callback+0x34>)
 800cdb8:	2201      	movs	r2, #1
 800cdba:	701a      	strb	r2, [r3, #0]
		BSP_TS_GetState(&TS_State);
 800cdbc:	4807      	ldr	r0, [pc, #28]	; (800cddc <HAL_GPIO_EXTI_Callback+0x38>)
 800cdbe:	f7f5 fc83 	bl	80026c8 <BSP_TS_GetState>
	}

	if(GPIO_Pin ==  GPIO_PIN_0)
 800cdc2:	88fb      	ldrh	r3, [r7, #6]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d102      	bne.n	800cdce <HAL_GPIO_EXTI_Callback+0x2a>
	{
		blueButtonFlag=1;
 800cdc8:	4b05      	ldr	r3, [pc, #20]	; (800cde0 <HAL_GPIO_EXTI_Callback+0x3c>)
 800cdca:	2201      	movs	r2, #1
 800cdcc:	701a      	strb	r2, [r3, #0]
	}
}
 800cdce:	bf00      	nop
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	20000545 	.word	0x20000545
 800cddc:	20000dc0 	.word	0x20000dc0
 800cde0:	20000544 	.word	0x20000544

0800cde4 <LCD_Config>:

static void LCD_Config(void)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
	uint32_t lcd_status = LCD_OK;
 800cdea:	2300      	movs	r3, #0
 800cdec:	607b      	str	r3, [r7, #4]

	lcd_status = BSP_LCD_Init();
 800cdee:	f7f4 f9fa 	bl	80011e6 <BSP_LCD_Init>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	607b      	str	r3, [r7, #4]
	while(lcd_status != LCD_OK);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1fc      	bne.n	800cdf6 <LCD_Config+0x12>

	BSP_LCD_LayerDefaultInit(0,LAYER0_ADDRESS);
 800cdfc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800ce00:	2000      	movs	r0, #0
 800ce02:	f7f4 fb8d 	bl	8001520 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800ce06:	f04f 30ff 	mov.w	r0, #4294967295
 800ce0a:	f7f4 fc31 	bl	8001670 <BSP_LCD_Clear>
}
 800ce0e:	bf00      	nop
 800ce10:	3708      	adds	r7, #8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
	...

0800ce18 <displayGame>:

static void displayGame()
{
 800ce18:	b5b0      	push	{r4, r5, r7, lr}
 800ce1a:	b090      	sub	sp, #64	; 0x40
 800ce1c:	af00      	add	r7, sp, #0
	char string[50];
	int i,j;

	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800ce1e:	488f      	ldr	r0, [pc, #572]	; (800d05c <displayGame+0x244>)
 800ce20:	f7f4 fbde 	bl	80015e0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 800ce24:	488e      	ldr	r0, [pc, #568]	; (800d060 <displayGame+0x248>)
 800ce26:	f7f4 fbf3 	bl	8001610 <BSP_LCD_SetFont>
	sprintf(string, "PLAY REVERSI WITH YOUR ARM");
 800ce2a:	1d3b      	adds	r3, r7, #4
 800ce2c:	4a8d      	ldr	r2, [pc, #564]	; (800d064 <displayGame+0x24c>)
 800ce2e:	461c      	mov	r4, r3
 800ce30:	4615      	mov	r5, r2
 800ce32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ce3a:	c403      	stmia	r4!, {r0, r1}
 800ce3c:	8022      	strh	r2, [r4, #0]
 800ce3e:	3402      	adds	r4, #2
 800ce40:	0c13      	lsrs	r3, r2, #16
 800ce42:	7023      	strb	r3, [r4, #0]
	BSP_LCD_DisplayStringAt(0,LINE(0), (uint8_t *)string, CENTER_MODE);
 800ce44:	f7f4 fbfe 	bl	8001644 <BSP_LCD_GetFont>
 800ce48:	1d3a      	adds	r2, r7, #4
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	2000      	movs	r0, #0
 800ce50:	f7f4 fcde 	bl	8001810 <BSP_LCD_DisplayStringAt>

	sprintf(string, "MENU");
 800ce54:	1d3b      	adds	r3, r7, #4
 800ce56:	4a84      	ldr	r2, [pc, #528]	; (800d068 <displayGame+0x250>)
 800ce58:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce5c:	6018      	str	r0, [r3, #0]
 800ce5e:	3304      	adds	r3, #4
 800ce60:	7019      	strb	r1, [r3, #0]
	BSP_LCD_DisplayStringAt(205,LINE(9), (uint8_t *)string, CENTER_MODE);
 800ce62:	f7f4 fbef 	bl	8001644 <BSP_LCD_GetFont>
 800ce66:	4603      	mov	r3, r0
 800ce68:	88db      	ldrh	r3, [r3, #6]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	00d2      	lsls	r2, r2, #3
 800ce6e:	4413      	add	r3, r2
 800ce70:	b299      	uxth	r1, r3
 800ce72:	1d3a      	adds	r2, r7, #4
 800ce74:	2301      	movs	r3, #1
 800ce76:	20cd      	movs	r0, #205	; 0xcd
 800ce78:	f7f4 fcca 	bl	8001810 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800ce7c:	487b      	ldr	r0, [pc, #492]	; (800d06c <displayGame+0x254>)
 800ce7e:	f7f4 fbaf 	bl	80015e0 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(420,205,370,245);
 800ce82:	23f5      	movs	r3, #245	; 0xf5
 800ce84:	f44f 72b9 	mov.w	r2, #370	; 0x172
 800ce88:	21cd      	movs	r1, #205	; 0xcd
 800ce8a:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800ce8e:	f7f4 fe03 	bl	8001a98 <BSP_LCD_DrawRect>

	BSP_LCD_DrawRect(455,250,300,50); //botão 1 do menu
 800ce92:	2332      	movs	r3, #50	; 0x32
 800ce94:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ce98:	21fa      	movs	r1, #250	; 0xfa
 800ce9a:	f240 10c7 	movw	r0, #455	; 0x1c7
 800ce9e:	f7f4 fdfb 	bl	8001a98 <BSP_LCD_DrawRect>
	sprintf(string, "Human vs. Human");
 800cea2:	1d3b      	adds	r3, r7, #4
 800cea4:	4a72      	ldr	r2, [pc, #456]	; (800d070 <displayGame+0x258>)
 800cea6:	461c      	mov	r4, r3
 800cea8:	4613      	mov	r3, r2
 800ceaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ceac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BSP_LCD_DisplayStringAt(205,LINE(11), (uint8_t *)string, CENTER_MODE);
 800ceb0:	f7f4 fbc8 	bl	8001644 <BSP_LCD_GetFont>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	88db      	ldrh	r3, [r3, #6]
 800ceb8:	461a      	mov	r2, r3
 800ceba:	0092      	lsls	r2, r2, #2
 800cebc:	441a      	add	r2, r3
 800cebe:	0052      	lsls	r2, r2, #1
 800cec0:	4413      	add	r3, r2
 800cec2:	b299      	uxth	r1, r3
 800cec4:	1d3a      	adds	r2, r7, #4
 800cec6:	2301      	movs	r3, #1
 800cec8:	20cd      	movs	r0, #205	; 0xcd
 800ceca:	f7f4 fca1 	bl	8001810 <BSP_LCD_DisplayStringAt>

	BSP_LCD_DrawRect(455,310,300,50); //botão 2 do menu
 800cece:	2332      	movs	r3, #50	; 0x32
 800ced0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ced4:	f44f 719b 	mov.w	r1, #310	; 0x136
 800ced8:	f240 10c7 	movw	r0, #455	; 0x1c7
 800cedc:	f7f4 fddc 	bl	8001a98 <BSP_LCD_DrawRect>
	sprintf(string, "Human vs. ARM");
 800cee0:	1d3b      	adds	r3, r7, #4
 800cee2:	4a64      	ldr	r2, [pc, #400]	; (800d074 <displayGame+0x25c>)
 800cee4:	461c      	mov	r4, r3
 800cee6:	4613      	mov	r3, r2
 800cee8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ceea:	c407      	stmia	r4!, {r0, r1, r2}
 800ceec:	8023      	strh	r3, [r4, #0]
	BSP_LCD_DisplayStringAt(205,LINE(11)+60, (uint8_t *)string, CENTER_MODE);
 800ceee:	f7f4 fba9 	bl	8001644 <BSP_LCD_GetFont>
 800cef2:	4603      	mov	r3, r0
 800cef4:	88db      	ldrh	r3, [r3, #6]
 800cef6:	461a      	mov	r2, r3
 800cef8:	0092      	lsls	r2, r2, #2
 800cefa:	441a      	add	r2, r3
 800cefc:	0052      	lsls	r2, r2, #1
 800cefe:	4413      	add	r3, r2
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	333c      	adds	r3, #60	; 0x3c
 800cf04:	b299      	uxth	r1, r3
 800cf06:	1d3a      	adds	r2, r7, #4
 800cf08:	2301      	movs	r3, #1
 800cf0a:	20cd      	movs	r0, #205	; 0xcd
 800cf0c:	f7f4 fc80 	bl	8001810 <BSP_LCD_DisplayStringAt>

	 BSP_LCD_DrawRect(455,370,300,50);//botão 3 do menu
 800cf10:	2332      	movs	r3, #50	; 0x32
 800cf12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800cf16:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800cf1a:	f240 10c7 	movw	r0, #455	; 0x1c7
 800cf1e:	f7f4 fdbb 	bl	8001a98 <BSP_LCD_DrawRect>
	 sprintf(string, "Save to SDCard");
 800cf22:	1d3b      	adds	r3, r7, #4
 800cf24:	4a54      	ldr	r2, [pc, #336]	; (800d078 <displayGame+0x260>)
 800cf26:	461c      	mov	r4, r3
 800cf28:	4613      	mov	r3, r2
 800cf2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cf2c:	c407      	stmia	r4!, {r0, r1, r2}
 800cf2e:	8023      	strh	r3, [r4, #0]
 800cf30:	3402      	adds	r4, #2
 800cf32:	0c1b      	lsrs	r3, r3, #16
 800cf34:	7023      	strb	r3, [r4, #0]
	 BSP_LCD_DisplayStringAt(205,LINE(16), (uint8_t *)string, CENTER_MODE);
 800cf36:	f7f4 fb85 	bl	8001644 <BSP_LCD_GetFont>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	88db      	ldrh	r3, [r3, #6]
 800cf3e:	011b      	lsls	r3, r3, #4
 800cf40:	b299      	uxth	r1, r3
 800cf42:	1d3a      	adds	r2, r7, #4
 800cf44:	2301      	movs	r3, #1
 800cf46:	20cd      	movs	r0, #205	; 0xcd
 800cf48:	f7f4 fc62 	bl	8001810 <BSP_LCD_DisplayStringAt>

		 BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800cf4c:	4843      	ldr	r0, [pc, #268]	; (800d05c <displayGame+0x244>)
 800cf4e:	f7f4 fb47 	bl	80015e0 <BSP_LCD_SetTextColor>
		 sprintf(string, "Game Information");
 800cf52:	1d3b      	adds	r3, r7, #4
 800cf54:	4a49      	ldr	r2, [pc, #292]	; (800d07c <displayGame+0x264>)
 800cf56:	461c      	mov	r4, r3
 800cf58:	4615      	mov	r5, r2
 800cf5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf5e:	682b      	ldr	r3, [r5, #0]
 800cf60:	7023      	strb	r3, [r4, #0]
		 BSP_LCD_DisplayStringAt(200,LINE(3), (uint8_t *)string, CENTER_MODE);
 800cf62:	f7f4 fb6f 	bl	8001644 <BSP_LCD_GetFont>
 800cf66:	4603      	mov	r3, r0
 800cf68:	88db      	ldrh	r3, [r3, #6]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	0052      	lsls	r2, r2, #1
 800cf6e:	4413      	add	r3, r2
 800cf70:	b299      	uxth	r1, r3
 800cf72:	1d3a      	adds	r2, r7, #4
 800cf74:	2301      	movs	r3, #1
 800cf76:	20c8      	movs	r0, #200	; 0xc8
 800cf78:	f7f4 fc4a 	bl	8001810 <BSP_LCD_DisplayStringAt>
		 BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800cf7c:	483b      	ldr	r0, [pc, #236]	; (800d06c <displayGame+0x254>)
 800cf7e:	f7f4 fb2f 	bl	80015e0 <BSP_LCD_SetTextColor>
		 BSP_LCD_DrawRect(420,50,370,145);
 800cf82:	2391      	movs	r3, #145	; 0x91
 800cf84:	f44f 72b9 	mov.w	r2, #370	; 0x172
 800cf88:	2132      	movs	r1, #50	; 0x32
 800cf8a:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800cf8e:	f7f4 fd83 	bl	8001a98 <BSP_LCD_DrawRect>

	 sprintf(string, "Realizado por: Joao Gomes");
 800cf92:	1d3b      	adds	r3, r7, #4
 800cf94:	4a3a      	ldr	r2, [pc, #232]	; (800d080 <displayGame+0x268>)
 800cf96:	461c      	mov	r4, r3
 800cf98:	4615      	mov	r5, r2
 800cf9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cfa2:	c403      	stmia	r4!, {r0, r1}
 800cfa4:	8022      	strh	r2, [r4, #0]
	 BSP_LCD_DisplayStringAt(10,LINE(29), (uint8_t *)string, LEFT_MODE);
 800cfa6:	f7f4 fb4d 	bl	8001644 <BSP_LCD_GetFont>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	88db      	ldrh	r3, [r3, #6]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	00d2      	lsls	r2, r2, #3
 800cfb2:	1ad2      	subs	r2, r2, r3
 800cfb4:	0092      	lsls	r2, r2, #2
 800cfb6:	4413      	add	r3, r2
 800cfb8:	b299      	uxth	r1, r3
 800cfba:	1d3a      	adds	r2, r7, #4
 800cfbc:	2303      	movs	r3, #3
 800cfbe:	200a      	movs	r0, #10
 800cfc0:	f7f4 fc26 	bl	8001810 <BSP_LCD_DisplayStringAt>

	 BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800cfc4:	482f      	ldr	r0, [pc, #188]	; (800d084 <displayGame+0x26c>)
 800cfc6:	f7f4 fb0b 	bl	80015e0 <BSP_LCD_SetTextColor>
	 BSP_LCD_FillRect(10,50,400,400);
 800cfca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cfce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800cfd2:	2132      	movs	r1, #50	; 0x32
 800cfd4:	200a      	movs	r0, #10
 800cfd6:	f7f4 fe81 	bl	8001cdc <BSP_LCD_FillRect>


	 BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800cfda:	4824      	ldr	r0, [pc, #144]	; (800d06c <displayGame+0x254>)
 800cfdc:	f7f4 fb00 	bl	80015e0 <BSP_LCD_SetTextColor>
	 for(i=0;i<BOARDSIZE;i++)
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfe4:	e02a      	b.n	800d03c <displayGame+0x224>
	 {
		 for(j=0;j<BOARDSIZE;j++)
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	63bb      	str	r3, [r7, #56]	; 0x38
 800cfea:	e021      	b.n	800d030 <displayGame+0x218>
		 {
			 BSP_LCD_DrawRect(10+BOARDCELLSIZE*j,50+BOARDCELLSIZE*i,BOARDCELLSIZE,BOARDCELLSIZE);
 800cfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	461a      	mov	r2, r3
 800cff2:	0092      	lsls	r2, r2, #2
 800cff4:	4413      	add	r3, r2
 800cff6:	461a      	mov	r2, r3
 800cff8:	0091      	lsls	r1, r2, #2
 800cffa:	461a      	mov	r2, r3
 800cffc:	460b      	mov	r3, r1
 800cffe:	4413      	add	r3, r2
 800d000:	005b      	lsls	r3, r3, #1
 800d002:	b29b      	uxth	r3, r3
 800d004:	330a      	adds	r3, #10
 800d006:	b298      	uxth	r0, r3
 800d008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d00a:	3301      	adds	r3, #1
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	461a      	mov	r2, r3
 800d010:	0092      	lsls	r2, r2, #2
 800d012:	4413      	add	r3, r2
 800d014:	461a      	mov	r2, r3
 800d016:	0091      	lsls	r1, r2, #2
 800d018:	461a      	mov	r2, r3
 800d01a:	460b      	mov	r3, r1
 800d01c:	4413      	add	r3, r2
 800d01e:	005b      	lsls	r3, r3, #1
 800d020:	b299      	uxth	r1, r3
 800d022:	2332      	movs	r3, #50	; 0x32
 800d024:	2232      	movs	r2, #50	; 0x32
 800d026:	f7f4 fd37 	bl	8001a98 <BSP_LCD_DrawRect>
		 for(j=0;j<BOARDSIZE;j++)
 800d02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02c:	3301      	adds	r3, #1
 800d02e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d032:	2b07      	cmp	r3, #7
 800d034:	ddda      	ble.n	800cfec <displayGame+0x1d4>
	 for(i=0;i<BOARDSIZE;i++)
 800d036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d038:	3301      	adds	r3, #1
 800d03a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d03e:	2b07      	cmp	r3, #7
 800d040:	ddd1      	ble.n	800cfe6 <displayGame+0x1ce>
		 }
	 }
	 BSP_LCD_DrawRect(5,25,790,430);
 800d042:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 800d046:	f240 3216 	movw	r2, #790	; 0x316
 800d04a:	2119      	movs	r1, #25
 800d04c:	2005      	movs	r0, #5
 800d04e:	f7f4 fd23 	bl	8001a98 <BSP_LCD_DrawRect>



}
 800d052:	bf00      	nop
 800d054:	3740      	adds	r7, #64	; 0x40
 800d056:	46bd      	mov	sp, r7
 800d058:	bdb0      	pop	{r4, r5, r7, pc}
 800d05a:	bf00      	nop
 800d05c:	ff000080 	.word	0xff000080
 800d060:	2000003c 	.word	0x2000003c
 800d064:	0800f95c 	.word	0x0800f95c
 800d068:	0800f978 	.word	0x0800f978
 800d06c:	ff0000ff 	.word	0xff0000ff
 800d070:	0800f980 	.word	0x0800f980
 800d074:	0800f990 	.word	0x0800f990
 800d078:	0800f9a0 	.word	0x0800f9a0
 800d07c:	0800f9b0 	.word	0x0800f9b0
 800d080:	0800f9c4 	.word	0x0800f9c4
 800d084:	ffd3d3d3 	.word	0xffd3d3d3

0800d088 <displayTemperature>:

static void displayTemperature()
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b09a      	sub	sp, #104	; 0x68
 800d08c:	af00      	add	r7, sp, #0
	//Muda o estado do LED Verde

	long int JTemp;
	char string[100];

	if(flagTimer6_temperature==1)
 800d08e:	4b26      	ldr	r3, [pc, #152]	; (800d128 <displayTemperature+0xa0>)
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d044      	beq.n	800d120 <displayTemperature+0x98>
	{
			flagTimer6_temperature=0;
 800d096:	4b24      	ldr	r3, [pc, #144]	; (800d128 <displayTemperature+0xa0>)
 800d098:	2200      	movs	r2, #0
 800d09a:	701a      	strb	r2, [r3, #0]
			BSP_LED_Toggle(LED_GREEN);
 800d09c:	2001      	movs	r0, #1
 800d09e:	f7f3 fe65 	bl	8000d6c <BSP_LED_Toggle>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d0a2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d0a6:	f7f4 fa9b 	bl	80015e0 <BSP_LCD_SetTextColor>
	  		BSP_LCD_SetFont(&Font16);
 800d0aa:	4820      	ldr	r0, [pc, #128]	; (800d12c <displayTemperature+0xa4>)
 800d0ac:	f7f4 fab0 	bl	8001610 <BSP_LCD_SetFont>
	  		ConvertedValue=HAL_ADC_GetValue(&hadc1); //get value
 800d0b0:	481f      	ldr	r0, [pc, #124]	; (800d130 <displayTemperature+0xa8>)
 800d0b2:	f7f5 ff22 	bl	8002efa <HAL_ADC_GetValue>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	4b1e      	ldr	r3, [pc, #120]	; (800d134 <displayTemperature+0xac>)
 800d0ba:	601a      	str	r2, [r3, #0]
	  		JTemp = ((((ConvertedValue * VREF)/MAX_CONVERTED_VALUE) - VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 800d0bc:	4b1d      	ldr	r3, [pc, #116]	; (800d134 <displayTemperature+0xac>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f640 42e4 	movw	r2, #3300	; 0xce4
 800d0c4:	fb02 f203 	mul.w	r2, r2, r3
 800d0c8:	4b1b      	ldr	r3, [pc, #108]	; (800d138 <displayTemperature+0xb0>)
 800d0ca:	fba3 1302 	umull	r1, r3, r3, r2
 800d0ce:	1ad2      	subs	r2, r2, r3
 800d0d0:	0852      	lsrs	r2, r2, #1
 800d0d2:	4413      	add	r3, r2
 800d0d4:	0ada      	lsrs	r2, r3, #11
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	4413      	add	r3, r2
 800d0dc:	005b      	lsls	r3, r3, #1
 800d0de:	461a      	mov	r2, r3
 800d0e0:	4b16      	ldr	r3, [pc, #88]	; (800d13c <displayTemperature+0xb4>)
 800d0e2:	4413      	add	r3, r2
 800d0e4:	4a16      	ldr	r2, [pc, #88]	; (800d140 <displayTemperature+0xb8>)
 800d0e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d0ea:	08db      	lsrs	r3, r3, #3
 800d0ec:	3319      	adds	r3, #25
 800d0ee:	667b      	str	r3, [r7, #100]	; 0x64
	  		sprintf(string, "Int. Temp:%ld'C", JTemp);
 800d0f0:	463b      	mov	r3, r7
 800d0f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d0f4:	4913      	ldr	r1, [pc, #76]	; (800d144 <displayTemperature+0xbc>)
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f001 ffb2 	bl	800f060 <siprintf>
	  		BSP_LCD_DisplayStringAt(0,LINE(29), (uint8_t *)string, RIGHT_MODE);
 800d0fc:	f7f4 faa2 	bl	8001644 <BSP_LCD_GetFont>
 800d100:	4603      	mov	r3, r0
 800d102:	88db      	ldrh	r3, [r3, #6]
 800d104:	461a      	mov	r2, r3
 800d106:	00d2      	lsls	r2, r2, #3
 800d108:	1ad2      	subs	r2, r2, r3
 800d10a:	0092      	lsls	r2, r2, #2
 800d10c:	4413      	add	r3, r2
 800d10e:	b299      	uxth	r1, r3
 800d110:	463a      	mov	r2, r7
 800d112:	2302      	movs	r3, #2
 800d114:	2000      	movs	r0, #0
 800d116:	f7f4 fb7b 	bl	8001810 <BSP_LCD_DisplayStringAt>
	  		BSP_LCD_ClearStringLine(30);
 800d11a:	201e      	movs	r0, #30
 800d11c:	f7f4 fad0 	bl	80016c0 <BSP_LCD_ClearStringLine>
	}
}
 800d120:	bf00      	nop
 800d122:	3768      	adds	r7, #104	; 0x68
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	20000538 	.word	0x20000538
 800d12c:	20000044 	.word	0x20000044
 800d130:	20000c88 	.word	0x20000c88
 800d134:	2000054c 	.word	0x2000054c
 800d138:	00100101 	.word	0x00100101
 800d13c:	ffffe250 	.word	0xffffe250
 800d140:	51eb851f 	.word	0x51eb851f
 800d144:	0800f9e0 	.word	0x0800f9e0

0800d148 <showGameTime>:


void showGameTime()
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b09a      	sub	sp, #104	; 0x68
 800d14c:	af00      	add	r7, sp, #0
	//flagTimer7_gametime activada na função PeriodElapsedCallback (timer 7) e com
	// a flag startTimer quando se inicia um jogo

	char string[100];

	if(flagTimer7_gametime==1 && startTimer==1)
 800d14e:	4b1e      	ldr	r3, [pc, #120]	; (800d1c8 <showGameTime+0x80>)
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d033      	beq.n	800d1be <showGameTime+0x76>
 800d156:	4b1d      	ldr	r3, [pc, #116]	; (800d1cc <showGameTime+0x84>)
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d02f      	beq.n	800d1be <showGameTime+0x76>
	{
		flagTimer7_gametime=0;
 800d15e:	4b1a      	ldr	r3, [pc, #104]	; (800d1c8 <showGameTime+0x80>)
 800d160:	2200      	movs	r2, #0
 800d162:	701a      	strb	r2, [r3, #0]
		second++;
 800d164:	4b1a      	ldr	r3, [pc, #104]	; (800d1d0 <showGameTime+0x88>)
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	3301      	adds	r3, #1
 800d16a:	b2da      	uxtb	r2, r3
 800d16c:	4b18      	ldr	r3, [pc, #96]	; (800d1d0 <showGameTime+0x88>)
 800d16e:	701a      	strb	r2, [r3, #0]
		if(second==60)
 800d170:	4b17      	ldr	r3, [pc, #92]	; (800d1d0 <showGameTime+0x88>)
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	2b3c      	cmp	r3, #60	; 0x3c
 800d176:	d108      	bne.n	800d18a <showGameTime+0x42>
		{
			second=0;
 800d178:	4b15      	ldr	r3, [pc, #84]	; (800d1d0 <showGameTime+0x88>)
 800d17a:	2200      	movs	r2, #0
 800d17c:	701a      	strb	r2, [r3, #0]
			minute++;
 800d17e:	4b15      	ldr	r3, [pc, #84]	; (800d1d4 <showGameTime+0x8c>)
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	3301      	adds	r3, #1
 800d184:	b2da      	uxtb	r2, r3
 800d186:	4b13      	ldr	r3, [pc, #76]	; (800d1d4 <showGameTime+0x8c>)
 800d188:	701a      	strb	r2, [r3, #0]
		}
		BSP_LCD_SetFont(&Font16);
 800d18a:	4813      	ldr	r0, [pc, #76]	; (800d1d8 <showGameTime+0x90>)
 800d18c:	f7f4 fa40 	bl	8001610 <BSP_LCD_SetFont>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800d190:	4812      	ldr	r0, [pc, #72]	; (800d1dc <showGameTime+0x94>)
 800d192:	f7f4 fa25 	bl	80015e0 <BSP_LCD_SetTextColor>
		sprintf(string, "Game Time: %im%2is",minute,second);
 800d196:	4b0f      	ldr	r3, [pc, #60]	; (800d1d4 <showGameTime+0x8c>)
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	461a      	mov	r2, r3
 800d19c:	4b0c      	ldr	r3, [pc, #48]	; (800d1d0 <showGameTime+0x88>)
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	1d38      	adds	r0, r7, #4
 800d1a2:	490f      	ldr	r1, [pc, #60]	; (800d1e0 <showGameTime+0x98>)
 800d1a4:	f001 ff5c 	bl	800f060 <siprintf>
		BSP_LCD_DisplayStringAt(200,LINE(8), (uint8_t *)string, CENTER_MODE);
 800d1a8:	f7f4 fa4c 	bl	8001644 <BSP_LCD_GetFont>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	88db      	ldrh	r3, [r3, #6]
 800d1b0:	00db      	lsls	r3, r3, #3
 800d1b2:	b299      	uxth	r1, r3
 800d1b4:	1d3a      	adds	r2, r7, #4
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	20c8      	movs	r0, #200	; 0xc8
 800d1ba:	f7f4 fb29 	bl	8001810 <BSP_LCD_DisplayStringAt>

	}
}
 800d1be:	bf00      	nop
 800d1c0:	3768      	adds	r7, #104	; 0x68
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	20000539 	.word	0x20000539
 800d1cc:	2000053b 	.word	0x2000053b
 800d1d0:	20000548 	.word	0x20000548
 800d1d4:	20000547 	.word	0x20000547
 800d1d8:	20000044 	.word	0x20000044
 800d1dc:	ff0000ff 	.word	0xff0000ff
 800d1e0:	0800f9f0 	.word	0x0800f9f0

0800d1e4 <showRoundTimeLeft>:

void showRoundTimeLeft()
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b08e      	sub	sp, #56	; 0x38
 800d1e8:	af00      	add	r7, sp, #0
	//flagTimer7_roundtimeLeft activada na função PeriodElapsedCallback (timer 7) e com
	// a flag startTimer quando se inicia um jogo

	char string[50];

	if(flagTimer7_roundtimeleft==1 && startTimer==1)
 800d1ea:	4b1a      	ldr	r3, [pc, #104]	; (800d254 <showRoundTimeLeft+0x70>)
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d02c      	beq.n	800d24c <showRoundTimeLeft+0x68>
 800d1f2:	4b19      	ldr	r3, [pc, #100]	; (800d258 <showRoundTimeLeft+0x74>)
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d028      	beq.n	800d24c <showRoundTimeLeft+0x68>
	{
		flagTimer7_roundtimeleft=0;
 800d1fa:	4b16      	ldr	r3, [pc, #88]	; (800d254 <showRoundTimeLeft+0x70>)
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	701a      	strb	r2, [r3, #0]
		timeLeft--;
 800d200:	4b16      	ldr	r3, [pc, #88]	; (800d25c <showRoundTimeLeft+0x78>)
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	3b01      	subs	r3, #1
 800d206:	b2da      	uxtb	r2, r3
 800d208:	4b14      	ldr	r3, [pc, #80]	; (800d25c <showRoundTimeLeft+0x78>)
 800d20a:	701a      	strb	r2, [r3, #0]
		if(timeLeft==0){
 800d20c:	4b13      	ldr	r3, [pc, #76]	; (800d25c <showRoundTimeLeft+0x78>)
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d102      	bne.n	800d21a <showRoundTimeLeft+0x36>
			timeout=1;	//se esta variavel estiver activa, passa para o proximo jogador
 800d214:	4b12      	ldr	r3, [pc, #72]	; (800d260 <showRoundTimeLeft+0x7c>)
 800d216:	2201      	movs	r2, #1
 800d218:	701a      	strb	r2, [r3, #0]

		}

		BSP_LCD_SetFont(&Font16);
 800d21a:	4812      	ldr	r0, [pc, #72]	; (800d264 <showRoundTimeLeft+0x80>)
 800d21c:	f7f4 f9f8 	bl	8001610 <BSP_LCD_SetFont>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800d220:	4811      	ldr	r0, [pc, #68]	; (800d268 <showRoundTimeLeft+0x84>)
 800d222:	f7f4 f9dd 	bl	80015e0 <BSP_LCD_SetTextColor>
		sprintf(string, "%2is left",timeLeft);
 800d226:	4b0d      	ldr	r3, [pc, #52]	; (800d25c <showRoundTimeLeft+0x78>)
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	461a      	mov	r2, r3
 800d22c:	1d3b      	adds	r3, r7, #4
 800d22e:	490f      	ldr	r1, [pc, #60]	; (800d26c <showRoundTimeLeft+0x88>)
 800d230:	4618      	mov	r0, r3
 800d232:	f001 ff15 	bl	800f060 <siprintf>
		BSP_LCD_DisplayStringAt(200,LINE(2), (uint8_t *)string, LEFT_MODE);
 800d236:	f7f4 fa05 	bl	8001644 <BSP_LCD_GetFont>
 800d23a:	4603      	mov	r3, r0
 800d23c:	88db      	ldrh	r3, [r3, #6]
 800d23e:	005b      	lsls	r3, r3, #1
 800d240:	b299      	uxth	r1, r3
 800d242:	1d3a      	adds	r2, r7, #4
 800d244:	2303      	movs	r3, #3
 800d246:	20c8      	movs	r0, #200	; 0xc8
 800d248:	f7f4 fae2 	bl	8001810 <BSP_LCD_DisplayStringAt>

	}
}
 800d24c:	bf00      	nop
 800d24e:	3738      	adds	r7, #56	; 0x38
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}
 800d254:	2000053a 	.word	0x2000053a
 800d258:	2000053b 	.word	0x2000053b
 800d25c:	2000005e 	.word	0x2000005e
 800d260:	20000546 	.word	0x20000546
 800d264:	20000044 	.word	0x20000044
 800d268:	ff0000ff 	.word	0xff0000ff
 800d26c:	0800fa04 	.word	0x0800fa04

0800d270 <jogo>:




void jogo()
{
 800d270:	b5b0      	push	{r4, r5, r7, lr}
 800d272:	af00      	add	r7, sp, #0


	if(gameHH==1 || gameHA)
 800d274:	4b3c      	ldr	r3, [pc, #240]	; (800d368 <jogo+0xf8>)
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d103      	bne.n	800d284 <jogo+0x14>
 800d27c:	4b3b      	ldr	r3, [pc, #236]	; (800d36c <jogo+0xfc>)
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d06f      	beq.n	800d364 <jogo+0xf4>
	{
		if(pTurn==1)
 800d284:	4b3a      	ldr	r3, [pc, #232]	; (800d370 <jogo+0x100>)
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d013      	beq.n	800d2b4 <jogo+0x44>
		{
			jogador=jogador1;
 800d28c:	4a39      	ldr	r2, [pc, #228]	; (800d374 <jogo+0x104>)
 800d28e:	4b3a      	ldr	r3, [pc, #232]	; (800d378 <jogo+0x108>)
 800d290:	4614      	mov	r4, r2
 800d292:	461d      	mov	r5, r3
 800d294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d298:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d29c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			adversario=jogador2;
 800d2a0:	4a36      	ldr	r2, [pc, #216]	; (800d37c <jogo+0x10c>)
 800d2a2:	4b37      	ldr	r3, [pc, #220]	; (800d380 <jogo+0x110>)
 800d2a4:	4614      	mov	r4, r2
 800d2a6:	461d      	mov	r5, r3
 800d2a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d2b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		}

		if(pTurn==0 && gameHH)
 800d2b4:	4b2e      	ldr	r3, [pc, #184]	; (800d370 <jogo+0x100>)
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	f083 0301 	eor.w	r3, r3, #1
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d017      	beq.n	800d2f2 <jogo+0x82>
 800d2c2:	4b29      	ldr	r3, [pc, #164]	; (800d368 <jogo+0xf8>)
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d013      	beq.n	800d2f2 <jogo+0x82>
		{
			jogador=jogador2;
 800d2ca:	4a2a      	ldr	r2, [pc, #168]	; (800d374 <jogo+0x104>)
 800d2cc:	4b2c      	ldr	r3, [pc, #176]	; (800d380 <jogo+0x110>)
 800d2ce:	4614      	mov	r4, r2
 800d2d0:	461d      	mov	r5, r3
 800d2d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d2da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			adversario=jogador1;
 800d2de:	4a27      	ldr	r2, [pc, #156]	; (800d37c <jogo+0x10c>)
 800d2e0:	4b25      	ldr	r3, [pc, #148]	; (800d378 <jogo+0x108>)
 800d2e2:	4614      	mov	r4, r2
 800d2e4:	461d      	mov	r5, r3
 800d2e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d2ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		}

		if(pTurn==0 && gameHA)
 800d2f2:	4b1f      	ldr	r3, [pc, #124]	; (800d370 <jogo+0x100>)
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	f083 0301 	eor.w	r3, r3, #1
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d017      	beq.n	800d330 <jogo+0xc0>
 800d300:	4b1a      	ldr	r3, [pc, #104]	; (800d36c <jogo+0xfc>)
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d013      	beq.n	800d330 <jogo+0xc0>
		{
			jogador=arm;
 800d308:	4a1a      	ldr	r2, [pc, #104]	; (800d374 <jogo+0x104>)
 800d30a:	4b1e      	ldr	r3, [pc, #120]	; (800d384 <jogo+0x114>)
 800d30c:	4614      	mov	r4, r2
 800d30e:	461d      	mov	r5, r3
 800d310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d314:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			adversario=jogador1;
 800d31c:	4a17      	ldr	r2, [pc, #92]	; (800d37c <jogo+0x10c>)
 800d31e:	4b16      	ldr	r3, [pc, #88]	; (800d378 <jogo+0x108>)
 800d320:	4614      	mov	r4, r2
 800d322:	461d      	mov	r5, r3
 800d324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d328:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d32c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		}

		writePlayerRoundInfo();
 800d330:	f000 f960 	bl	800d5f4 <writePlayerRoundInfo>
		if(gameHH || jogador.ID==1)
 800d334:	4b0c      	ldr	r3, [pc, #48]	; (800d368 <jogo+0xf8>)
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d103      	bne.n	800d344 <jogo+0xd4>
 800d33c:	4b0d      	ldr	r3, [pc, #52]	; (800d374 <jogo+0x104>)
 800d33e:	695b      	ldr	r3, [r3, #20]
 800d340:	2b01      	cmp	r3, #1
 800d342:	d103      	bne.n	800d34c <jogo+0xdc>
		{
			ckecktimeout();
 800d344:	f000 fb8c 	bl	800da60 <ckecktimeout>
			placePiece();
 800d348:	f000 f9b6 	bl	800d6b8 <placePiece>
		}

		if(gameHA && jogador.ID==2)
 800d34c:	4b07      	ldr	r3, [pc, #28]	; (800d36c <jogo+0xfc>)
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d005      	beq.n	800d360 <jogo+0xf0>
 800d354:	4b07      	ldr	r3, [pc, #28]	; (800d374 <jogo+0x104>)
 800d356:	695b      	ldr	r3, [r3, #20]
 800d358:	2b02      	cmp	r3, #2
 800d35a:	d101      	bne.n	800d360 <jogo+0xf0>
		{
			jogadaArM();
 800d35c:	f000 fa56 	bl	800d80c <jogadaArM>
		}

	  //turnPieces(auxPlayer,auxOpponent,linhaCelula,colunaCelula); //muda a cor as peças do adversário

		nextRoundPreparation();
 800d360:	f000 f812 	bl	800d388 <nextRoundPreparation>
	}
}
 800d364:	bf00      	nop
 800d366:	bdb0      	pop	{r4, r5, r7, pc}
 800d368:	2000053c 	.word	0x2000053c
 800d36c:	2000053d 	.word	0x2000053d
 800d370:	2000005d 	.word	0x2000005d
 800d374:	20000d4c 	.word	0x20000d4c
 800d378:	20000b3c 	.word	0x20000b3c
 800d37c:	20000d30 	.word	0x20000d30
 800d380:	20000cd4 	.word	0x20000cd4
 800d384:	20000dcc 	.word	0x20000dcc

0800d388 <nextRoundPreparation>:



void nextRoundPreparation()
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b08e      	sub	sp, #56	; 0x38
 800d38c:	af00      	add	r7, sp, #0
	uint8_t availableCells=0;
 800d38e:	2300      	movs	r3, #0
 800d390:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	char string[50];

	if(piecePlaced)
 800d394:	4b5b      	ldr	r3, [pc, #364]	; (800d504 <nextRoundPreparation+0x17c>)
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	f000 80af 	beq.w	800d4fc <nextRoundPreparation+0x174>
	{
		piecePlaced=0;
 800d39e:	4b59      	ldr	r3, [pc, #356]	; (800d504 <nextRoundPreparation+0x17c>)
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	701a      	strb	r2, [r3, #0]
		checkAvailable(adversario.ID);
 800d3a4:	4b58      	ldr	r3, [pc, #352]	; (800d508 <nextRoundPreparation+0x180>)
 800d3a6:	695b      	ldr	r3, [r3, #20]
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f000 fdfe 	bl	800dfac <checkAvailable>
		availableCells = countAvailableCellsToPlay(adversario.ID);
 800d3b0:	4b55      	ldr	r3, [pc, #340]	; (800d508 <nextRoundPreparation+0x180>)
 800d3b2:	695b      	ldr	r3, [r3, #20]
 800d3b4:	b2db      	uxtb	r3, r3
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f000 fdc8 	bl	800df4c <countAvailableCellsToPlay>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		if(availableCells>0)
 800d3c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d01c      	beq.n	800d404 <nextRoundPreparation+0x7c>
		{
			pTurn=!pTurn;
 800d3ca:	4b50      	ldr	r3, [pc, #320]	; (800d50c <nextRoundPreparation+0x184>)
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	bf14      	ite	ne
 800d3d2:	2301      	movne	r3, #1
 800d3d4:	2300      	moveq	r3, #0
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	f083 0301 	eor.w	r3, r3, #1
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	f003 0301 	and.w	r3, r3, #1
 800d3e2:	b2da      	uxtb	r2, r3
 800d3e4:	4b49      	ldr	r3, [pc, #292]	; (800d50c <nextRoundPreparation+0x184>)
 800d3e6:	701a      	strb	r2, [r3, #0]
			clearNoMovestrings();
 800d3e8:	f000 f8a4 	bl	800d534 <clearNoMovestrings>
			noMovesFlag2=0;
 800d3ec:	4b48      	ldr	r3, [pc, #288]	; (800d510 <nextRoundPreparation+0x188>)
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	701a      	strb	r2, [r3, #0]
			noMovesFlag1=0;
 800d3f2:	4b48      	ldr	r3, [pc, #288]	; (800d514 <nextRoundPreparation+0x18c>)
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	701a      	strb	r2, [r3, #0]
			timeLeft=20;
 800d3f8:	4b47      	ldr	r3, [pc, #284]	; (800d518 <nextRoundPreparation+0x190>)
 800d3fa:	2214      	movs	r2, #20
 800d3fc:	701a      	strb	r2, [r3, #0]
			ClearPlayerRoundInfo();
 800d3fe:	f000 f8d3 	bl	800d5a8 <ClearPlayerRoundInfo>
			return;
 800d402:	e07b      	b.n	800d4fc <nextRoundPreparation+0x174>
		}

		if(availableCells==0)
 800d404:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d177      	bne.n	800d4fc <nextRoundPreparation+0x174>
		{
			noMovesFlag2=1;
 800d40c:	4b40      	ldr	r3, [pc, #256]	; (800d510 <nextRoundPreparation+0x188>)
 800d40e:	2201      	movs	r2, #1
 800d410:	701a      	strb	r2, [r3, #0]
			BSP_LCD_SetFont(&Font16);
 800d412:	4842      	ldr	r0, [pc, #264]	; (800d51c <nextRoundPreparation+0x194>)
 800d414:	f7f4 f8fc 	bl	8001610 <BSP_LCD_SetFont>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800d418:	4841      	ldr	r0, [pc, #260]	; (800d520 <nextRoundPreparation+0x198>)
 800d41a:	f7f4 f8e1 	bl	80015e0 <BSP_LCD_SetTextColor>
			sprintf(string, "%s - No valid Moves",adversario.name);
 800d41e:	1d3b      	adds	r3, r7, #4
 800d420:	4a39      	ldr	r2, [pc, #228]	; (800d508 <nextRoundPreparation+0x180>)
 800d422:	4940      	ldr	r1, [pc, #256]	; (800d524 <nextRoundPreparation+0x19c>)
 800d424:	4618      	mov	r0, r3
 800d426:	f001 fe1b 	bl	800f060 <siprintf>
			BSP_LCD_DisplayStringAt(200,LINE(11), (uint8_t *)string, CENTER_MODE);
 800d42a:	f7f4 f90b 	bl	8001644 <BSP_LCD_GetFont>
 800d42e:	4603      	mov	r3, r0
 800d430:	88db      	ldrh	r3, [r3, #6]
 800d432:	461a      	mov	r2, r3
 800d434:	0092      	lsls	r2, r2, #2
 800d436:	441a      	add	r2, r3
 800d438:	0052      	lsls	r2, r2, #1
 800d43a:	4413      	add	r3, r2
 800d43c:	b299      	uxth	r1, r3
 800d43e:	1d3a      	adds	r2, r7, #4
 800d440:	2301      	movs	r3, #1
 800d442:	20c8      	movs	r0, #200	; 0xc8
 800d444:	f7f4 f9e4 	bl	8001810 <BSP_LCD_DisplayStringAt>
			availableCells = 0;
 800d448:	2300      	movs	r3, #0
 800d44a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			checkAvailable(jogador.ID);
 800d44e:	4b36      	ldr	r3, [pc, #216]	; (800d528 <nextRoundPreparation+0x1a0>)
 800d450:	695b      	ldr	r3, [r3, #20]
 800d452:	b2db      	uxtb	r3, r3
 800d454:	4618      	mov	r0, r3
 800d456:	f000 fda9 	bl	800dfac <checkAvailable>
			availableCells = countAvailableCellsToPlay(jogador.ID);
 800d45a:	4b33      	ldr	r3, [pc, #204]	; (800d528 <nextRoundPreparation+0x1a0>)
 800d45c:	695b      	ldr	r3, [r3, #20]
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	4618      	mov	r0, r3
 800d462:	f000 fd73 	bl	800df4c <countAvailableCellsToPlay>
 800d466:	4603      	mov	r3, r0
 800d468:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			if(availableCells>0)
 800d46c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d470:	2b00      	cmp	r3, #0
 800d472:	d01c      	beq.n	800d4ae <nextRoundPreparation+0x126>
			{
				pTurn=!pTurn;
 800d474:	4b25      	ldr	r3, [pc, #148]	; (800d50c <nextRoundPreparation+0x184>)
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	bf14      	ite	ne
 800d47c:	2301      	movne	r3, #1
 800d47e:	2300      	moveq	r3, #0
 800d480:	b2db      	uxtb	r3, r3
 800d482:	f083 0301 	eor.w	r3, r3, #1
 800d486:	b2db      	uxtb	r3, r3
 800d488:	f003 0301 	and.w	r3, r3, #1
 800d48c:	b2da      	uxtb	r2, r3
 800d48e:	4b1f      	ldr	r3, [pc, #124]	; (800d50c <nextRoundPreparation+0x184>)
 800d490:	701a      	strb	r2, [r3, #0]
				clearNoMovestrings();
 800d492:	f000 f84f 	bl	800d534 <clearNoMovestrings>
				noMovesFlag1=0;
 800d496:	4b1f      	ldr	r3, [pc, #124]	; (800d514 <nextRoundPreparation+0x18c>)
 800d498:	2200      	movs	r2, #0
 800d49a:	701a      	strb	r2, [r3, #0]
				noMovesFlag1=0;
 800d49c:	4b1d      	ldr	r3, [pc, #116]	; (800d514 <nextRoundPreparation+0x18c>)
 800d49e:	2200      	movs	r2, #0
 800d4a0:	701a      	strb	r2, [r3, #0]
				timeLeft=20;
 800d4a2:	4b1d      	ldr	r3, [pc, #116]	; (800d518 <nextRoundPreparation+0x190>)
 800d4a4:	2214      	movs	r2, #20
 800d4a6:	701a      	strb	r2, [r3, #0]
				ClearPlayerRoundInfo();
 800d4a8:	f000 f87e 	bl	800d5a8 <ClearPlayerRoundInfo>
				return;
 800d4ac:	e026      	b.n	800d4fc <nextRoundPreparation+0x174>
			}

			if(availableCells==0)
 800d4ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d122      	bne.n	800d4fc <nextRoundPreparation+0x174>
			{
				noMovesFlag1=1;
 800d4b6:	4b17      	ldr	r3, [pc, #92]	; (800d514 <nextRoundPreparation+0x18c>)
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	701a      	strb	r2, [r3, #0]
				BSP_LCD_SetFont(&Font16);
 800d4bc:	4817      	ldr	r0, [pc, #92]	; (800d51c <nextRoundPreparation+0x194>)
 800d4be:	f7f4 f8a7 	bl	8001610 <BSP_LCD_SetFont>
				BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800d4c2:	4817      	ldr	r0, [pc, #92]	; (800d520 <nextRoundPreparation+0x198>)
 800d4c4:	f7f4 f88c 	bl	80015e0 <BSP_LCD_SetTextColor>
				sprintf(string, "%s - No valid Moves",jogador.name);
 800d4c8:	1d3b      	adds	r3, r7, #4
 800d4ca:	4a17      	ldr	r2, [pc, #92]	; (800d528 <nextRoundPreparation+0x1a0>)
 800d4cc:	4915      	ldr	r1, [pc, #84]	; (800d524 <nextRoundPreparation+0x19c>)
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f001 fdc6 	bl	800f060 <siprintf>
				BSP_LCD_DisplayStringAt(200,LINE(10), (uint8_t *)string, CENTER_MODE);
 800d4d4:	f7f4 f8b6 	bl	8001644 <BSP_LCD_GetFont>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	88db      	ldrh	r3, [r3, #6]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	0092      	lsls	r2, r2, #2
 800d4e0:	4413      	add	r3, r2
 800d4e2:	005b      	lsls	r3, r3, #1
 800d4e4:	b299      	uxth	r1, r3
 800d4e6:	1d3a      	adds	r2, r7, #4
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	20c8      	movs	r0, #200	; 0xc8
 800d4ec:	f7f4 f990 	bl	8001810 <BSP_LCD_DisplayStringAt>
				gameHA=0;
 800d4f0:	4b0e      	ldr	r3, [pc, #56]	; (800d52c <nextRoundPreparation+0x1a4>)
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	701a      	strb	r2, [r3, #0]
				gameHH=0;
 800d4f6:	4b0e      	ldr	r3, [pc, #56]	; (800d530 <nextRoundPreparation+0x1a8>)
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800d4fc:	3738      	adds	r7, #56	; 0x38
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	20000543 	.word	0x20000543
 800d508:	20000d30 	.word	0x20000d30
 800d50c:	2000005d 	.word	0x2000005d
 800d510:	20000542 	.word	0x20000542
 800d514:	20000541 	.word	0x20000541
 800d518:	2000005e 	.word	0x2000005e
 800d51c:	20000044 	.word	0x20000044
 800d520:	ffff0000 	.word	0xffff0000
 800d524:	0800fa10 	.word	0x0800fa10
 800d528:	20000d4c 	.word	0x20000d4c
 800d52c:	2000053d 	.word	0x2000053d
 800d530:	2000053c 	.word	0x2000053c

0800d534 <clearNoMovestrings>:


void clearNoMovestrings()
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b08e      	sub	sp, #56	; 0x38
 800d538:	af00      	add	r7, sp, #0
	char string[50];

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d53a:	f04f 30ff 	mov.w	r0, #4294967295
 800d53e:	f7f4 f84f 	bl	80015e0 <BSP_LCD_SetTextColor>
	sprintf(string, "%s - No valid Moves",jogador.name);
 800d542:	1d3b      	adds	r3, r7, #4
 800d544:	4a15      	ldr	r2, [pc, #84]	; (800d59c <clearNoMovestrings+0x68>)
 800d546:	4916      	ldr	r1, [pc, #88]	; (800d5a0 <clearNoMovestrings+0x6c>)
 800d548:	4618      	mov	r0, r3
 800d54a:	f001 fd89 	bl	800f060 <siprintf>
	BSP_LCD_DisplayStringAt(200,LINE(10), (uint8_t *)string, CENTER_MODE);
 800d54e:	f7f4 f879 	bl	8001644 <BSP_LCD_GetFont>
 800d552:	4603      	mov	r3, r0
 800d554:	88db      	ldrh	r3, [r3, #6]
 800d556:	461a      	mov	r2, r3
 800d558:	0092      	lsls	r2, r2, #2
 800d55a:	4413      	add	r3, r2
 800d55c:	005b      	lsls	r3, r3, #1
 800d55e:	b299      	uxth	r1, r3
 800d560:	1d3a      	adds	r2, r7, #4
 800d562:	2301      	movs	r3, #1
 800d564:	20c8      	movs	r0, #200	; 0xc8
 800d566:	f7f4 f953 	bl	8001810 <BSP_LCD_DisplayStringAt>
	sprintf(string, "%s - No valid Moves",adversario.name);
 800d56a:	1d3b      	adds	r3, r7, #4
 800d56c:	4a0d      	ldr	r2, [pc, #52]	; (800d5a4 <clearNoMovestrings+0x70>)
 800d56e:	490c      	ldr	r1, [pc, #48]	; (800d5a0 <clearNoMovestrings+0x6c>)
 800d570:	4618      	mov	r0, r3
 800d572:	f001 fd75 	bl	800f060 <siprintf>
	BSP_LCD_DisplayStringAt(200,LINE(11), (uint8_t *)string, CENTER_MODE);
 800d576:	f7f4 f865 	bl	8001644 <BSP_LCD_GetFont>
 800d57a:	4603      	mov	r3, r0
 800d57c:	88db      	ldrh	r3, [r3, #6]
 800d57e:	461a      	mov	r2, r3
 800d580:	0092      	lsls	r2, r2, #2
 800d582:	441a      	add	r2, r3
 800d584:	0052      	lsls	r2, r2, #1
 800d586:	4413      	add	r3, r2
 800d588:	b299      	uxth	r1, r3
 800d58a:	1d3a      	adds	r2, r7, #4
 800d58c:	2301      	movs	r3, #1
 800d58e:	20c8      	movs	r0, #200	; 0xc8
 800d590:	f7f4 f93e 	bl	8001810 <BSP_LCD_DisplayStringAt>
}
 800d594:	bf00      	nop
 800d596:	3738      	adds	r7, #56	; 0x38
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	20000d4c 	.word	0x20000d4c
 800d5a0:	0800fa10 	.word	0x0800fa10
 800d5a4:	20000d30 	.word	0x20000d30

0800d5a8 <ClearPlayerRoundInfo>:



void ClearPlayerRoundInfo()
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b08e      	sub	sp, #56	; 0x38
 800d5ac:	af00      	add	r7, sp, #0
	char string[50];

	BSP_LCD_SetFont(&Font16);
 800d5ae:	480e      	ldr	r0, [pc, #56]	; (800d5e8 <ClearPlayerRoundInfo+0x40>)
 800d5b0:	f7f4 f82e 	bl	8001610 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b8:	f7f4 f812 	bl	80015e0 <BSP_LCD_SetTextColor>
	sprintf(string,"%s round:",adversario.name);
 800d5bc:	1d3b      	adds	r3, r7, #4
 800d5be:	4a0b      	ldr	r2, [pc, #44]	; (800d5ec <ClearPlayerRoundInfo+0x44>)
 800d5c0:	490b      	ldr	r1, [pc, #44]	; (800d5f0 <ClearPlayerRoundInfo+0x48>)
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f001 fd4c 	bl	800f060 <siprintf>
	BSP_LCD_DisplayStringAt(30,LINE(2), (uint8_t *)string, LEFT_MODE);
 800d5c8:	f7f4 f83c 	bl	8001644 <BSP_LCD_GetFont>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	88db      	ldrh	r3, [r3, #6]
 800d5d0:	005b      	lsls	r3, r3, #1
 800d5d2:	b299      	uxth	r1, r3
 800d5d4:	1d3a      	adds	r2, r7, #4
 800d5d6:	2303      	movs	r3, #3
 800d5d8:	201e      	movs	r0, #30
 800d5da:	f7f4 f919 	bl	8001810 <BSP_LCD_DisplayStringAt>

}
 800d5de:	bf00      	nop
 800d5e0:	3738      	adds	r7, #56	; 0x38
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	20000044 	.word	0x20000044
 800d5ec:	20000d30 	.word	0x20000d30
 800d5f0:	0800fa24 	.word	0x0800fa24

0800d5f4 <writePlayerRoundInfo>:


void writePlayerRoundInfo()
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b08e      	sub	sp, #56	; 0x38
 800d5f8:	af00      	add	r7, sp, #0
	char string[50];

	if(gameStart)
 800d5fa:	4b27      	ldr	r3, [pc, #156]	; (800d698 <writePlayerRoundInfo+0xa4>)
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d045      	beq.n	800d68e <writePlayerRoundInfo+0x9a>
	{
		BSP_LCD_SetFont(&Font16);
 800d602:	4826      	ldr	r0, [pc, #152]	; (800d69c <writePlayerRoundInfo+0xa8>)
 800d604:	f7f4 f804 	bl	8001610 <BSP_LCD_SetFont>
		BSP_LCD_SetTextColor(jogador.pieceColor);
 800d608:	4b25      	ldr	r3, [pc, #148]	; (800d6a0 <writePlayerRoundInfo+0xac>)
 800d60a:	699b      	ldr	r3, [r3, #24]
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7f3 ffe7 	bl	80015e0 <BSP_LCD_SetTextColor>
		sprintf(string,"%s round:",jogador.name);
 800d612:	1d3b      	adds	r3, r7, #4
 800d614:	4a22      	ldr	r2, [pc, #136]	; (800d6a0 <writePlayerRoundInfo+0xac>)
 800d616:	4923      	ldr	r1, [pc, #140]	; (800d6a4 <writePlayerRoundInfo+0xb0>)
 800d618:	4618      	mov	r0, r3
 800d61a:	f001 fd21 	bl	800f060 <siprintf>
		BSP_LCD_DisplayStringAt(30,LINE(2), (uint8_t *)string, LEFT_MODE);
 800d61e:	f7f4 f811 	bl	8001644 <BSP_LCD_GetFont>
 800d622:	4603      	mov	r3, r0
 800d624:	88db      	ldrh	r3, [r3, #6]
 800d626:	005b      	lsls	r3, r3, #1
 800d628:	b299      	uxth	r1, r3
 800d62a:	1d3a      	adds	r2, r7, #4
 800d62c:	2303      	movs	r3, #3
 800d62e:	201e      	movs	r0, #30
 800d630:	f7f4 f8ee 	bl	8001810 <BSP_LCD_DisplayStringAt>
		if(pTurn)
 800d634:	4b1c      	ldr	r3, [pc, #112]	; (800d6a8 <writePlayerRoundInfo+0xb4>)
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d008      	beq.n	800d64e <writePlayerRoundInfo+0x5a>
			sprintf(string,"%d timeouts left",timeoutCounterPlayer1);
 800d63c:	4b1b      	ldr	r3, [pc, #108]	; (800d6ac <writePlayerRoundInfo+0xb8>)
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	461a      	mov	r2, r3
 800d642:	1d3b      	adds	r3, r7, #4
 800d644:	491a      	ldr	r1, [pc, #104]	; (800d6b0 <writePlayerRoundInfo+0xbc>)
 800d646:	4618      	mov	r0, r3
 800d648:	f001 fd0a 	bl	800f060 <siprintf>
 800d64c:	e00e      	b.n	800d66c <writePlayerRoundInfo+0x78>

		else if(!pTurn)
 800d64e:	4b16      	ldr	r3, [pc, #88]	; (800d6a8 <writePlayerRoundInfo+0xb4>)
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	f083 0301 	eor.w	r3, r3, #1
 800d656:	b2db      	uxtb	r3, r3
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d007      	beq.n	800d66c <writePlayerRoundInfo+0x78>
			sprintf(string,"%d timeouts left",timeoutCounterPlayer2);
 800d65c:	4b15      	ldr	r3, [pc, #84]	; (800d6b4 <writePlayerRoundInfo+0xc0>)
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	461a      	mov	r2, r3
 800d662:	1d3b      	adds	r3, r7, #4
 800d664:	4912      	ldr	r1, [pc, #72]	; (800d6b0 <writePlayerRoundInfo+0xbc>)
 800d666:	4618      	mov	r0, r3
 800d668:	f001 fcfa 	bl	800f060 <siprintf>

		BSP_LCD_DisplayStringAt(350,LINE(2), (uint8_t *)string, LEFT_MODE);
 800d66c:	f7f3 ffea 	bl	8001644 <BSP_LCD_GetFont>
 800d670:	4603      	mov	r3, r0
 800d672:	88db      	ldrh	r3, [r3, #6]
 800d674:	005b      	lsls	r3, r3, #1
 800d676:	b299      	uxth	r1, r3
 800d678:	1d3a      	adds	r2, r7, #4
 800d67a:	2303      	movs	r3, #3
 800d67c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800d680:	f7f4 f8c6 	bl	8001810 <BSP_LCD_DisplayStringAt>
		BSP_LCD_FillCircle(20,37,5);
 800d684:	2205      	movs	r2, #5
 800d686:	2125      	movs	r1, #37	; 0x25
 800d688:	2014      	movs	r0, #20
 800d68a:	f7f4 fb81 	bl	8001d90 <BSP_LCD_FillCircle>
	}
}
 800d68e:	bf00      	nop
 800d690:	3738      	adds	r7, #56	; 0x38
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	2000053e 	.word	0x2000053e
 800d69c:	20000044 	.word	0x20000044
 800d6a0:	20000d4c 	.word	0x20000d4c
 800d6a4:	0800fa24 	.word	0x0800fa24
 800d6a8:	2000005d 	.word	0x2000005d
 800d6ac:	2000005f 	.word	0x2000005f
 800d6b0:	0800fa30 	.word	0x0800fa30
 800d6b4:	20000060 	.word	0x20000060

0800d6b8 <placePiece>:


void placePiece()
{
 800d6b8:	b590      	push	{r4, r7, lr}
 800d6ba:	b083      	sub	sp, #12
 800d6bc:	af00      	add	r7, sp, #0
	uint16_t pos_x=0;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	80fb      	strh	r3, [r7, #6]
	uint16_t pos_y=0;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	80bb      	strh	r3, [r7, #4]

	if(touchScreenFlag==1)
 800d6c6:	4b48      	ldr	r3, [pc, #288]	; (800d7e8 <placePiece+0x130>)
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f000 8087 	beq.w	800d7de <placePiece+0x126>
	{
		touchScreenFlag=0;
 800d6d0:	4b45      	ldr	r3, [pc, #276]	; (800d7e8 <placePiece+0x130>)
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	701a      	strb	r2, [r3, #0]

		if(TS_State.touchX[0]>10 && TS_State.touchX[0]<410 && TS_State.touchY[0]>50 && TS_State.touchY[0]<450)
 800d6d6:	4b45      	ldr	r3, [pc, #276]	; (800d7ec <placePiece+0x134>)
 800d6d8:	885b      	ldrh	r3, [r3, #2]
 800d6da:	2b0a      	cmp	r3, #10
 800d6dc:	d97f      	bls.n	800d7de <placePiece+0x126>
 800d6de:	4b43      	ldr	r3, [pc, #268]	; (800d7ec <placePiece+0x134>)
 800d6e0:	885b      	ldrh	r3, [r3, #2]
 800d6e2:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800d6e6:	d27a      	bcs.n	800d7de <placePiece+0x126>
 800d6e8:	4b40      	ldr	r3, [pc, #256]	; (800d7ec <placePiece+0x134>)
 800d6ea:	88db      	ldrh	r3, [r3, #6]
 800d6ec:	2b32      	cmp	r3, #50	; 0x32
 800d6ee:	d976      	bls.n	800d7de <placePiece+0x126>
 800d6f0:	4b3e      	ldr	r3, [pc, #248]	; (800d7ec <placePiece+0x134>)
 800d6f2:	88db      	ldrh	r3, [r3, #6]
 800d6f4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800d6f8:	d271      	bcs.n	800d7de <placePiece+0x126>
		{
		// TS_State.touchX[0]-10 distância até ao limite do lado esquerdo do tabuleiro
		// (TS_State.touchX[0]-10)/50) número de quadrados até ao lado esquerdo do tabuleiro
		// 10+(TS_State.touchX[0]-10)/50)*50) multiplicamos por 50 para dar a distância até à celula pretendida
			colunaCelula = (TS_State.touchX[0]-10)/50;
 800d6fa:	4b3c      	ldr	r3, [pc, #240]	; (800d7ec <placePiece+0x134>)
 800d6fc:	885b      	ldrh	r3, [r3, #2]
 800d6fe:	3b0a      	subs	r3, #10
 800d700:	4a3b      	ldr	r2, [pc, #236]	; (800d7f0 <placePiece+0x138>)
 800d702:	fb82 1203 	smull	r1, r2, r2, r3
 800d706:	1112      	asrs	r2, r2, #4
 800d708:	17db      	asrs	r3, r3, #31
 800d70a:	1ad3      	subs	r3, r2, r3
 800d70c:	b2da      	uxtb	r2, r3
 800d70e:	4b39      	ldr	r3, [pc, #228]	; (800d7f4 <placePiece+0x13c>)
 800d710:	701a      	strb	r2, [r3, #0]
			linhaCelula  = (TS_State.touchY[0]-50)/50;
 800d712:	4b36      	ldr	r3, [pc, #216]	; (800d7ec <placePiece+0x134>)
 800d714:	88db      	ldrh	r3, [r3, #6]
 800d716:	3b32      	subs	r3, #50	; 0x32
 800d718:	4a35      	ldr	r2, [pc, #212]	; (800d7f0 <placePiece+0x138>)
 800d71a:	fb82 1203 	smull	r1, r2, r2, r3
 800d71e:	1112      	asrs	r2, r2, #4
 800d720:	17db      	asrs	r3, r3, #31
 800d722:	1ad3      	subs	r3, r2, r3
 800d724:	b2da      	uxtb	r2, r3
 800d726:	4b34      	ldr	r3, [pc, #208]	; (800d7f8 <placePiece+0x140>)
 800d728:	701a      	strb	r2, [r3, #0]

			if(tabuleiroJogo[linhaCelula][colunaCelula]==-(jogador.ID))
 800d72a:	4b33      	ldr	r3, [pc, #204]	; (800d7f8 <placePiece+0x140>)
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	4618      	mov	r0, r3
 800d730:	4b30      	ldr	r3, [pc, #192]	; (800d7f4 <placePiece+0x13c>)
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	4619      	mov	r1, r3
 800d736:	4a31      	ldr	r2, [pc, #196]	; (800d7fc <placePiece+0x144>)
 800d738:	00c3      	lsls	r3, r0, #3
 800d73a:	440b      	add	r3, r1
 800d73c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d740:	4b2f      	ldr	r3, [pc, #188]	; (800d800 <placePiece+0x148>)
 800d742:	695b      	ldr	r3, [r3, #20]
 800d744:	425b      	negs	r3, r3
 800d746:	429a      	cmp	r2, r3
 800d748:	d149      	bne.n	800d7de <placePiece+0x126>
			{
				tabuleiroJogo[linhaCelula][colunaCelula]=jogador.ID; //coloca peça na variavel tabuleiro
 800d74a:	4b2b      	ldr	r3, [pc, #172]	; (800d7f8 <placePiece+0x140>)
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	461c      	mov	r4, r3
 800d750:	4b28      	ldr	r3, [pc, #160]	; (800d7f4 <placePiece+0x13c>)
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	4618      	mov	r0, r3
 800d756:	4b2a      	ldr	r3, [pc, #168]	; (800d800 <placePiece+0x148>)
 800d758:	695a      	ldr	r2, [r3, #20]
 800d75a:	4928      	ldr	r1, [pc, #160]	; (800d7fc <placePiece+0x144>)
 800d75c:	00e3      	lsls	r3, r4, #3
 800d75e:	4403      	add	r3, r0
 800d760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				pos_x=10+(colunaCelula)*BOARDCELLSIZE; //posição no LCD
 800d764:	4b23      	ldr	r3, [pc, #140]	; (800d7f4 <placePiece+0x13c>)
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	b29b      	uxth	r3, r3
 800d76a:	461a      	mov	r2, r3
 800d76c:	0092      	lsls	r2, r2, #2
 800d76e:	4413      	add	r3, r2
 800d770:	461a      	mov	r2, r3
 800d772:	0091      	lsls	r1, r2, #2
 800d774:	461a      	mov	r2, r3
 800d776:	460b      	mov	r3, r1
 800d778:	4413      	add	r3, r2
 800d77a:	005b      	lsls	r3, r3, #1
 800d77c:	b29b      	uxth	r3, r3
 800d77e:	330a      	adds	r3, #10
 800d780:	80fb      	strh	r3, [r7, #6]
				pos_y=50+(linhaCelula)*BOARDCELLSIZE;
 800d782:	4b1d      	ldr	r3, [pc, #116]	; (800d7f8 <placePiece+0x140>)
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	3301      	adds	r3, #1
 800d788:	b29b      	uxth	r3, r3
 800d78a:	461a      	mov	r2, r3
 800d78c:	0092      	lsls	r2, r2, #2
 800d78e:	4413      	add	r3, r2
 800d790:	461a      	mov	r2, r3
 800d792:	0091      	lsls	r1, r2, #2
 800d794:	461a      	mov	r2, r3
 800d796:	460b      	mov	r3, r1
 800d798:	4413      	add	r3, r2
 800d79a:	005b      	lsls	r3, r3, #1
 800d79c:	80bb      	strh	r3, [r7, #4]

				BSP_LCD_SetTextColor(jogador.pieceColor); //colocar a peça no LCD
 800d79e:	4b18      	ldr	r3, [pc, #96]	; (800d800 <placePiece+0x148>)
 800d7a0:	699b      	ldr	r3, [r3, #24]
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7f3 ff1c 	bl	80015e0 <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(pos_x+BOARDCELLSIZE/2,pos_y+BOARDCELLSIZE/2,PIECESIZE);
 800d7a8:	88fb      	ldrh	r3, [r7, #6]
 800d7aa:	3319      	adds	r3, #25
 800d7ac:	b298      	uxth	r0, r3
 800d7ae:	88bb      	ldrh	r3, [r7, #4]
 800d7b0:	3319      	adds	r3, #25
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	2214      	movs	r2, #20
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	f7f4 faea 	bl	8001d90 <BSP_LCD_FillCircle>
				piecePlaced=1;
 800d7bc:	4b11      	ldr	r3, [pc, #68]	; (800d804 <placePiece+0x14c>)
 800d7be:	2201      	movs	r2, #1
 800d7c0:	701a      	strb	r2, [r3, #0]

				turnPieces(jogador.ID,adversario.ID,linhaCelula,colunaCelula);
 800d7c2:	4b0f      	ldr	r3, [pc, #60]	; (800d800 <placePiece+0x148>)
 800d7c4:	695b      	ldr	r3, [r3, #20]
 800d7c6:	b2d8      	uxtb	r0, r3
 800d7c8:	4b0f      	ldr	r3, [pc, #60]	; (800d808 <placePiece+0x150>)
 800d7ca:	695b      	ldr	r3, [r3, #20]
 800d7cc:	b2d9      	uxtb	r1, r3
 800d7ce:	4b0a      	ldr	r3, [pc, #40]	; (800d7f8 <placePiece+0x140>)
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	b25a      	sxtb	r2, r3
 800d7d4:	4b07      	ldr	r3, [pc, #28]	; (800d7f4 <placePiece+0x13c>)
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	b25b      	sxtb	r3, r3
 800d7da:	f000 fcef 	bl	800e1bc <turnPieces>
			}
		}
	}

}
 800d7de:	bf00      	nop
 800d7e0:	370c      	adds	r7, #12
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd90      	pop	{r4, r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	20000545 	.word	0x20000545
 800d7ec:	20000dc0 	.word	0x20000dc0
 800d7f0:	51eb851f 	.word	0x51eb851f
 800d7f4:	20000b58 	.word	0x20000b58
 800d7f8:	20000cd0 	.word	0x20000cd0
 800d7fc:	2000016c 	.word	0x2000016c
 800d800:	20000d4c 	.word	0x20000d4c
 800d804:	20000543 	.word	0x20000543
 800d808:	20000d30 	.word	0x20000d30

0800d80c <jogadaArM>:

void jogadaArM()
{
 800d80c:	b5b0      	push	{r4, r5, r7, lr}
 800d80e:	b090      	sub	sp, #64	; 0x40
 800d810:	af00      	add	r7, sp, #0
	uint8_t i,j,k=0;
 800d812:	2300      	movs	r3, #0
 800d814:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t possible[10]={0};
 800d818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d81c:	2200      	movs	r2, #0
 800d81e:	601a      	str	r2, [r3, #0]
 800d820:	605a      	str	r2, [r3, #4]
 800d822:	811a      	strh	r2, [r3, #8]
	char string[30];
	srand(time(NULL));
 800d824:	2000      	movs	r0, #0
 800d826:	f001 fc3b 	bl	800f0a0 <time>
 800d82a:	4603      	mov	r3, r0
 800d82c:	460c      	mov	r4, r1
 800d82e:	4618      	mov	r0, r3
 800d830:	f001 fbbe 	bl	800efb0 <srand>
	uint16_t pos_x=0;
 800d834:	2300      	movs	r3, #0
 800d836:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t pos_y=0;
 800d838:	2300      	movs	r3, #0
 800d83a:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t celula=0;
 800d83c:	2300      	movs	r3, #0
 800d83e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	BSP_LCD_SetFont(&Font16);
 800d842:	487e      	ldr	r0, [pc, #504]	; (800da3c <jogadaArM+0x230>)
 800d844:	f7f3 fee4 	bl	8001610 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 800d848:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 800d84c:	f7f3 fec8 	bl	80015e0 <BSP_LCD_SetTextColor>
	sprintf(string, "ARM Calculating Things");
 800d850:	1d3b      	adds	r3, r7, #4
 800d852:	4a7b      	ldr	r2, [pc, #492]	; (800da40 <jogadaArM+0x234>)
 800d854:	461c      	mov	r4, r3
 800d856:	4615      	mov	r5, r2
 800d858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d85a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d85c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d860:	6020      	str	r0, [r4, #0]
 800d862:	3404      	adds	r4, #4
 800d864:	8021      	strh	r1, [r4, #0]
 800d866:	3402      	adds	r4, #2
 800d868:	0c0b      	lsrs	r3, r1, #16
 800d86a:	7023      	strb	r3, [r4, #0]
	BSP_LCD_DisplayStringAt(200,LINE(9), (uint8_t *)string, CENTER_MODE);
 800d86c:	f7f3 feea 	bl	8001644 <BSP_LCD_GetFont>
 800d870:	4603      	mov	r3, r0
 800d872:	88db      	ldrh	r3, [r3, #6]
 800d874:	461a      	mov	r2, r3
 800d876:	00d2      	lsls	r2, r2, #3
 800d878:	4413      	add	r3, r2
 800d87a:	b299      	uxth	r1, r3
 800d87c:	1d3a      	adds	r2, r7, #4
 800d87e:	2301      	movs	r3, #1
 800d880:	20c8      	movs	r0, #200	; 0xc8
 800d882:	f7f3 ffc5 	bl	8001810 <BSP_LCD_DisplayStringAt>

	//vai percorrer a matriz para colocar as possibilidades de jogar no vector possible[]

	for(i=0;i<BOARDSIZE;i++)
 800d886:	2300      	movs	r3, #0
 800d888:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d88c:	e034      	b.n	800d8f8 <jogadaArM+0xec>
	{
		for(j=0;j<BOARDSIZE;j++)
 800d88e:	2300      	movs	r3, #0
 800d890:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800d894:	e027      	b.n	800d8e6 <jogadaArM+0xda>
		{
			if(tabuleiroJogo[i][j]==-2)
 800d896:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d89a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d89e:	4969      	ldr	r1, [pc, #420]	; (800da44 <jogadaArM+0x238>)
 800d8a0:	00d2      	lsls	r2, r2, #3
 800d8a2:	4413      	add	r3, r2
 800d8a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d8a8:	f113 0f02 	cmn.w	r3, #2
 800d8ac:	d116      	bne.n	800d8dc <jogadaArM+0xd0>
			{
				possible[k]=i*10+j;
 800d8ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	0092      	lsls	r2, r2, #2
 800d8b6:	4413      	add	r3, r2
 800d8b8:	005b      	lsls	r3, r3, #1
 800d8ba:	b2d9      	uxtb	r1, r3
 800d8bc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d8c0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800d8c4:	440a      	add	r2, r1
 800d8c6:	b2d2      	uxtb	r2, r2
 800d8c8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800d8cc:	440b      	add	r3, r1
 800d8ce:	f803 2c1c 	strb.w	r2, [r3, #-28]
				k++;
 800d8d2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		for(j=0;j<BOARDSIZE;j++)
 800d8dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800d8e6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d8ea:	2b07      	cmp	r3, #7
 800d8ec:	d9d3      	bls.n	800d896 <jogadaArM+0x8a>
	for(i=0;i<BOARDSIZE;i++)
 800d8ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d8f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d8fc:	2b07      	cmp	r3, #7
 800d8fe:	d9c6      	bls.n	800d88e <jogadaArM+0x82>
			}
		}
	}


	HAL_Delay(1000);//Dar tempo para o ARM pensar
 800d900:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d904:	f7f5 f888 	bl	8002a18 <HAL_Delay>

		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d908:	f04f 30ff 	mov.w	r0, #4294967295
 800d90c:	f7f3 fe68 	bl	80015e0 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font16);
 800d910:	484a      	ldr	r0, [pc, #296]	; (800da3c <jogadaArM+0x230>)
 800d912:	f7f3 fe7d 	bl	8001610 <BSP_LCD_SetFont>
		sprintf(string, "ARM Calculating Things");
 800d916:	1d3b      	adds	r3, r7, #4
 800d918:	4a49      	ldr	r2, [pc, #292]	; (800da40 <jogadaArM+0x234>)
 800d91a:	461c      	mov	r4, r3
 800d91c:	4615      	mov	r5, r2
 800d91e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d922:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d926:	6020      	str	r0, [r4, #0]
 800d928:	3404      	adds	r4, #4
 800d92a:	8021      	strh	r1, [r4, #0]
 800d92c:	3402      	adds	r4, #2
 800d92e:	0c0b      	lsrs	r3, r1, #16
 800d930:	7023      	strb	r3, [r4, #0]
		BSP_LCD_DisplayStringAt(200,LINE(9), (uint8_t *)string, CENTER_MODE);
 800d932:	f7f3 fe87 	bl	8001644 <BSP_LCD_GetFont>
 800d936:	4603      	mov	r3, r0
 800d938:	88db      	ldrh	r3, [r3, #6]
 800d93a:	461a      	mov	r2, r3
 800d93c:	00d2      	lsls	r2, r2, #3
 800d93e:	4413      	add	r3, r2
 800d940:	b299      	uxth	r1, r3
 800d942:	1d3a      	adds	r2, r7, #4
 800d944:	2301      	movs	r3, #1
 800d946:	20c8      	movs	r0, #200	; 0xc8
 800d948:	f7f3 ff62 	bl	8001810 <BSP_LCD_DisplayStringAt>

		//valor random para um valor do vector

		int r = rand() % k;
 800d94c:	f001 fb54 	bl	800eff8 <rand>
 800d950:	4602      	mov	r2, r0
 800d952:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d956:	fb92 f1f3 	sdiv	r1, r2, r3
 800d95a:	fb03 f301 	mul.w	r3, r3, r1
 800d95e:	1ad3      	subs	r3, r2, r3
 800d960:	633b      	str	r3, [r7, #48]	; 0x30

		celula=possible[r];
 800d962:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d968:	4413      	add	r3, r2
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		colunaCelula = celula%10;	//o valor é a célula de um vector com 2 digitos
 800d970:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d974:	4b34      	ldr	r3, [pc, #208]	; (800da48 <jogadaArM+0x23c>)
 800d976:	fba3 1302 	umull	r1, r3, r3, r2
 800d97a:	08d9      	lsrs	r1, r3, #3
 800d97c:	460b      	mov	r3, r1
 800d97e:	009b      	lsls	r3, r3, #2
 800d980:	440b      	add	r3, r1
 800d982:	005b      	lsls	r3, r3, #1
 800d984:	1ad3      	subs	r3, r2, r3
 800d986:	b2da      	uxtb	r2, r3
 800d988:	4b30      	ldr	r3, [pc, #192]	; (800da4c <jogadaArM+0x240>)
 800d98a:	701a      	strb	r2, [r3, #0]
		linhaCelula  = celula/10;
 800d98c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d990:	4a2d      	ldr	r2, [pc, #180]	; (800da48 <jogadaArM+0x23c>)
 800d992:	fba2 2303 	umull	r2, r3, r2, r3
 800d996:	08db      	lsrs	r3, r3, #3
 800d998:	b2da      	uxtb	r2, r3
 800d99a:	4b2d      	ldr	r3, [pc, #180]	; (800da50 <jogadaArM+0x244>)
 800d99c:	701a      	strb	r2, [r3, #0]

		tabuleiroJogo[linhaCelula][colunaCelula]=jogador.ID;	//coloca na matriz
 800d99e:	4b2c      	ldr	r3, [pc, #176]	; (800da50 <jogadaArM+0x244>)
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	461c      	mov	r4, r3
 800d9a4:	4b29      	ldr	r3, [pc, #164]	; (800da4c <jogadaArM+0x240>)
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	4b2a      	ldr	r3, [pc, #168]	; (800da54 <jogadaArM+0x248>)
 800d9ac:	695a      	ldr	r2, [r3, #20]
 800d9ae:	4925      	ldr	r1, [pc, #148]	; (800da44 <jogadaArM+0x238>)
 800d9b0:	00e3      	lsls	r3, r4, #3
 800d9b2:	4403      	add	r3, r0
 800d9b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		pos_x=10+(colunaCelula)*50; //posição no LCD
 800d9b8:	4b24      	ldr	r3, [pc, #144]	; (800da4c <jogadaArM+0x240>)
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	461a      	mov	r2, r3
 800d9c0:	0092      	lsls	r2, r2, #2
 800d9c2:	4413      	add	r3, r2
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	0091      	lsls	r1, r2, #2
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	4413      	add	r3, r2
 800d9ce:	005b      	lsls	r3, r3, #1
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	330a      	adds	r3, #10
 800d9d4:	877b      	strh	r3, [r7, #58]	; 0x3a
		pos_y=50+(linhaCelula)*50;
 800d9d6:	4b1e      	ldr	r3, [pc, #120]	; (800da50 <jogadaArM+0x244>)
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	461a      	mov	r2, r3
 800d9e0:	0092      	lsls	r2, r2, #2
 800d9e2:	4413      	add	r3, r2
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	0091      	lsls	r1, r2, #2
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	4413      	add	r3, r2
 800d9ee:	005b      	lsls	r3, r3, #1
 800d9f0:	873b      	strh	r3, [r7, #56]	; 0x38
		BSP_LCD_SetTextColor(jogador.pieceColor); // coloca a peça no LCD
 800d9f2:	4b18      	ldr	r3, [pc, #96]	; (800da54 <jogadaArM+0x248>)
 800d9f4:	699b      	ldr	r3, [r3, #24]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7f3 fdf2 	bl	80015e0 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(pos_x+BOARDCELLSIZE/2,pos_y+BOARDCELLSIZE/2,PIECESIZE);
 800d9fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d9fe:	3319      	adds	r3, #25
 800da00:	b298      	uxth	r0, r3
 800da02:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800da04:	3319      	adds	r3, #25
 800da06:	b29b      	uxth	r3, r3
 800da08:	2214      	movs	r2, #20
 800da0a:	4619      	mov	r1, r3
 800da0c:	f7f4 f9c0 	bl	8001d90 <BSP_LCD_FillCircle>
		piecePlaced=1;
 800da10:	4b11      	ldr	r3, [pc, #68]	; (800da58 <jogadaArM+0x24c>)
 800da12:	2201      	movs	r2, #1
 800da14:	701a      	strb	r2, [r3, #0]

		turnPieces(jogador.ID,adversario.ID,linhaCelula,colunaCelula);
 800da16:	4b0f      	ldr	r3, [pc, #60]	; (800da54 <jogadaArM+0x248>)
 800da18:	695b      	ldr	r3, [r3, #20]
 800da1a:	b2d8      	uxtb	r0, r3
 800da1c:	4b0f      	ldr	r3, [pc, #60]	; (800da5c <jogadaArM+0x250>)
 800da1e:	695b      	ldr	r3, [r3, #20]
 800da20:	b2d9      	uxtb	r1, r3
 800da22:	4b0b      	ldr	r3, [pc, #44]	; (800da50 <jogadaArM+0x244>)
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	b25a      	sxtb	r2, r3
 800da28:	4b08      	ldr	r3, [pc, #32]	; (800da4c <jogadaArM+0x240>)
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	b25b      	sxtb	r3, r3
 800da2e:	f000 fbc5 	bl	800e1bc <turnPieces>

}
 800da32:	bf00      	nop
 800da34:	3740      	adds	r7, #64	; 0x40
 800da36:	46bd      	mov	sp, r7
 800da38:	bdb0      	pop	{r4, r5, r7, pc}
 800da3a:	bf00      	nop
 800da3c:	20000044 	.word	0x20000044
 800da40:	0800fa44 	.word	0x0800fa44
 800da44:	2000016c 	.word	0x2000016c
 800da48:	cccccccd 	.word	0xcccccccd
 800da4c:	20000b58 	.word	0x20000b58
 800da50:	20000cd0 	.word	0x20000cd0
 800da54:	20000d4c 	.word	0x20000d4c
 800da58:	20000543 	.word	0x20000543
 800da5c:	20000d30 	.word	0x20000d30

0800da60 <ckecktimeout>:



void ckecktimeout()
{
 800da60:	b580      	push	{r7, lr}
 800da62:	af00      	add	r7, sp, #0

	if(gameStart && timeout==1)
 800da64:	4b23      	ldr	r3, [pc, #140]	; (800daf4 <ckecktimeout+0x94>)
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d041      	beq.n	800daf0 <ckecktimeout+0x90>
 800da6c:	4b22      	ldr	r3, [pc, #136]	; (800daf8 <ckecktimeout+0x98>)
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d03d      	beq.n	800daf0 <ckecktimeout+0x90>
	{
		timeout=0;
 800da74:	4b20      	ldr	r3, [pc, #128]	; (800daf8 <ckecktimeout+0x98>)
 800da76:	2200      	movs	r2, #0
 800da78:	701a      	strb	r2, [r3, #0]
		timeLeft=20;
 800da7a:	4b20      	ldr	r3, [pc, #128]	; (800dafc <ckecktimeout+0x9c>)
 800da7c:	2214      	movs	r2, #20
 800da7e:	701a      	strb	r2, [r3, #0]
		BSP_LCD_SetFont(&Font16);
 800da80:	481f      	ldr	r0, [pc, #124]	; (800db00 <ckecktimeout+0xa0>)
 800da82:	f7f3 fdc5 	bl	8001610 <BSP_LCD_SetFont>

		if(pTurn)
 800da86:	4b1f      	ldr	r3, [pc, #124]	; (800db04 <ckecktimeout+0xa4>)
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d014      	beq.n	800dab8 <ckecktimeout+0x58>
		{

			timeoutCounterPlayer1--;
 800da8e:	4b1e      	ldr	r3, [pc, #120]	; (800db08 <ckecktimeout+0xa8>)
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	3b01      	subs	r3, #1
 800da94:	b2da      	uxtb	r2, r3
 800da96:	4b1c      	ldr	r3, [pc, #112]	; (800db08 <ckecktimeout+0xa8>)
 800da98:	701a      	strb	r2, [r3, #0]

			if(timeoutCounterPlayer1==0)
 800da9a:	4b1b      	ldr	r3, [pc, #108]	; (800db08 <ckecktimeout+0xa8>)
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d106      	bne.n	800dab0 <ckecktimeout+0x50>
			{
				gameStart=0;
 800daa2:	4b14      	ldr	r3, [pc, #80]	; (800daf4 <ckecktimeout+0x94>)
 800daa4:	2200      	movs	r2, #0
 800daa6:	701a      	strb	r2, [r3, #0]
				player1LoseFlag=1;
 800daa8:	4b18      	ldr	r3, [pc, #96]	; (800db0c <ckecktimeout+0xac>)
 800daaa:	2201      	movs	r2, #1
 800daac:	701a      	strb	r2, [r3, #0]

				return;
 800daae:	e01f      	b.n	800daf0 <ckecktimeout+0x90>
			}

			pTurn=0;
 800dab0:	4b14      	ldr	r3, [pc, #80]	; (800db04 <ckecktimeout+0xa4>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	701a      	strb	r2, [r3, #0]
			return;
 800dab6:	e01b      	b.n	800daf0 <ckecktimeout+0x90>
		}

		if(!pTurn)
 800dab8:	4b12      	ldr	r3, [pc, #72]	; (800db04 <ckecktimeout+0xa4>)
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	f083 0301 	eor.w	r3, r3, #1
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d014      	beq.n	800daf0 <ckecktimeout+0x90>
		{
			timeoutCounterPlayer2--;
 800dac6:	4b12      	ldr	r3, [pc, #72]	; (800db10 <ckecktimeout+0xb0>)
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	3b01      	subs	r3, #1
 800dacc:	b2da      	uxtb	r2, r3
 800dace:	4b10      	ldr	r3, [pc, #64]	; (800db10 <ckecktimeout+0xb0>)
 800dad0:	701a      	strb	r2, [r3, #0]

			if(timeoutCounterPlayer2==0)
 800dad2:	4b0f      	ldr	r3, [pc, #60]	; (800db10 <ckecktimeout+0xb0>)
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d106      	bne.n	800dae8 <ckecktimeout+0x88>
			{
				gameStart=0;
 800dada:	4b06      	ldr	r3, [pc, #24]	; (800daf4 <ckecktimeout+0x94>)
 800dadc:	2200      	movs	r2, #0
 800dade:	701a      	strb	r2, [r3, #0]
				player2LoseFlag=1;
 800dae0:	4b0c      	ldr	r3, [pc, #48]	; (800db14 <ckecktimeout+0xb4>)
 800dae2:	2201      	movs	r2, #1
 800dae4:	701a      	strb	r2, [r3, #0]
				return;
 800dae6:	e003      	b.n	800daf0 <ckecktimeout+0x90>
			}

			pTurn=1;
 800dae8:	4b06      	ldr	r3, [pc, #24]	; (800db04 <ckecktimeout+0xa4>)
 800daea:	2201      	movs	r2, #1
 800daec:	701a      	strb	r2, [r3, #0]
			return;
 800daee:	bf00      	nop
		}
	}
}
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	2000053e 	.word	0x2000053e
 800daf8:	20000546 	.word	0x20000546
 800dafc:	2000005e 	.word	0x2000005e
 800db00:	20000044 	.word	0x20000044
 800db04:	2000005d 	.word	0x2000005d
 800db08:	2000005f 	.word	0x2000005f
 800db0c:	2000053f 	.word	0x2000053f
 800db10:	20000060 	.word	0x20000060
 800db14:	20000540 	.word	0x20000540

0800db18 <menu>:




void menu()
{
 800db18:	b5b0      	push	{r4, r5, r7, lr}
 800db1a:	b08e      	sub	sp, #56	; 0x38
 800db1c:	af00      	add	r7, sp, #0
	char string[50];

	 if(touchScreenFlag==1 && gameStart==0)
 800db1e:	4b69      	ldr	r3, [pc, #420]	; (800dcc4 <menu+0x1ac>)
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	f000 80ca 	beq.w	800dcbc <menu+0x1a4>
 800db28:	4b67      	ldr	r3, [pc, #412]	; (800dcc8 <menu+0x1b0>)
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	f083 0301 	eor.w	r3, r3, #1
 800db30:	b2db      	uxtb	r3, r3
 800db32:	2b00      	cmp	r3, #0
 800db34:	f000 80c2 	beq.w	800dcbc <menu+0x1a4>
	 {

		 touchScreenFlag=0;
 800db38:	4b62      	ldr	r3, [pc, #392]	; (800dcc4 <menu+0x1ac>)
 800db3a:	2200      	movs	r2, #0
 800db3c:	701a      	strb	r2, [r3, #0]

		 if(TS_State.touchX[0]>200 && TS_State.touchX[0]<600 && TS_State.touchY[0]>100 && TS_State.touchY[0]<300)
 800db3e:	4b63      	ldr	r3, [pc, #396]	; (800dccc <menu+0x1b4>)
 800db40:	885b      	ldrh	r3, [r3, #2]
 800db42:	2bc8      	cmp	r3, #200	; 0xc8
 800db44:	d913      	bls.n	800db6e <menu+0x56>
 800db46:	4b61      	ldr	r3, [pc, #388]	; (800dccc <menu+0x1b4>)
 800db48:	885b      	ldrh	r3, [r3, #2]
 800db4a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800db4e:	d20e      	bcs.n	800db6e <menu+0x56>
 800db50:	4b5e      	ldr	r3, [pc, #376]	; (800dccc <menu+0x1b4>)
 800db52:	88db      	ldrh	r3, [r3, #6]
 800db54:	2b64      	cmp	r3, #100	; 0x64
 800db56:	d90a      	bls.n	800db6e <menu+0x56>
 800db58:	4b5c      	ldr	r3, [pc, #368]	; (800dccc <menu+0x1b4>)
 800db5a:	88db      	ldrh	r3, [r3, #6]
 800db5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800db60:	d205      	bcs.n	800db6e <menu+0x56>
		 {
			 BSP_LCD_Clear(LCD_COLOR_WHITE);
 800db62:	f04f 30ff 	mov.w	r0, #4294967295
 800db66:	f7f3 fd83 	bl	8001670 <BSP_LCD_Clear>
			 displayGame();
 800db6a:	f7ff f955 	bl	800ce18 <displayGame>
		 }


		 if(TS_State.touchX[0]>455 && TS_State.touchX[0]<755 && TS_State.touchY[0]>250 && TS_State.touchY[0]<300)
 800db6e:	4b57      	ldr	r3, [pc, #348]	; (800dccc <menu+0x1b4>)
 800db70:	885b      	ldrh	r3, [r3, #2]
 800db72:	f5b3 7fe4 	cmp.w	r3, #456	; 0x1c8
 800db76:	d333      	bcc.n	800dbe0 <menu+0xc8>
 800db78:	4b54      	ldr	r3, [pc, #336]	; (800dccc <menu+0x1b4>)
 800db7a:	885b      	ldrh	r3, [r3, #2]
 800db7c:	f240 22f2 	movw	r2, #754	; 0x2f2
 800db80:	4293      	cmp	r3, r2
 800db82:	d82d      	bhi.n	800dbe0 <menu+0xc8>
 800db84:	4b51      	ldr	r3, [pc, #324]	; (800dccc <menu+0x1b4>)
 800db86:	88db      	ldrh	r3, [r3, #6]
 800db88:	2bfa      	cmp	r3, #250	; 0xfa
 800db8a:	d929      	bls.n	800dbe0 <menu+0xc8>
 800db8c:	4b4f      	ldr	r3, [pc, #316]	; (800dccc <menu+0x1b4>)
 800db8e:	88db      	ldrh	r3, [r3, #6]
 800db90:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800db94:	d224      	bcs.n	800dbe0 <menu+0xc8>
		 {
			 // Inicia o jogo Human  vs Human
			 InitializeVariables();
 800db96:	f000 f8ab 	bl	800dcf0 <InitializeVariables>
			 sprintf(string, "Game Mode: Human vs. Human");
 800db9a:	1d3b      	adds	r3, r7, #4
 800db9c:	4a4c      	ldr	r2, [pc, #304]	; (800dcd0 <menu+0x1b8>)
 800db9e:	461c      	mov	r4, r3
 800dba0:	4615      	mov	r5, r2
 800dba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dba6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dbaa:	c403      	stmia	r4!, {r0, r1}
 800dbac:	8022      	strh	r2, [r4, #0]
 800dbae:	3402      	adds	r4, #2
 800dbb0:	0c13      	lsrs	r3, r2, #16
 800dbb2:	7023      	strb	r3, [r4, #0]
			 BSP_LCD_DisplayStringAt(200,LINE(7), (uint8_t *)string, CENTER_MODE);
 800dbb4:	f7f3 fd46 	bl	8001644 <BSP_LCD_GetFont>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	88db      	ldrh	r3, [r3, #6]
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	00d2      	lsls	r2, r2, #3
 800dbc0:	1ad3      	subs	r3, r2, r3
 800dbc2:	b299      	uxth	r1, r3
 800dbc4:	1d3a      	adds	r2, r7, #4
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	20c8      	movs	r0, #200	; 0xc8
 800dbca:	f7f3 fe21 	bl	8001810 <BSP_LCD_DisplayStringAt>
			 gameHH=1;
 800dbce:	4b41      	ldr	r3, [pc, #260]	; (800dcd4 <menu+0x1bc>)
 800dbd0:	2201      	movs	r2, #1
 800dbd2:	701a      	strb	r2, [r3, #0]
			 gameHA=0;
 800dbd4:	4b40      	ldr	r3, [pc, #256]	; (800dcd8 <menu+0x1c0>)
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	701a      	strb	r2, [r3, #0]
			 pTurn=1;
 800dbda:	4b40      	ldr	r3, [pc, #256]	; (800dcdc <menu+0x1c4>)
 800dbdc:	2201      	movs	r2, #1
 800dbde:	701a      	strb	r2, [r3, #0]

		 }

		 if(TS_State.touchX[0]>455 && TS_State.touchX[0]<755 && TS_State.touchY[0]>310 && TS_State.touchY[0]<360)
 800dbe0:	4b3a      	ldr	r3, [pc, #232]	; (800dccc <menu+0x1b4>)
 800dbe2:	885b      	ldrh	r3, [r3, #2]
 800dbe4:	f5b3 7fe4 	cmp.w	r3, #456	; 0x1c8
 800dbe8:	d331      	bcc.n	800dc4e <menu+0x136>
 800dbea:	4b38      	ldr	r3, [pc, #224]	; (800dccc <menu+0x1b4>)
 800dbec:	885b      	ldrh	r3, [r3, #2]
 800dbee:	f240 22f2 	movw	r2, #754	; 0x2f2
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d82b      	bhi.n	800dc4e <menu+0x136>
 800dbf6:	4b35      	ldr	r3, [pc, #212]	; (800dccc <menu+0x1b4>)
 800dbf8:	88db      	ldrh	r3, [r3, #6]
 800dbfa:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800dbfe:	d926      	bls.n	800dc4e <menu+0x136>
 800dc00:	4b32      	ldr	r3, [pc, #200]	; (800dccc <menu+0x1b4>)
 800dc02:	88db      	ldrh	r3, [r3, #6]
 800dc04:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800dc08:	d221      	bcs.n	800dc4e <menu+0x136>
		 {
			 //Inicia o Jogo Human vs ARM
			 InitializeVariables();
 800dc0a:	f000 f871 	bl	800dcf0 <InitializeVariables>
			 sprintf(string, "Game Mode: Human vs. ARM");
 800dc0e:	1d3b      	adds	r3, r7, #4
 800dc10:	4a33      	ldr	r2, [pc, #204]	; (800dce0 <menu+0x1c8>)
 800dc12:	461c      	mov	r4, r3
 800dc14:	4615      	mov	r5, r2
 800dc16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dc1e:	c403      	stmia	r4!, {r0, r1}
 800dc20:	7022      	strb	r2, [r4, #0]
			 BSP_LCD_DisplayStringAt(200,LINE(7), (uint8_t *)string, CENTER_MODE);
 800dc22:	f7f3 fd0f 	bl	8001644 <BSP_LCD_GetFont>
 800dc26:	4603      	mov	r3, r0
 800dc28:	88db      	ldrh	r3, [r3, #6]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	00d2      	lsls	r2, r2, #3
 800dc2e:	1ad3      	subs	r3, r2, r3
 800dc30:	b299      	uxth	r1, r3
 800dc32:	1d3a      	adds	r2, r7, #4
 800dc34:	2301      	movs	r3, #1
 800dc36:	20c8      	movs	r0, #200	; 0xc8
 800dc38:	f7f3 fdea 	bl	8001810 <BSP_LCD_DisplayStringAt>
			 gameHA=1;
 800dc3c:	4b26      	ldr	r3, [pc, #152]	; (800dcd8 <menu+0x1c0>)
 800dc3e:	2201      	movs	r2, #1
 800dc40:	701a      	strb	r2, [r3, #0]
			 gameHH=0;
 800dc42:	4b24      	ldr	r3, [pc, #144]	; (800dcd4 <menu+0x1bc>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	701a      	strb	r2, [r3, #0]
			 pTurn=1;
 800dc48:	4b24      	ldr	r3, [pc, #144]	; (800dcdc <menu+0x1c4>)
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	701a      	strb	r2, [r3, #0]

		 }

		 if(TS_State.touchX[0]>455 && TS_State.touchX[0]<755 && TS_State.touchY[0]>370 && TS_State.touchY[0]<420)
 800dc4e:	4b1f      	ldr	r3, [pc, #124]	; (800dccc <menu+0x1b4>)
 800dc50:	885b      	ldrh	r3, [r3, #2]
 800dc52:	f5b3 7fe4 	cmp.w	r3, #456	; 0x1c8
 800dc56:	d331      	bcc.n	800dcbc <menu+0x1a4>
 800dc58:	4b1c      	ldr	r3, [pc, #112]	; (800dccc <menu+0x1b4>)
 800dc5a:	885b      	ldrh	r3, [r3, #2]
 800dc5c:	f240 22f2 	movw	r2, #754	; 0x2f2
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d82b      	bhi.n	800dcbc <menu+0x1a4>
 800dc64:	4b19      	ldr	r3, [pc, #100]	; (800dccc <menu+0x1b4>)
 800dc66:	88db      	ldrh	r3, [r3, #6]
 800dc68:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 800dc6c:	d926      	bls.n	800dcbc <menu+0x1a4>
 800dc6e:	4b17      	ldr	r3, [pc, #92]	; (800dccc <menu+0x1b4>)
 800dc70:	88db      	ldrh	r3, [r3, #6]
 800dc72:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800dc76:	d221      	bcs.n	800dcbc <menu+0x1a4>
		 {
			 f_close(&SDFile);
 800dc78:	481a      	ldr	r0, [pc, #104]	; (800dce4 <menu+0x1cc>)
 800dc7a:	f7fe f9b0 	bl	800bfde <f_close>
			 BSP_LCD_SetFont(&Font16);
 800dc7e:	481a      	ldr	r0, [pc, #104]	; (800dce8 <menu+0x1d0>)
 800dc80:	f7f3 fcc6 	bl	8001610 <BSP_LCD_SetFont>
			 sprintf(string, "It's Safe to remove SDCard");
 800dc84:	1d3b      	adds	r3, r7, #4
 800dc86:	4a19      	ldr	r2, [pc, #100]	; (800dcec <menu+0x1d4>)
 800dc88:	461c      	mov	r4, r3
 800dc8a:	4615      	mov	r5, r2
 800dc8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dc94:	c403      	stmia	r4!, {r0, r1}
 800dc96:	8022      	strh	r2, [r4, #0]
 800dc98:	3402      	adds	r4, #2
 800dc9a:	0c13      	lsrs	r3, r2, #16
 800dc9c:	7023      	strb	r3, [r4, #0]
			 BSP_LCD_DisplayStringAt(200,LINE(11), (uint8_t *)string, CENTER_MODE);
 800dc9e:	f7f3 fcd1 	bl	8001644 <BSP_LCD_GetFont>
 800dca2:	4603      	mov	r3, r0
 800dca4:	88db      	ldrh	r3, [r3, #6]
 800dca6:	461a      	mov	r2, r3
 800dca8:	0092      	lsls	r2, r2, #2
 800dcaa:	441a      	add	r2, r3
 800dcac:	0052      	lsls	r2, r2, #1
 800dcae:	4413      	add	r3, r2
 800dcb0:	b299      	uxth	r1, r3
 800dcb2:	1d3a      	adds	r2, r7, #4
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	20c8      	movs	r0, #200	; 0xc8
 800dcb8:	f7f3 fdaa 	bl	8001810 <BSP_LCD_DisplayStringAt>
		 }

	 }
}
 800dcbc:	bf00      	nop
 800dcbe:	3738      	adds	r7, #56	; 0x38
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bdb0      	pop	{r4, r5, r7, pc}
 800dcc4:	20000545 	.word	0x20000545
 800dcc8:	2000053e 	.word	0x2000053e
 800dccc:	20000dc0 	.word	0x20000dc0
 800dcd0:	0800fa5c 	.word	0x0800fa5c
 800dcd4:	2000053c 	.word	0x2000053c
 800dcd8:	2000053d 	.word	0x2000053d
 800dcdc:	2000005d 	.word	0x2000005d
 800dce0:	0800fa78 	.word	0x0800fa78
 800dce4:	200006c0 	.word	0x200006c0
 800dce8:	20000044 	.word	0x20000044
 800dcec:	0800fa94 	.word	0x0800fa94

0800dcf0 <InitializeVariables>:

void InitializeVariables()
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	af00      	add	r7, sp, #0

	LoadInitialBoard();
 800dcf4:	f000 f84e 	bl	800dd94 <LoadInitialBoard>

	BSP_LCD_SetFont(&Font16);
 800dcf8:	4817      	ldr	r0, [pc, #92]	; (800dd58 <InitializeVariables+0x68>)
 800dcfa:	f7f3 fc89 	bl	8001610 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800dcfe:	4817      	ldr	r0, [pc, #92]	; (800dd5c <InitializeVariables+0x6c>)
 800dd00:	f7f3 fc6e 	bl	80015e0 <BSP_LCD_SetTextColor>

	minute=0,second=0;
 800dd04:	4b16      	ldr	r3, [pc, #88]	; (800dd60 <InitializeVariables+0x70>)
 800dd06:	2200      	movs	r2, #0
 800dd08:	701a      	strb	r2, [r3, #0]
 800dd0a:	4b16      	ldr	r3, [pc, #88]	; (800dd64 <InitializeVariables+0x74>)
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	701a      	strb	r2, [r3, #0]
	startTimer=1;
 800dd10:	4b15      	ldr	r3, [pc, #84]	; (800dd68 <InitializeVariables+0x78>)
 800dd12:	2201      	movs	r2, #1
 800dd14:	701a      	strb	r2, [r3, #0]
	scorePlayer1=0;
 800dd16:	4b15      	ldr	r3, [pc, #84]	; (800dd6c <InitializeVariables+0x7c>)
 800dd18:	2200      	movs	r2, #0
 800dd1a:	701a      	strb	r2, [r3, #0]
	scorePlayer2=0;
 800dd1c:	4b14      	ldr	r3, [pc, #80]	; (800dd70 <InitializeVariables+0x80>)
 800dd1e:	2200      	movs	r2, #0
 800dd20:	701a      	strb	r2, [r3, #0]
	gameStart=1;
 800dd22:	4b14      	ldr	r3, [pc, #80]	; (800dd74 <InitializeVariables+0x84>)
 800dd24:	2201      	movs	r2, #1
 800dd26:	701a      	strb	r2, [r3, #0]
	player1LoseFlag=0;
 800dd28:	4b13      	ldr	r3, [pc, #76]	; (800dd78 <InitializeVariables+0x88>)
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	701a      	strb	r2, [r3, #0]
	noMovesFlag1=0;
 800dd2e:	4b13      	ldr	r3, [pc, #76]	; (800dd7c <InitializeVariables+0x8c>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	701a      	strb	r2, [r3, #0]
	noMovesFlag2=0;
 800dd34:	4b12      	ldr	r3, [pc, #72]	; (800dd80 <InitializeVariables+0x90>)
 800dd36:	2200      	movs	r2, #0
 800dd38:	701a      	strb	r2, [r3, #0]
	piecePlaced=0;
 800dd3a:	4b12      	ldr	r3, [pc, #72]	; (800dd84 <InitializeVariables+0x94>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	701a      	strb	r2, [r3, #0]
	timeLeft=20;
 800dd40:	4b11      	ldr	r3, [pc, #68]	; (800dd88 <InitializeVariables+0x98>)
 800dd42:	2214      	movs	r2, #20
 800dd44:	701a      	strb	r2, [r3, #0]
	timeoutCounterPlayer1=3;
 800dd46:	4b11      	ldr	r3, [pc, #68]	; (800dd8c <InitializeVariables+0x9c>)
 800dd48:	2203      	movs	r2, #3
 800dd4a:	701a      	strb	r2, [r3, #0]
	timeoutCounterPlayer2=3;
 800dd4c:	4b10      	ldr	r3, [pc, #64]	; (800dd90 <InitializeVariables+0xa0>)
 800dd4e:	2203      	movs	r2, #3
 800dd50:	701a      	strb	r2, [r3, #0]
}
 800dd52:	bf00      	nop
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	20000044 	.word	0x20000044
 800dd5c:	ff0000ff 	.word	0xff0000ff
 800dd60:	20000547 	.word	0x20000547
 800dd64:	20000548 	.word	0x20000548
 800dd68:	2000053b 	.word	0x2000053b
 800dd6c:	20000550 	.word	0x20000550
 800dd70:	20000551 	.word	0x20000551
 800dd74:	2000053e 	.word	0x2000053e
 800dd78:	2000053f 	.word	0x2000053f
 800dd7c:	20000541 	.word	0x20000541
 800dd80:	20000542 	.word	0x20000542
 800dd84:	20000543 	.word	0x20000543
 800dd88:	2000005e 	.word	0x2000005e
 800dd8c:	2000005f 	.word	0x2000005f
 800dd90:	20000060 	.word	0x20000060

0800dd94 <LoadInitialBoard>:


void LoadInitialBoard()
{
 800dd94:	b590      	push	{r4, r7, lr}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
	uint8_t i,j;
	uint16_t linha=0;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	80bb      	strh	r3, [r7, #4]
	uint16_t coluna=0;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	807b      	strh	r3, [r7, #2]

	for(i=0;i<BOARDSIZE;i++)
 800dda2:	2300      	movs	r3, #0
 800dda4:	71fb      	strb	r3, [r7, #7]
 800dda6:	e019      	b.n	800dddc <LoadInitialBoard+0x48>
	{
		for(j=0;j<BOARDSIZE;j++)
 800dda8:	2300      	movs	r3, #0
 800ddaa:	71bb      	strb	r3, [r7, #6]
 800ddac:	e010      	b.n	800ddd0 <LoadInitialBoard+0x3c>
		{
			tabuleiroJogo[i][j]=tabuleiroInicial[i][j];
 800ddae:	79f8      	ldrb	r0, [r7, #7]
 800ddb0:	79ba      	ldrb	r2, [r7, #6]
 800ddb2:	79f9      	ldrb	r1, [r7, #7]
 800ddb4:	79bb      	ldrb	r3, [r7, #6]
 800ddb6:	4c3e      	ldr	r4, [pc, #248]	; (800deb0 <LoadInitialBoard+0x11c>)
 800ddb8:	00c0      	lsls	r0, r0, #3
 800ddba:	4402      	add	r2, r0
 800ddbc:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddc0:	483c      	ldr	r0, [pc, #240]	; (800deb4 <LoadInitialBoard+0x120>)
 800ddc2:	00c9      	lsls	r1, r1, #3
 800ddc4:	440b      	add	r3, r1
 800ddc6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(j=0;j<BOARDSIZE;j++)
 800ddca:	79bb      	ldrb	r3, [r7, #6]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	71bb      	strb	r3, [r7, #6]
 800ddd0:	79bb      	ldrb	r3, [r7, #6]
 800ddd2:	2b07      	cmp	r3, #7
 800ddd4:	d9eb      	bls.n	800ddae <LoadInitialBoard+0x1a>
	for(i=0;i<BOARDSIZE;i++)
 800ddd6:	79fb      	ldrb	r3, [r7, #7]
 800ddd8:	3301      	adds	r3, #1
 800ddda:	71fb      	strb	r3, [r7, #7]
 800dddc:	79fb      	ldrb	r3, [r7, #7]
 800ddde:	2b07      	cmp	r3, #7
 800dde0:	d9e2      	bls.n	800dda8 <LoadInitialBoard+0x14>
		}
	}

	for(i=0;i<BOARDSIZE;i++)
 800dde2:	2300      	movs	r3, #0
 800dde4:	71fb      	strb	r3, [r7, #7]
 800dde6:	e056      	b.n	800de96 <LoadInitialBoard+0x102>
	{
		for(j=0;j<BOARDSIZE;j++)
 800dde8:	2300      	movs	r3, #0
 800ddea:	71bb      	strb	r3, [r7, #6]
 800ddec:	e04d      	b.n	800de8a <LoadInitialBoard+0xf6>
		{

			linha  = 50+50*i;
 800ddee:	79fb      	ldrb	r3, [r7, #7]
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	0092      	lsls	r2, r2, #2
 800ddf8:	4413      	add	r3, r2
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	0091      	lsls	r1, r2, #2
 800ddfe:	461a      	mov	r2, r3
 800de00:	460b      	mov	r3, r1
 800de02:	4413      	add	r3, r2
 800de04:	005b      	lsls	r3, r3, #1
 800de06:	80bb      	strh	r3, [r7, #4]
			coluna = 10+50*j;
 800de08:	79bb      	ldrb	r3, [r7, #6]
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	461a      	mov	r2, r3
 800de0e:	0092      	lsls	r2, r2, #2
 800de10:	4413      	add	r3, r2
 800de12:	461a      	mov	r2, r3
 800de14:	0091      	lsls	r1, r2, #2
 800de16:	461a      	mov	r2, r3
 800de18:	460b      	mov	r3, r1
 800de1a:	4413      	add	r3, r2
 800de1c:	005b      	lsls	r3, r3, #1
 800de1e:	b29b      	uxth	r3, r3
 800de20:	330a      	adds	r3, #10
 800de22:	807b      	strh	r3, [r7, #2]
			if(tabuleiroJogo[i][j]==1)
 800de24:	79fa      	ldrb	r2, [r7, #7]
 800de26:	79bb      	ldrb	r3, [r7, #6]
 800de28:	4922      	ldr	r1, [pc, #136]	; (800deb4 <LoadInitialBoard+0x120>)
 800de2a:	00d2      	lsls	r2, r2, #3
 800de2c:	4413      	add	r3, r2
 800de2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800de32:	2b01      	cmp	r3, #1
 800de34:	d10e      	bne.n	800de54 <LoadInitialBoard+0xc0>
			{
				BSP_LCD_SetTextColor(jogador1.pieceColor);
 800de36:	4b20      	ldr	r3, [pc, #128]	; (800deb8 <LoadInitialBoard+0x124>)
 800de38:	699b      	ldr	r3, [r3, #24]
 800de3a:	4618      	mov	r0, r3
 800de3c:	f7f3 fbd0 	bl	80015e0 <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(coluna+BOARDCELLSIZE/2,linha+BOARDCELLSIZE/2,PIECESIZE);
 800de40:	887b      	ldrh	r3, [r7, #2]
 800de42:	3319      	adds	r3, #25
 800de44:	b298      	uxth	r0, r3
 800de46:	88bb      	ldrh	r3, [r7, #4]
 800de48:	3319      	adds	r3, #25
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	2214      	movs	r2, #20
 800de4e:	4619      	mov	r1, r3
 800de50:	f7f3 ff9e 	bl	8001d90 <BSP_LCD_FillCircle>
			}

			if(tabuleiroJogo[i][j]==2)
 800de54:	79fa      	ldrb	r2, [r7, #7]
 800de56:	79bb      	ldrb	r3, [r7, #6]
 800de58:	4916      	ldr	r1, [pc, #88]	; (800deb4 <LoadInitialBoard+0x120>)
 800de5a:	00d2      	lsls	r2, r2, #3
 800de5c:	4413      	add	r3, r2
 800de5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800de62:	2b02      	cmp	r3, #2
 800de64:	d10e      	bne.n	800de84 <LoadInitialBoard+0xf0>
			{
				BSP_LCD_SetTextColor(jogador2.pieceColor);
 800de66:	4b15      	ldr	r3, [pc, #84]	; (800debc <LoadInitialBoard+0x128>)
 800de68:	699b      	ldr	r3, [r3, #24]
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7f3 fbb8 	bl	80015e0 <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(coluna+BOARDCELLSIZE/2,linha+BOARDCELLSIZE/2,PIECESIZE);
 800de70:	887b      	ldrh	r3, [r7, #2]
 800de72:	3319      	adds	r3, #25
 800de74:	b298      	uxth	r0, r3
 800de76:	88bb      	ldrh	r3, [r7, #4]
 800de78:	3319      	adds	r3, #25
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	2214      	movs	r2, #20
 800de7e:	4619      	mov	r1, r3
 800de80:	f7f3 ff86 	bl	8001d90 <BSP_LCD_FillCircle>
		for(j=0;j<BOARDSIZE;j++)
 800de84:	79bb      	ldrb	r3, [r7, #6]
 800de86:	3301      	adds	r3, #1
 800de88:	71bb      	strb	r3, [r7, #6]
 800de8a:	79bb      	ldrb	r3, [r7, #6]
 800de8c:	2b07      	cmp	r3, #7
 800de8e:	d9ae      	bls.n	800ddee <LoadInitialBoard+0x5a>
	for(i=0;i<BOARDSIZE;i++)
 800de90:	79fb      	ldrb	r3, [r7, #7]
 800de92:	3301      	adds	r3, #1
 800de94:	71fb      	strb	r3, [r7, #7]
 800de96:	79fb      	ldrb	r3, [r7, #7]
 800de98:	2b07      	cmp	r3, #7
 800de9a:	d9a5      	bls.n	800dde8 <LoadInitialBoard+0x54>
			}
		}
	}
	checkAvailable(1);
 800de9c:	2001      	movs	r0, #1
 800de9e:	f000 f885 	bl	800dfac <checkAvailable>
	checkAvailable(2);
 800dea2:	2002      	movs	r0, #2
 800dea4:	f000 f882 	bl	800dfac <checkAvailable>
}
 800dea8:	bf00      	nop
 800deaa:	370c      	adds	r7, #12
 800deac:	46bd      	mov	sp, r7
 800deae:	bd90      	pop	{r4, r7, pc}
 800deb0:	2000006c 	.word	0x2000006c
 800deb4:	2000016c 	.word	0x2000016c
 800deb8:	20000b3c 	.word	0x20000b3c
 800debc:	20000cd4 	.word	0x20000cd4

0800dec0 <checkNumberOfPieces>:

void checkNumberOfPieces()
{
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	countPlayer1Pieces=0;
 800dec6:	4b1e      	ldr	r3, [pc, #120]	; (800df40 <checkNumberOfPieces+0x80>)
 800dec8:	2200      	movs	r2, #0
 800deca:	701a      	strb	r2, [r3, #0]
	countPlayer2Pieces=0;
 800decc:	4b1d      	ldr	r3, [pc, #116]	; (800df44 <checkNumberOfPieces+0x84>)
 800dece:	2200      	movs	r2, #0
 800ded0:	701a      	strb	r2, [r3, #0]

	for(i=0;i<BOARDSIZE;i++)
 800ded2:	2300      	movs	r3, #0
 800ded4:	71fb      	strb	r3, [r7, #7]
 800ded6:	e029      	b.n	800df2c <checkNumberOfPieces+0x6c>
	{
		for(j=0;j<BOARDSIZE;j++)
 800ded8:	2300      	movs	r3, #0
 800deda:	71bb      	strb	r3, [r7, #6]
 800dedc:	e020      	b.n	800df20 <checkNumberOfPieces+0x60>
		{
			if(tabuleiroJogo[i][j]==1)
 800dede:	79fa      	ldrb	r2, [r7, #7]
 800dee0:	79bb      	ldrb	r3, [r7, #6]
 800dee2:	4919      	ldr	r1, [pc, #100]	; (800df48 <checkNumberOfPieces+0x88>)
 800dee4:	00d2      	lsls	r2, r2, #3
 800dee6:	4413      	add	r3, r2
 800dee8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800deec:	2b01      	cmp	r3, #1
 800deee:	d105      	bne.n	800defc <checkNumberOfPieces+0x3c>
			{
				countPlayer1Pieces++;
 800def0:	4b13      	ldr	r3, [pc, #76]	; (800df40 <checkNumberOfPieces+0x80>)
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	3301      	adds	r3, #1
 800def6:	b2da      	uxtb	r2, r3
 800def8:	4b11      	ldr	r3, [pc, #68]	; (800df40 <checkNumberOfPieces+0x80>)
 800defa:	701a      	strb	r2, [r3, #0]
			}

			if(tabuleiroJogo[i][j]==2)
 800defc:	79fa      	ldrb	r2, [r7, #7]
 800defe:	79bb      	ldrb	r3, [r7, #6]
 800df00:	4911      	ldr	r1, [pc, #68]	; (800df48 <checkNumberOfPieces+0x88>)
 800df02:	00d2      	lsls	r2, r2, #3
 800df04:	4413      	add	r3, r2
 800df06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800df0a:	2b02      	cmp	r3, #2
 800df0c:	d105      	bne.n	800df1a <checkNumberOfPieces+0x5a>
			{
				countPlayer2Pieces++;
 800df0e:	4b0d      	ldr	r3, [pc, #52]	; (800df44 <checkNumberOfPieces+0x84>)
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	3301      	adds	r3, #1
 800df14:	b2da      	uxtb	r2, r3
 800df16:	4b0b      	ldr	r3, [pc, #44]	; (800df44 <checkNumberOfPieces+0x84>)
 800df18:	701a      	strb	r2, [r3, #0]
		for(j=0;j<BOARDSIZE;j++)
 800df1a:	79bb      	ldrb	r3, [r7, #6]
 800df1c:	3301      	adds	r3, #1
 800df1e:	71bb      	strb	r3, [r7, #6]
 800df20:	79bb      	ldrb	r3, [r7, #6]
 800df22:	2b07      	cmp	r3, #7
 800df24:	d9db      	bls.n	800dede <checkNumberOfPieces+0x1e>
	for(i=0;i<BOARDSIZE;i++)
 800df26:	79fb      	ldrb	r3, [r7, #7]
 800df28:	3301      	adds	r3, #1
 800df2a:	71fb      	strb	r3, [r7, #7]
 800df2c:	79fb      	ldrb	r3, [r7, #7]
 800df2e:	2b07      	cmp	r3, #7
 800df30:	d9d2      	bls.n	800ded8 <checkNumberOfPieces+0x18>
			}
		}
	}

}
 800df32:	bf00      	nop
 800df34:	370c      	adds	r7, #12
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop
 800df40:	20000552 	.word	0x20000552
 800df44:	20000553 	.word	0x20000553
 800df48:	2000016c 	.word	0x2000016c

0800df4c <countAvailableCellsToPlay>:


uint8_t countAvailableCellsToPlay(uint8_t piece)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	4603      	mov	r3, r0
 800df54:	71fb      	strb	r3, [r7, #7]
	uint8_t i,j;
	uint8_t countPlayerPieces=0;
 800df56:	2300      	movs	r3, #0
 800df58:	737b      	strb	r3, [r7, #13]

	for(i=0;i<BOARDSIZE;i++)
 800df5a:	2300      	movs	r3, #0
 800df5c:	73fb      	strb	r3, [r7, #15]
 800df5e:	e019      	b.n	800df94 <countAvailableCellsToPlay+0x48>
	{
		for(j=0;j<BOARDSIZE;j++)
 800df60:	2300      	movs	r3, #0
 800df62:	73bb      	strb	r3, [r7, #14]
 800df64:	e010      	b.n	800df88 <countAvailableCellsToPlay+0x3c>
		{
			if(tabuleiroJogo[i][j]==-piece)
 800df66:	7bfa      	ldrb	r2, [r7, #15]
 800df68:	7bbb      	ldrb	r3, [r7, #14]
 800df6a:	490f      	ldr	r1, [pc, #60]	; (800dfa8 <countAvailableCellsToPlay+0x5c>)
 800df6c:	00d2      	lsls	r2, r2, #3
 800df6e:	4413      	add	r3, r2
 800df70:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800df74:	79fb      	ldrb	r3, [r7, #7]
 800df76:	425b      	negs	r3, r3
 800df78:	429a      	cmp	r2, r3
 800df7a:	d102      	bne.n	800df82 <countAvailableCellsToPlay+0x36>
			{
				countPlayerPieces++;
 800df7c:	7b7b      	ldrb	r3, [r7, #13]
 800df7e:	3301      	adds	r3, #1
 800df80:	737b      	strb	r3, [r7, #13]
		for(j=0;j<BOARDSIZE;j++)
 800df82:	7bbb      	ldrb	r3, [r7, #14]
 800df84:	3301      	adds	r3, #1
 800df86:	73bb      	strb	r3, [r7, #14]
 800df88:	7bbb      	ldrb	r3, [r7, #14]
 800df8a:	2b07      	cmp	r3, #7
 800df8c:	d9eb      	bls.n	800df66 <countAvailableCellsToPlay+0x1a>
	for(i=0;i<BOARDSIZE;i++)
 800df8e:	7bfb      	ldrb	r3, [r7, #15]
 800df90:	3301      	adds	r3, #1
 800df92:	73fb      	strb	r3, [r7, #15]
 800df94:	7bfb      	ldrb	r3, [r7, #15]
 800df96:	2b07      	cmp	r3, #7
 800df98:	d9e2      	bls.n	800df60 <countAvailableCellsToPlay+0x14>
			}
		}
	}
	return countPlayerPieces;
 800df9a:	7b7b      	ldrb	r3, [r7, #13]

}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3714      	adds	r7, #20
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr
 800dfa8:	2000016c 	.word	0x2000016c

0800dfac <checkAvailable>:


void checkAvailable(uint8_t player)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	71fb      	strb	r3, [r7, #7]
	uint8_t i,j;
	uint8_t opponent;

	if(player==1)
 800dfb6:	79fb      	ldrb	r3, [r7, #7]
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d102      	bne.n	800dfc2 <checkAvailable+0x16>
		opponent=2;
 800dfbc:	2302      	movs	r3, #2
 800dfbe:	737b      	strb	r3, [r7, #13]
 800dfc0:	e004      	b.n	800dfcc <checkAvailable+0x20>
	else if(player==2)
 800dfc2:	79fb      	ldrb	r3, [r7, #7]
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	d101      	bne.n	800dfcc <checkAvailable+0x20>
		opponent=1;
 800dfc8:	2301      	movs	r3, #1
 800dfca:	737b      	strb	r3, [r7, #13]

	for(i=0;i<BOARDSIZE;i++)
 800dfcc:	2300      	movs	r3, #0
 800dfce:	73fb      	strb	r3, [r7, #15]
 800dfd0:	e023      	b.n	800e01a <checkAvailable+0x6e>
	{
		for(j=0;j<BOARDSIZE;j++)
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	73bb      	strb	r3, [r7, #14]
 800dfd6:	e01a      	b.n	800e00e <checkAvailable+0x62>
		{
			if(tabuleiroJogo[i][j]!=1 && tabuleiroJogo[i][j]!=2 )
 800dfd8:	7bfa      	ldrb	r2, [r7, #15]
 800dfda:	7bbb      	ldrb	r3, [r7, #14]
 800dfdc:	4912      	ldr	r1, [pc, #72]	; (800e028 <checkAvailable+0x7c>)
 800dfde:	00d2      	lsls	r2, r2, #3
 800dfe0:	4413      	add	r3, r2
 800dfe2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d00e      	beq.n	800e008 <checkAvailable+0x5c>
 800dfea:	7bfa      	ldrb	r2, [r7, #15]
 800dfec:	7bbb      	ldrb	r3, [r7, #14]
 800dfee:	490e      	ldr	r1, [pc, #56]	; (800e028 <checkAvailable+0x7c>)
 800dff0:	00d2      	lsls	r2, r2, #3
 800dff2:	4413      	add	r3, r2
 800dff4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800dff8:	2b02      	cmp	r3, #2
 800dffa:	d005      	beq.n	800e008 <checkAvailable+0x5c>
			{
				checkAdjacent(player,opponent,i,j);
 800dffc:	7bbb      	ldrb	r3, [r7, #14]
 800dffe:	7bfa      	ldrb	r2, [r7, #15]
 800e000:	7b79      	ldrb	r1, [r7, #13]
 800e002:	79f8      	ldrb	r0, [r7, #7]
 800e004:	f000 f812 	bl	800e02c <checkAdjacent>
		for(j=0;j<BOARDSIZE;j++)
 800e008:	7bbb      	ldrb	r3, [r7, #14]
 800e00a:	3301      	adds	r3, #1
 800e00c:	73bb      	strb	r3, [r7, #14]
 800e00e:	7bbb      	ldrb	r3, [r7, #14]
 800e010:	2b07      	cmp	r3, #7
 800e012:	d9e1      	bls.n	800dfd8 <checkAvailable+0x2c>
	for(i=0;i<BOARDSIZE;i++)
 800e014:	7bfb      	ldrb	r3, [r7, #15]
 800e016:	3301      	adds	r3, #1
 800e018:	73fb      	strb	r3, [r7, #15]
 800e01a:	7bfb      	ldrb	r3, [r7, #15]
 800e01c:	2b07      	cmp	r3, #7
 800e01e:	d9d8      	bls.n	800dfd2 <checkAvailable+0x26>
			}
		}
	}
}
 800e020:	bf00      	nop
 800e022:	3710      	adds	r7, #16
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	2000016c 	.word	0x2000016c

0800e02c <checkAdjacent>:


void checkAdjacent(uint8_t player, uint8_t opponent,uint8_t linha, uint8_t coluna)
{
 800e02c:	b590      	push	{r4, r7, lr}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	4604      	mov	r4, r0
 800e034:	4608      	mov	r0, r1
 800e036:	4611      	mov	r1, r2
 800e038:	461a      	mov	r2, r3
 800e03a:	4623      	mov	r3, r4
 800e03c:	71fb      	strb	r3, [r7, #7]
 800e03e:	4603      	mov	r3, r0
 800e040:	71bb      	strb	r3, [r7, #6]
 800e042:	460b      	mov	r3, r1
 800e044:	717b      	strb	r3, [r7, #5]
 800e046:	4613      	mov	r3, r2
 800e048:	713b      	strb	r3, [r7, #4]
	int8_t i;
	int8_t j;
	int8_t incrLinha;
	int8_t incrColuna;
	uint16_t pos_x=0;
 800e04a:	2300      	movs	r3, #0
 800e04c:	817b      	strh	r3, [r7, #10]
	uint16_t pos_y=0;
 800e04e:	2300      	movs	r3, #0
 800e050:	813b      	strh	r3, [r7, #8]

	for(i=-1;i<=1;i++)
 800e052:	23ff      	movs	r3, #255	; 0xff
 800e054:	73fb      	strb	r3, [r7, #15]
 800e056:	e0a3      	b.n	800e1a0 <checkAdjacent+0x174>
	{
		for(j=-1;j<=1;j++)
 800e058:	23ff      	movs	r3, #255	; 0xff
 800e05a:	73bb      	strb	r3, [r7, #14]
 800e05c:	e095      	b.n	800e18a <checkAdjacent+0x15e>
		{
			incrLinha=i;
 800e05e:	7bfb      	ldrb	r3, [r7, #15]
 800e060:	737b      	strb	r3, [r7, #13]
			incrColuna=j;
 800e062:	7bbb      	ldrb	r3, [r7, #14]
 800e064:	733b      	strb	r3, [r7, #12]
			while(tabuleiroJogo[linha+incrLinha][coluna+incrColuna]==opponent)
 800e066:	e077      	b.n	800e158 <checkAdjacent+0x12c>
			{
				incrLinha  = incrLinha+i;
 800e068:	7b7a      	ldrb	r2, [r7, #13]
 800e06a:	7bfb      	ldrb	r3, [r7, #15]
 800e06c:	4413      	add	r3, r2
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	737b      	strb	r3, [r7, #13]
				incrColuna = incrColuna+j;
 800e072:	7b3a      	ldrb	r2, [r7, #12]
 800e074:	7bbb      	ldrb	r3, [r7, #14]
 800e076:	4413      	add	r3, r2
 800e078:	b2db      	uxtb	r3, r3
 800e07a:	733b      	strb	r3, [r7, #12]
				if(tabuleiroJogo[linha+incrLinha][coluna+incrColuna]==player && linha+incrLinha>=0 &&linha+incrLinha<BOARDSIZE &&coluna+incrColuna>=0 && coluna+incrColuna<BOARDSIZE)
 800e07c:	797a      	ldrb	r2, [r7, #5]
 800e07e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e082:	441a      	add	r2, r3
 800e084:	7939      	ldrb	r1, [r7, #4]
 800e086:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e08a:	440b      	add	r3, r1
 800e08c:	4949      	ldr	r1, [pc, #292]	; (800e1b4 <checkAdjacent+0x188>)
 800e08e:	00d2      	lsls	r2, r2, #3
 800e090:	4413      	add	r3, r2
 800e092:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800e096:	79fb      	ldrb	r3, [r7, #7]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d15d      	bne.n	800e158 <checkAdjacent+0x12c>
 800e09c:	797a      	ldrb	r2, [r7, #5]
 800e09e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	db57      	blt.n	800e158 <checkAdjacent+0x12c>
 800e0a8:	797a      	ldrb	r2, [r7, #5]
 800e0aa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e0ae:	4413      	add	r3, r2
 800e0b0:	2b07      	cmp	r3, #7
 800e0b2:	dc51      	bgt.n	800e158 <checkAdjacent+0x12c>
 800e0b4:	793a      	ldrb	r2, [r7, #4]
 800e0b6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	db4b      	blt.n	800e158 <checkAdjacent+0x12c>
 800e0c0:	793a      	ldrb	r2, [r7, #4]
 800e0c2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e0c6:	4413      	add	r3, r2
 800e0c8:	2b07      	cmp	r3, #7
 800e0ca:	dc45      	bgt.n	800e158 <checkAdjacent+0x12c>
				{
					tabuleiroJogo[linha][coluna]=-player;
 800e0cc:	79fa      	ldrb	r2, [r7, #7]
 800e0ce:	7979      	ldrb	r1, [r7, #5]
 800e0d0:	793b      	ldrb	r3, [r7, #4]
 800e0d2:	4252      	negs	r2, r2
 800e0d4:	4837      	ldr	r0, [pc, #220]	; (800e1b4 <checkAdjacent+0x188>)
 800e0d6:	00c9      	lsls	r1, r1, #3
 800e0d8:	440b      	add	r3, r1
 800e0da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
					//apagar as seguintes linhas...... serve só para debug

					pos_x=10+(coluna)*BOARDCELLSIZE; //posição no LCD
 800e0de:	793b      	ldrb	r3, [r7, #4]
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	0092      	lsls	r2, r2, #2
 800e0e6:	4413      	add	r3, r2
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	0091      	lsls	r1, r2, #2
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	460b      	mov	r3, r1
 800e0f0:	4413      	add	r3, r2
 800e0f2:	005b      	lsls	r3, r3, #1
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	330a      	adds	r3, #10
 800e0f8:	817b      	strh	r3, [r7, #10]
					pos_y=50+(linha)*BOARDCELLSIZE;
 800e0fa:	797b      	ldrb	r3, [r7, #5]
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	461a      	mov	r2, r3
 800e102:	0092      	lsls	r2, r2, #2
 800e104:	4413      	add	r3, r2
 800e106:	461a      	mov	r2, r3
 800e108:	0091      	lsls	r1, r2, #2
 800e10a:	461a      	mov	r2, r3
 800e10c:	460b      	mov	r3, r1
 800e10e:	4413      	add	r3, r2
 800e110:	005b      	lsls	r3, r3, #1
 800e112:	813b      	strh	r3, [r7, #8]

					if(player==1)
 800e114:	79fb      	ldrb	r3, [r7, #7]
 800e116:	2b01      	cmp	r3, #1
 800e118:	d10c      	bne.n	800e134 <checkAdjacent+0x108>
					{
						BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 800e11a:	4827      	ldr	r0, [pc, #156]	; (800e1b8 <checkAdjacent+0x18c>)
 800e11c:	f7f3 fa60 	bl	80015e0 <BSP_LCD_SetTextColor>
						BSP_LCD_FillCircle(pos_x+BOARDCELLSIZE/2,pos_y+BOARDCELLSIZE/2,5);
 800e120:	897b      	ldrh	r3, [r7, #10]
 800e122:	3319      	adds	r3, #25
 800e124:	b298      	uxth	r0, r3
 800e126:	893b      	ldrh	r3, [r7, #8]
 800e128:	3319      	adds	r3, #25
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	2205      	movs	r2, #5
 800e12e:	4619      	mov	r1, r3
 800e130:	f7f3 fe2e 	bl	8001d90 <BSP_LCD_FillCircle>
					}

					if(player==2)
 800e134:	79fb      	ldrb	r3, [r7, #7]
 800e136:	2b02      	cmp	r3, #2
 800e138:	d120      	bne.n	800e17c <checkAdjacent+0x150>
					{
						BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 800e13a:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 800e13e:	f7f3 fa4f 	bl	80015e0 <BSP_LCD_SetTextColor>
						BSP_LCD_FillCircle(pos_x+BOARDCELLSIZE/2,pos_y+BOARDCELLSIZE/2,5);
 800e142:	897b      	ldrh	r3, [r7, #10]
 800e144:	3319      	adds	r3, #25
 800e146:	b298      	uxth	r0, r3
 800e148:	893b      	ldrh	r3, [r7, #8]
 800e14a:	3319      	adds	r3, #25
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	2205      	movs	r2, #5
 800e150:	4619      	mov	r1, r3
 800e152:	f7f3 fe1d 	bl	8001d90 <BSP_LCD_FillCircle>
					}
				//--------------------------------até aqui

					break;
 800e156:	e011      	b.n	800e17c <checkAdjacent+0x150>
			while(tabuleiroJogo[linha+incrLinha][coluna+incrColuna]==opponent)
 800e158:	797a      	ldrb	r2, [r7, #5]
 800e15a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e15e:	441a      	add	r2, r3
 800e160:	7939      	ldrb	r1, [r7, #4]
 800e162:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e166:	440b      	add	r3, r1
 800e168:	4912      	ldr	r1, [pc, #72]	; (800e1b4 <checkAdjacent+0x188>)
 800e16a:	00d2      	lsls	r2, r2, #3
 800e16c:	4413      	add	r3, r2
 800e16e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800e172:	79bb      	ldrb	r3, [r7, #6]
 800e174:	429a      	cmp	r2, r3
 800e176:	f43f af77 	beq.w	800e068 <checkAdjacent+0x3c>
 800e17a:	e000      	b.n	800e17e <checkAdjacent+0x152>
					break;
 800e17c:	bf00      	nop
		for(j=-1;j<=1;j++)
 800e17e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e182:	b2db      	uxtb	r3, r3
 800e184:	3301      	adds	r3, #1
 800e186:	b2db      	uxtb	r3, r3
 800e188:	73bb      	strb	r3, [r7, #14]
 800e18a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e18e:	2b01      	cmp	r3, #1
 800e190:	f77f af65 	ble.w	800e05e <checkAdjacent+0x32>
	for(i=-1;i<=1;i++)
 800e194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	3301      	adds	r3, #1
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	73fb      	strb	r3, [r7, #15]
 800e1a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	f77f af57 	ble.w	800e058 <checkAdjacent+0x2c>

			}
		}
	}

}
 800e1aa:	bf00      	nop
 800e1ac:	3714      	adds	r7, #20
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd90      	pop	{r4, r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	2000016c 	.word	0x2000016c
 800e1b8:	ffa52a2a 	.word	0xffa52a2a

0800e1bc <turnPieces>:

void turnPieces(uint8_t player,uint8_t opponent, int8_t linha, int8_t coluna)
{
 800e1bc:	b590      	push	{r4, r7, lr}
 800e1be:	b085      	sub	sp, #20
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	4604      	mov	r4, r0
 800e1c4:	4608      	mov	r0, r1
 800e1c6:	4611      	mov	r1, r2
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	4623      	mov	r3, r4
 800e1cc:	71fb      	strb	r3, [r7, #7]
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	71bb      	strb	r3, [r7, #6]
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	717b      	strb	r3, [r7, #5]
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	713b      	strb	r3, [r7, #4]
		int8_t incrLinha;
		int8_t incrColuna;
		int8_t linha1;
		int8_t coluna1;

		for(i=-1;i<=1;i++)
 800e1da:	23ff      	movs	r3, #255	; 0xff
 800e1dc:	73fb      	strb	r3, [r7, #15]
 800e1de:	e09e      	b.n	800e31e <turnPieces+0x162>
		{
			for(j=-1;j<=1;j++)
 800e1e0:	23ff      	movs	r3, #255	; 0xff
 800e1e2:	73bb      	strb	r3, [r7, #14]
 800e1e4:	e090      	b.n	800e308 <turnPieces+0x14c>
			{
				incrLinha=i;
 800e1e6:	7bfb      	ldrb	r3, [r7, #15]
 800e1e8:	737b      	strb	r3, [r7, #13]
				incrColuna=j;
 800e1ea:	7bbb      	ldrb	r3, [r7, #14]
 800e1ec:	733b      	strb	r3, [r7, #12]
				while(tabuleiroJogo[linha+incrLinha][coluna+incrColuna]==opponent && linha+incrLinha>=0 &&linha+incrLinha<BOARDSIZE &&coluna+incrColuna>=0 && coluna+incrColuna<BOARDSIZE)
 800e1ee:	e056      	b.n	800e29e <turnPieces+0xe2>
				{
					incrLinha  = incrLinha+i;
 800e1f0:	7b7a      	ldrb	r2, [r7, #13]
 800e1f2:	7bfb      	ldrb	r3, [r7, #15]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	737b      	strb	r3, [r7, #13]
					incrColuna = incrColuna+j;
 800e1fa:	7b3a      	ldrb	r2, [r7, #12]
 800e1fc:	7bbb      	ldrb	r3, [r7, #14]
 800e1fe:	4413      	add	r3, r2
 800e200:	b2db      	uxtb	r3, r3
 800e202:	733b      	strb	r3, [r7, #12]
					if(tabuleiroJogo[linha+incrLinha][coluna+incrColuna]==player)
 800e204:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800e208:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e20c:	441a      	add	r2, r3
 800e20e:	f997 1004 	ldrsb.w	r1, [r7, #4]
 800e212:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e216:	440b      	add	r3, r1
 800e218:	4945      	ldr	r1, [pc, #276]	; (800e330 <turnPieces+0x174>)
 800e21a:	00d2      	lsls	r2, r2, #3
 800e21c:	4413      	add	r3, r2
 800e21e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800e222:	79fb      	ldrb	r3, [r7, #7]
 800e224:	429a      	cmp	r2, r3
 800e226:	d13a      	bne.n	800e29e <turnPieces+0xe2>
					{
						linha1  = linha+incrLinha;
 800e228:	797a      	ldrb	r2, [r7, #5]
 800e22a:	7b7b      	ldrb	r3, [r7, #13]
 800e22c:	4413      	add	r3, r2
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	72fb      	strb	r3, [r7, #11]
						coluna1 = coluna+incrColuna;
 800e232:	793a      	ldrb	r2, [r7, #4]
 800e234:	7b3b      	ldrb	r3, [r7, #12]
 800e236:	4413      	add	r3, r2
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	72bb      	strb	r3, [r7, #10]
						//break;

						linha1=linha1-i;
 800e23c:	7afa      	ldrb	r2, [r7, #11]
 800e23e:	7bfb      	ldrb	r3, [r7, #15]
 800e240:	1ad3      	subs	r3, r2, r3
 800e242:	b2db      	uxtb	r3, r3
 800e244:	72fb      	strb	r3, [r7, #11]
						coluna1=coluna1-j;
 800e246:	7aba      	ldrb	r2, [r7, #10]
 800e248:	7bbb      	ldrb	r3, [r7, #14]
 800e24a:	1ad3      	subs	r3, r2, r3
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	72bb      	strb	r3, [r7, #10]
						while(tabuleiroJogo[linha1][coluna1]!=player)
 800e250:	e019      	b.n	800e286 <turnPieces+0xca>
						{
							tabuleiroJogo[linha1][coluna1]=player;
 800e252:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800e256:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800e25a:	79fa      	ldrb	r2, [r7, #7]
 800e25c:	4834      	ldr	r0, [pc, #208]	; (800e330 <turnPieces+0x174>)
 800e25e:	00c9      	lsls	r1, r1, #3
 800e260:	440b      	add	r3, r1
 800e262:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
							drawPieces(linha1,coluna1,player);
 800e266:	7afb      	ldrb	r3, [r7, #11]
 800e268:	7ab9      	ldrb	r1, [r7, #10]
 800e26a:	79fa      	ldrb	r2, [r7, #7]
 800e26c:	4618      	mov	r0, r3
 800e26e:	f000 f861 	bl	800e334 <drawPieces>
							linha1=linha1-i;
 800e272:	7afa      	ldrb	r2, [r7, #11]
 800e274:	7bfb      	ldrb	r3, [r7, #15]
 800e276:	1ad3      	subs	r3, r2, r3
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	72fb      	strb	r3, [r7, #11]
							coluna1=coluna1-j;
 800e27c:	7aba      	ldrb	r2, [r7, #10]
 800e27e:	7bbb      	ldrb	r3, [r7, #14]
 800e280:	1ad3      	subs	r3, r2, r3
 800e282:	b2db      	uxtb	r3, r3
 800e284:	72bb      	strb	r3, [r7, #10]
						while(tabuleiroJogo[linha1][coluna1]!=player)
 800e286:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800e28a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800e28e:	4928      	ldr	r1, [pc, #160]	; (800e330 <turnPieces+0x174>)
 800e290:	00d2      	lsls	r2, r2, #3
 800e292:	4413      	add	r3, r2
 800e294:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800e298:	79fb      	ldrb	r3, [r7, #7]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d1d9      	bne.n	800e252 <turnPieces+0x96>
				while(tabuleiroJogo[linha+incrLinha][coluna+incrColuna]==opponent && linha+incrLinha>=0 &&linha+incrLinha<BOARDSIZE &&coluna+incrColuna>=0 && coluna+incrColuna<BOARDSIZE)
 800e29e:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800e2a2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e2a6:	441a      	add	r2, r3
 800e2a8:	f997 1004 	ldrsb.w	r1, [r7, #4]
 800e2ac:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e2b0:	440b      	add	r3, r1
 800e2b2:	491f      	ldr	r1, [pc, #124]	; (800e330 <turnPieces+0x174>)
 800e2b4:	00d2      	lsls	r2, r2, #3
 800e2b6:	4413      	add	r3, r2
 800e2b8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800e2bc:	79bb      	ldrb	r3, [r7, #6]
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d11c      	bne.n	800e2fc <turnPieces+0x140>
 800e2c2:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800e2c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e2ca:	4413      	add	r3, r2
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	db15      	blt.n	800e2fc <turnPieces+0x140>
 800e2d0:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800e2d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e2d8:	4413      	add	r3, r2
 800e2da:	2b07      	cmp	r3, #7
 800e2dc:	dc0e      	bgt.n	800e2fc <turnPieces+0x140>
 800e2de:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800e2e2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e2e6:	4413      	add	r3, r2
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	db07      	blt.n	800e2fc <turnPieces+0x140>
 800e2ec:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800e2f0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	2b07      	cmp	r3, #7
 800e2f8:	f77f af7a 	ble.w	800e1f0 <turnPieces+0x34>
			for(j=-1;j<=1;j++)
 800e2fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e300:	b2db      	uxtb	r3, r3
 800e302:	3301      	adds	r3, #1
 800e304:	b2db      	uxtb	r3, r3
 800e306:	73bb      	strb	r3, [r7, #14]
 800e308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	f77f af6a 	ble.w	800e1e6 <turnPieces+0x2a>
		for(i=-1;i<=1;i++)
 800e312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e316:	b2db      	uxtb	r3, r3
 800e318:	3301      	adds	r3, #1
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	73fb      	strb	r3, [r7, #15]
 800e31e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e322:	2b01      	cmp	r3, #1
 800e324:	f77f af5c 	ble.w	800e1e0 <turnPieces+0x24>
						}
					}
				}
			}
		}
}
 800e328:	bf00      	nop
 800e32a:	3714      	adds	r7, #20
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd90      	pop	{r4, r7, pc}
 800e330:	2000016c 	.word	0x2000016c

0800e334 <drawPieces>:




void drawPieces(uint8_t i, uint8_t j,uint8_t player)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	4603      	mov	r3, r0
 800e33c:	71fb      	strb	r3, [r7, #7]
 800e33e:	460b      	mov	r3, r1
 800e340:	71bb      	strb	r3, [r7, #6]
 800e342:	4613      	mov	r3, r2
 800e344:	717b      	strb	r3, [r7, #5]
	uint16_t pos_x=0;
 800e346:	2300      	movs	r3, #0
 800e348:	81fb      	strh	r3, [r7, #14]
	uint16_t pos_y=0;
 800e34a:	2300      	movs	r3, #0
 800e34c:	81bb      	strh	r3, [r7, #12]

	pos_x=10+(j)*BOARDCELLSIZE; //posição no LCD
 800e34e:	79bb      	ldrb	r3, [r7, #6]
 800e350:	b29b      	uxth	r3, r3
 800e352:	461a      	mov	r2, r3
 800e354:	0092      	lsls	r2, r2, #2
 800e356:	4413      	add	r3, r2
 800e358:	461a      	mov	r2, r3
 800e35a:	0091      	lsls	r1, r2, #2
 800e35c:	461a      	mov	r2, r3
 800e35e:	460b      	mov	r3, r1
 800e360:	4413      	add	r3, r2
 800e362:	005b      	lsls	r3, r3, #1
 800e364:	b29b      	uxth	r3, r3
 800e366:	330a      	adds	r3, #10
 800e368:	81fb      	strh	r3, [r7, #14]
	pos_y=50+(i)*BOARDCELLSIZE;
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	3301      	adds	r3, #1
 800e36e:	b29b      	uxth	r3, r3
 800e370:	461a      	mov	r2, r3
 800e372:	0092      	lsls	r2, r2, #2
 800e374:	4413      	add	r3, r2
 800e376:	461a      	mov	r2, r3
 800e378:	0091      	lsls	r1, r2, #2
 800e37a:	461a      	mov	r2, r3
 800e37c:	460b      	mov	r3, r1
 800e37e:	4413      	add	r3, r2
 800e380:	005b      	lsls	r3, r3, #1
 800e382:	81bb      	strh	r3, [r7, #12]
	if(player==1)
 800e384:	797b      	ldrb	r3, [r7, #5]
 800e386:	2b01      	cmp	r3, #1
 800e388:	d10d      	bne.n	800e3a6 <drawPieces+0x72>
	{
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800e38a:	4811      	ldr	r0, [pc, #68]	; (800e3d0 <drawPieces+0x9c>)
 800e38c:	f7f3 f928 	bl	80015e0 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(pos_x+BOARDCELLSIZE/2,pos_y+BOARDCELLSIZE/2,PIECESIZE);
 800e390:	89fb      	ldrh	r3, [r7, #14]
 800e392:	3319      	adds	r3, #25
 800e394:	b298      	uxth	r0, r3
 800e396:	89bb      	ldrh	r3, [r7, #12]
 800e398:	3319      	adds	r3, #25
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	2214      	movs	r2, #20
 800e39e:	4619      	mov	r1, r3
 800e3a0:	f7f3 fcf6 	bl	8001d90 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(pos_x+BOARDCELLSIZE/2,pos_y+BOARDCELLSIZE/2,PIECESIZE);
	}



}
 800e3a4:	e010      	b.n	800e3c8 <drawPieces+0x94>
	else if(player==2)
 800e3a6:	797b      	ldrb	r3, [r7, #5]
 800e3a8:	2b02      	cmp	r3, #2
 800e3aa:	d10d      	bne.n	800e3c8 <drawPieces+0x94>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800e3ac:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800e3b0:	f7f3 f916 	bl	80015e0 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(pos_x+BOARDCELLSIZE/2,pos_y+BOARDCELLSIZE/2,PIECESIZE);
 800e3b4:	89fb      	ldrh	r3, [r7, #14]
 800e3b6:	3319      	adds	r3, #25
 800e3b8:	b298      	uxth	r0, r3
 800e3ba:	89bb      	ldrh	r3, [r7, #12]
 800e3bc:	3319      	adds	r3, #25
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	2214      	movs	r2, #20
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	f7f3 fce4 	bl	8001d90 <BSP_LCD_FillCircle>
}
 800e3c8:	bf00      	nop
 800e3ca:	3710      	adds	r7, #16
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	ffff0000 	.word	0xffff0000

0800e3d4 <gameOver>:


void gameOver()
{
 800e3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3d6:	b0a1      	sub	sp, #132	; 0x84
 800e3d8:	af04      	add	r7, sp, #16
	uint8_t timePlayedMinutes=0;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t timePlayedSeconds=0;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	uint8_t p1Pieces=0;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	uint8_t p2Pieces=0;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	uint8_t winner=0;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	char string[100];




	if(player1LoseFlag==1 || player2LoseFlag==1 || (noMovesFlag1==1 && noMovesFlag2==1))
 800e3f8:	4b92      	ldr	r3, [pc, #584]	; (800e644 <gameOver+0x270>)
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d10d      	bne.n	800e41c <gameOver+0x48>
 800e400:	4b91      	ldr	r3, [pc, #580]	; (800e648 <gameOver+0x274>)
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d109      	bne.n	800e41c <gameOver+0x48>
 800e408:	4b90      	ldr	r3, [pc, #576]	; (800e64c <gameOver+0x278>)
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	f000 8114 	beq.w	800e63a <gameOver+0x266>
 800e412:	4b8f      	ldr	r3, [pc, #572]	; (800e650 <gameOver+0x27c>)
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	f000 810f 	beq.w	800e63a <gameOver+0x266>
	{

		gameStart=0;
 800e41c:	4b8d      	ldr	r3, [pc, #564]	; (800e654 <gameOver+0x280>)
 800e41e:	2200      	movs	r2, #0
 800e420:	701a      	strb	r2, [r3, #0]
		startTimer=0;
 800e422:	4b8d      	ldr	r3, [pc, #564]	; (800e658 <gameOver+0x284>)
 800e424:	2200      	movs	r2, #0
 800e426:	701a      	strb	r2, [r3, #0]
		timePlayedMinutes =minute;
 800e428:	4b8c      	ldr	r3, [pc, #560]	; (800e65c <gameOver+0x288>)
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		timePlayedSeconds =second;
 800e430:	4b8b      	ldr	r3, [pc, #556]	; (800e660 <gameOver+0x28c>)
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		checkNumberOfPieces(); //contar as peças de cada jogador
 800e438:	f7ff fd42 	bl	800dec0 <checkNumberOfPieces>
		p1Pieces = countPlayer1Pieces;
 800e43c:	4b89      	ldr	r3, [pc, #548]	; (800e664 <gameOver+0x290>)
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
		p2Pieces = countPlayer2Pieces;
 800e444:	4b88      	ldr	r3, [pc, #544]	; (800e668 <gameOver+0x294>)
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		countPlayer1Pieces=0;
 800e44c:	4b85      	ldr	r3, [pc, #532]	; (800e664 <gameOver+0x290>)
 800e44e:	2200      	movs	r2, #0
 800e450:	701a      	strb	r2, [r3, #0]
		countPlayer2Pieces=0;
 800e452:	4b85      	ldr	r3, [pc, #532]	; (800e668 <gameOver+0x294>)
 800e454:	2200      	movs	r2, #0
 800e456:	701a      	strb	r2, [r3, #0]
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 800e458:	4884      	ldr	r0, [pc, #528]	; (800e66c <gameOver+0x298>)
 800e45a:	f7f3 f8c1 	bl	80015e0 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(200,100,400,200);
 800e45e:	23c8      	movs	r3, #200	; 0xc8
 800e460:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800e464:	2164      	movs	r1, #100	; 0x64
 800e466:	20c8      	movs	r0, #200	; 0xc8
 800e468:	f7f3 fc38 	bl	8001cdc <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800e46c:	4880      	ldr	r0, [pc, #512]	; (800e670 <gameOver+0x29c>)
 800e46e:	f7f3 f8b7 	bl	80015e0 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font24);
 800e472:	4880      	ldr	r0, [pc, #512]	; (800e674 <gameOver+0x2a0>)
 800e474:	f7f3 f8cc 	bl	8001610 <BSP_LCD_SetFont>
		sprintf(string, "GAME OVER");
 800e478:	1d3b      	adds	r3, r7, #4
 800e47a:	4a7f      	ldr	r2, [pc, #508]	; (800e678 <gameOver+0x2a4>)
 800e47c:	ca07      	ldmia	r2, {r0, r1, r2}
 800e47e:	c303      	stmia	r3!, {r0, r1}
 800e480:	801a      	strh	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(10,110, (uint8_t *)string, CENTER_MODE);
 800e482:	1d3a      	adds	r2, r7, #4
 800e484:	2301      	movs	r3, #1
 800e486:	216e      	movs	r1, #110	; 0x6e
 800e488:	200a      	movs	r0, #10
 800e48a:	f7f3 f9c1 	bl	8001810 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font16);
 800e48e:	487b      	ldr	r0, [pc, #492]	; (800e67c <gameOver+0x2a8>)
 800e490:	f7f3 f8be 	bl	8001610 <BSP_LCD_SetFont>
		sprintf(string, "Player1:%d pieces  Player2:%d pieces",p1Pieces,p2Pieces);
 800e494:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800e498:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e49c:	1d38      	adds	r0, r7, #4
 800e49e:	4978      	ldr	r1, [pc, #480]	; (800e680 <gameOver+0x2ac>)
 800e4a0:	f000 fdde 	bl	800f060 <siprintf>
		BSP_LCD_DisplayStringAt(5,150, (uint8_t *)string, CENTER_MODE);
 800e4a4:	1d3a      	adds	r2, r7, #4
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	2196      	movs	r1, #150	; 0x96
 800e4aa:	2005      	movs	r0, #5
 800e4ac:	f7f3 f9b0 	bl	8001810 <BSP_LCD_DisplayStringAt>
		sprintf(string, "Press to Continue");
 800e4b0:	1d3b      	adds	r3, r7, #4
 800e4b2:	4a74      	ldr	r2, [pc, #464]	; (800e684 <gameOver+0x2b0>)
 800e4b4:	461c      	mov	r4, r3
 800e4b6:	4615      	mov	r5, r2
 800e4b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4bc:	682b      	ldr	r3, [r5, #0]
 800e4be:	8023      	strh	r3, [r4, #0]
		BSP_LCD_DisplayStringAt(10,200, (uint8_t *)string, CENTER_MODE);
 800e4c0:	1d3a      	adds	r2, r7, #4
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	21c8      	movs	r1, #200	; 0xc8
 800e4c6:	200a      	movs	r0, #10
 800e4c8:	f7f3 f9a2 	bl	8001810 <BSP_LCD_DisplayStringAt>


		if(player1LoseFlag==1)
 800e4cc:	4b5d      	ldr	r3, [pc, #372]	; (800e644 <gameOver+0x270>)
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d018      	beq.n	800e506 <gameOver+0x132>
		{
			player1LoseFlag=0;
 800e4d4:	4b5b      	ldr	r3, [pc, #364]	; (800e644 <gameOver+0x270>)
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	701a      	strb	r2, [r3, #0]
			sprintf(string, "Player2 Wins by Timeout!!!");
 800e4da:	1d3b      	adds	r3, r7, #4
 800e4dc:	4a6a      	ldr	r2, [pc, #424]	; (800e688 <gameOver+0x2b4>)
 800e4de:	461c      	mov	r4, r3
 800e4e0:	4615      	mov	r5, r2
 800e4e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e4ea:	c403      	stmia	r4!, {r0, r1}
 800e4ec:	8022      	strh	r2, [r4, #0]
 800e4ee:	3402      	adds	r4, #2
 800e4f0:	0c13      	lsrs	r3, r2, #16
 800e4f2:	7023      	strb	r3, [r4, #0]
			BSP_LCD_DisplayStringAt(10,250, (uint8_t *)string, CENTER_MODE);
 800e4f4:	1d3a      	adds	r2, r7, #4
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	21fa      	movs	r1, #250	; 0xfa
 800e4fa:	200a      	movs	r0, #10
 800e4fc:	f7f3 f988 	bl	8001810 <BSP_LCD_DisplayStringAt>
			winner=2;
 800e500:	2302      	movs	r3, #2
 800e502:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		}

		if(player2LoseFlag==1)
 800e506:	4b50      	ldr	r3, [pc, #320]	; (800e648 <gameOver+0x274>)
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d018      	beq.n	800e540 <gameOver+0x16c>
		{
			player2LoseFlag=0;
 800e50e:	4b4e      	ldr	r3, [pc, #312]	; (800e648 <gameOver+0x274>)
 800e510:	2200      	movs	r2, #0
 800e512:	701a      	strb	r2, [r3, #0]
			sprintf(string, "Player1 Wins by Timeout!!!");
 800e514:	1d3b      	adds	r3, r7, #4
 800e516:	4a5d      	ldr	r2, [pc, #372]	; (800e68c <gameOver+0x2b8>)
 800e518:	461c      	mov	r4, r3
 800e51a:	4615      	mov	r5, r2
 800e51c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e51e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e520:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e524:	c403      	stmia	r4!, {r0, r1}
 800e526:	8022      	strh	r2, [r4, #0]
 800e528:	3402      	adds	r4, #2
 800e52a:	0c13      	lsrs	r3, r2, #16
 800e52c:	7023      	strb	r3, [r4, #0]
			BSP_LCD_DisplayStringAt(10,250, (uint8_t *)string, CENTER_MODE);
 800e52e:	1d3a      	adds	r2, r7, #4
 800e530:	2301      	movs	r3, #1
 800e532:	21fa      	movs	r1, #250	; 0xfa
 800e534:	200a      	movs	r0, #10
 800e536:	f7f3 f96b 	bl	8001810 <BSP_LCD_DisplayStringAt>
			winner=1;
 800e53a:	2301      	movs	r3, #1
 800e53c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		}


		if(noMovesFlag1==1 && noMovesFlag2==1)
 800e540:	4b42      	ldr	r3, [pc, #264]	; (800e64c <gameOver+0x278>)
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d050      	beq.n	800e5ea <gameOver+0x216>
 800e548:	4b41      	ldr	r3, [pc, #260]	; (800e650 <gameOver+0x27c>)
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d04c      	beq.n	800e5ea <gameOver+0x216>
		{
			noMovesFlag1=0;
 800e550:	4b3e      	ldr	r3, [pc, #248]	; (800e64c <gameOver+0x278>)
 800e552:	2200      	movs	r2, #0
 800e554:	701a      	strb	r2, [r3, #0]
			noMovesFlag2=0;
 800e556:	4b3e      	ldr	r3, [pc, #248]	; (800e650 <gameOver+0x27c>)
 800e558:	2200      	movs	r2, #0
 800e55a:	701a      	strb	r2, [r3, #0]

			if(p1Pieces>p2Pieces)
 800e55c:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800e560:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e564:	429a      	cmp	r2, r3
 800e566:	d910      	bls.n	800e58a <gameOver+0x1b6>
			{
				sprintf(string, "Player1 Wins!!!");
 800e568:	1d3b      	adds	r3, r7, #4
 800e56a:	4a49      	ldr	r2, [pc, #292]	; (800e690 <gameOver+0x2bc>)
 800e56c:	461c      	mov	r4, r3
 800e56e:	4613      	mov	r3, r2
 800e570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e572:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				BSP_LCD_DisplayStringAt(10,250, (uint8_t *)string, CENTER_MODE);
 800e576:	1d3a      	adds	r2, r7, #4
 800e578:	2301      	movs	r3, #1
 800e57a:	21fa      	movs	r1, #250	; 0xfa
 800e57c:	200a      	movs	r0, #10
 800e57e:	f7f3 f947 	bl	8001810 <BSP_LCD_DisplayStringAt>
				winner=1;
 800e582:	2301      	movs	r3, #1
 800e584:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800e588:	e02f      	b.n	800e5ea <gameOver+0x216>
			}

			else if(p2Pieces>p1Pieces)
 800e58a:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800e58e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800e592:	429a      	cmp	r2, r3
 800e594:	d910      	bls.n	800e5b8 <gameOver+0x1e4>
			{
				sprintf(string, "Player2 Wins!!!");
 800e596:	1d3b      	adds	r3, r7, #4
 800e598:	4a3e      	ldr	r2, [pc, #248]	; (800e694 <gameOver+0x2c0>)
 800e59a:	461c      	mov	r4, r3
 800e59c:	4613      	mov	r3, r2
 800e59e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e5a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				BSP_LCD_DisplayStringAt(10,250, (uint8_t *)string, CENTER_MODE);
 800e5a4:	1d3a      	adds	r2, r7, #4
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	21fa      	movs	r1, #250	; 0xfa
 800e5aa:	200a      	movs	r0, #10
 800e5ac:	f7f3 f930 	bl	8001810 <BSP_LCD_DisplayStringAt>
				winner=2;
 800e5b0:	2302      	movs	r3, #2
 800e5b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800e5b6:	e018      	b.n	800e5ea <gameOver+0x216>
			}
			else if(p2Pieces==p1Pieces)
 800e5b8:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800e5bc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d112      	bne.n	800e5ea <gameOver+0x216>
			{
				sprintf(string, "It's a tie!!!!");
 800e5c4:	1d3b      	adds	r3, r7, #4
 800e5c6:	4a34      	ldr	r2, [pc, #208]	; (800e698 <gameOver+0x2c4>)
 800e5c8:	461c      	mov	r4, r3
 800e5ca:	4613      	mov	r3, r2
 800e5cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e5ce:	c407      	stmia	r4!, {r0, r1, r2}
 800e5d0:	8023      	strh	r3, [r4, #0]
 800e5d2:	3402      	adds	r4, #2
 800e5d4:	0c1b      	lsrs	r3, r3, #16
 800e5d6:	7023      	strb	r3, [r4, #0]
				BSP_LCD_DisplayStringAt(10,250, (uint8_t *)string, CENTER_MODE);
 800e5d8:	1d3a      	adds	r2, r7, #4
 800e5da:	2301      	movs	r3, #1
 800e5dc:	21fa      	movs	r1, #250	; 0xfa
 800e5de:	200a      	movs	r0, #10
 800e5e0:	f7f3 f916 	bl	8001810 <BSP_LCD_DisplayStringAt>
				winner=13;
 800e5e4:	230d      	movs	r3, #13
 800e5e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			}
		}



		sprintf(string,"Game%d Stats:Time played:%dm%ds, P1 Pieces:%d, P2 Pieces:%d, Winner:Player%d",gamecount,timePlayedMinutes,timePlayedSeconds,p1Pieces,p2Pieces,winner);
 800e5ea:	4b2c      	ldr	r3, [pc, #176]	; (800e69c <gameOver+0x2c8>)
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	461e      	mov	r6, r3
 800e5f0:	f897 506e 	ldrb.w	r5, [r7, #110]	; 0x6e
 800e5f4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800e5f8:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800e5fc:	f897 106b 	ldrb.w	r1, [r7, #107]	; 0x6b
 800e600:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
 800e604:	1d3c      	adds	r4, r7, #4
 800e606:	9003      	str	r0, [sp, #12]
 800e608:	9102      	str	r1, [sp, #8]
 800e60a:	9201      	str	r2, [sp, #4]
 800e60c:	9300      	str	r3, [sp, #0]
 800e60e:	462b      	mov	r3, r5
 800e610:	4632      	mov	r2, r6
 800e612:	4923      	ldr	r1, [pc, #140]	; (800e6a0 <gameOver+0x2cc>)
 800e614:	4620      	mov	r0, r4
 800e616:	f000 fd23 	bl	800f060 <siprintf>
		if(f_write(&SDFile,string,strlen(string),*&nBytes)!=FR_OK)
 800e61a:	1d3b      	adds	r3, r7, #4
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7f1 fe0f 	bl	8000240 <strlen>
 800e622:	4602      	mov	r2, r0
 800e624:	4b1f      	ldr	r3, [pc, #124]	; (800e6a4 <gameOver+0x2d0>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	1d39      	adds	r1, r7, #4
 800e62a:	481f      	ldr	r0, [pc, #124]	; (800e6a8 <gameOver+0x2d4>)
 800e62c:	f7fd fae4 	bl	800bbf8 <f_write>
 800e630:	4603      	mov	r3, r0
 800e632:	2b00      	cmp	r3, #0
 800e634:	d001      	beq.n	800e63a <gameOver+0x266>
			  	Error_Handler();
 800e636:	f000 f857 	bl	800e6e8 <Error_Handler>



	}
}
 800e63a:	bf00      	nop
 800e63c:	3774      	adds	r7, #116	; 0x74
 800e63e:	46bd      	mov	sp, r7
 800e640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e642:	bf00      	nop
 800e644:	2000053f 	.word	0x2000053f
 800e648:	20000540 	.word	0x20000540
 800e64c:	20000541 	.word	0x20000541
 800e650:	20000542 	.word	0x20000542
 800e654:	2000053e 	.word	0x2000053e
 800e658:	2000053b 	.word	0x2000053b
 800e65c:	20000547 	.word	0x20000547
 800e660:	20000548 	.word	0x20000548
 800e664:	20000552 	.word	0x20000552
 800e668:	20000553 	.word	0x20000553
 800e66c:	ff8080ff 	.word	0xff8080ff
 800e670:	ffff0000 	.word	0xffff0000
 800e674:	2000003c 	.word	0x2000003c
 800e678:	0800fab0 	.word	0x0800fab0
 800e67c:	20000044 	.word	0x20000044
 800e680:	0800fabc 	.word	0x0800fabc
 800e684:	0800fae4 	.word	0x0800fae4
 800e688:	0800faf8 	.word	0x0800faf8
 800e68c:	0800fb14 	.word	0x0800fb14
 800e690:	0800fb30 	.word	0x0800fb30
 800e694:	0800fb40 	.word	0x0800fb40
 800e698:	0800fb50 	.word	0x0800fb50
 800e69c:	20000068 	.word	0x20000068
 800e6a0:	0800fb60 	.word	0x0800fb60
 800e6a4:	20000064 	.word	0x20000064
 800e6a8:	200006c0 	.word	0x200006c0

0800e6ac <InterruptResetWithBlueButton>:

void InterruptResetWithBlueButton()
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	af00      	add	r7, sp, #0
	//função para ir para as condições iniciais do jogo quando carregamos no botão azul
	// blueButtonFlag é activada na função de CallBack GPIO com o GPIO_PIN_0
	if(blueButtonFlag==1)
 800e6b0:	4b0a      	ldr	r3, [pc, #40]	; (800e6dc <InterruptResetWithBlueButton+0x30>)
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00e      	beq.n	800e6d6 <InterruptResetWithBlueButton+0x2a>
	  {
		blueButtonFlag=0;
 800e6b8:	4b08      	ldr	r3, [pc, #32]	; (800e6dc <InterruptResetWithBlueButton+0x30>)
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	701a      	strb	r2, [r3, #0]
		BSP_LCD_Clear(LCD_COLOR_WHITE);
 800e6be:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c2:	f7f2 ffd5 	bl	8001670 <BSP_LCD_Clear>
		displayGame();
 800e6c6:	f7fe fba7 	bl	800ce18 <displayGame>
		gameStart=0;
 800e6ca:	4b05      	ldr	r3, [pc, #20]	; (800e6e0 <InterruptResetWithBlueButton+0x34>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	701a      	strb	r2, [r3, #0]
		startTimer=0;
 800e6d0:	4b04      	ldr	r3, [pc, #16]	; (800e6e4 <InterruptResetWithBlueButton+0x38>)
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	701a      	strb	r2, [r3, #0]
	  }

}
 800e6d6:	bf00      	nop
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	20000544 	.word	0x20000544
 800e6e0:	2000053e 	.word	0x2000053e
 800e6e4:	2000053b 	.word	0x2000053b

0800e6e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1)
			{
				BSP_LED_Toggle(LED_RED);
 800e6ec:	2000      	movs	r0, #0
 800e6ee:	f7f2 fb3d 	bl	8000d6c <BSP_LED_Toggle>
				HAL_Delay(250);
 800e6f2:	20fa      	movs	r0, #250	; 0xfa
 800e6f4:	f7f4 f990 	bl	8002a18 <HAL_Delay>
				BSP_LED_Toggle(LED_RED);
 800e6f8:	e7f8      	b.n	800e6ec <Error_Handler+0x4>
	...

0800e6fc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b082      	sub	sp, #8
 800e700:	af00      	add	r7, sp, #0
 800e702:	4603      	mov	r3, r0
 800e704:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e706:	4b0b      	ldr	r3, [pc, #44]	; (800e734 <SD_CheckStatus+0x38>)
 800e708:	2201      	movs	r2, #1
 800e70a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e70c:	f7fd fd50 	bl	800c1b0 <BSP_SD_GetCardState>
 800e710:	4603      	mov	r3, r0
 800e712:	2b00      	cmp	r3, #0
 800e714:	d107      	bne.n	800e726 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e716:	4b07      	ldr	r3, [pc, #28]	; (800e734 <SD_CheckStatus+0x38>)
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	f023 0301 	bic.w	r3, r3, #1
 800e720:	b2da      	uxtb	r2, r3
 800e722:	4b04      	ldr	r3, [pc, #16]	; (800e734 <SD_CheckStatus+0x38>)
 800e724:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e726:	4b03      	ldr	r3, [pc, #12]	; (800e734 <SD_CheckStatus+0x38>)
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	b2db      	uxtb	r3, r3
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3708      	adds	r7, #8
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	2000026c 	.word	0x2000026c

0800e738 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	4603      	mov	r3, r0
 800e740:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800e742:	4b0b      	ldr	r3, [pc, #44]	; (800e770 <SD_initialize+0x38>)
 800e744:	2201      	movs	r2, #1
 800e746:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e748:	f7fd fcd0 	bl	800c0ec <BSP_SD_Init>
 800e74c:	4603      	mov	r3, r0
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d107      	bne.n	800e762 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800e752:	79fb      	ldrb	r3, [r7, #7]
 800e754:	4618      	mov	r0, r3
 800e756:	f7ff ffd1 	bl	800e6fc <SD_CheckStatus>
 800e75a:	4603      	mov	r3, r0
 800e75c:	461a      	mov	r2, r3
 800e75e:	4b04      	ldr	r3, [pc, #16]	; (800e770 <SD_initialize+0x38>)
 800e760:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800e762:	4b03      	ldr	r3, [pc, #12]	; (800e770 <SD_initialize+0x38>)
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	b2db      	uxtb	r3, r3
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3708      	adds	r7, #8
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	2000026c 	.word	0x2000026c

0800e774 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	4603      	mov	r3, r0
 800e77c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e77e:	79fb      	ldrb	r3, [r7, #7]
 800e780:	4618      	mov	r0, r3
 800e782:	f7ff ffbb 	bl	800e6fc <SD_CheckStatus>
 800e786:	4603      	mov	r3, r0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3708      	adds	r7, #8
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b086      	sub	sp, #24
 800e794:	af00      	add	r7, sp, #0
 800e796:	60b9      	str	r1, [r7, #8]
 800e798:	607a      	str	r2, [r7, #4]
 800e79a:	603b      	str	r3, [r7, #0]
 800e79c:	4603      	mov	r3, r0
 800e79e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800e7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7a8:	683a      	ldr	r2, [r7, #0]
 800e7aa:	6879      	ldr	r1, [r7, #4]
 800e7ac:	68b8      	ldr	r0, [r7, #8]
 800e7ae:	f7fd fcc3 	bl	800c138 <BSP_SD_ReadBlocks>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d107      	bne.n	800e7c8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e7b8:	bf00      	nop
 800e7ba:	f7fd fcf9 	bl	800c1b0 <BSP_SD_GetCardState>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d1fa      	bne.n	800e7ba <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e7c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3718      	adds	r7, #24
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}

0800e7d2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e7d2:	b580      	push	{r7, lr}
 800e7d4:	b086      	sub	sp, #24
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	607a      	str	r2, [r7, #4]
 800e7dc:	603b      	str	r3, [r7, #0]
 800e7de:	4603      	mov	r3, r0
 800e7e0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800e7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ea:	683a      	ldr	r2, [r7, #0]
 800e7ec:	6879      	ldr	r1, [r7, #4]
 800e7ee:	68b8      	ldr	r0, [r7, #8]
 800e7f0:	f7fd fcc0 	bl	800c174 <BSP_SD_WriteBlocks>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d107      	bne.n	800e80a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800e7fa:	bf00      	nop
 800e7fc:	f7fd fcd8 	bl	800c1b0 <BSP_SD_GetCardState>
 800e800:	4603      	mov	r3, r0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d1fa      	bne.n	800e7fc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800e806:	2300      	movs	r3, #0
 800e808:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e80a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3718      	adds	r7, #24
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b08c      	sub	sp, #48	; 0x30
 800e818:	af00      	add	r7, sp, #0
 800e81a:	4603      	mov	r3, r0
 800e81c:	603a      	str	r2, [r7, #0]
 800e81e:	71fb      	strb	r3, [r7, #7]
 800e820:	460b      	mov	r3, r1
 800e822:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e824:	2301      	movs	r3, #1
 800e826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e82a:	4b25      	ldr	r3, [pc, #148]	; (800e8c0 <SD_ioctl+0xac>)
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	f003 0301 	and.w	r3, r3, #1
 800e834:	2b00      	cmp	r3, #0
 800e836:	d001      	beq.n	800e83c <SD_ioctl+0x28>
 800e838:	2303      	movs	r3, #3
 800e83a:	e03c      	b.n	800e8b6 <SD_ioctl+0xa2>

  switch (cmd)
 800e83c:	79bb      	ldrb	r3, [r7, #6]
 800e83e:	2b03      	cmp	r3, #3
 800e840:	d834      	bhi.n	800e8ac <SD_ioctl+0x98>
 800e842:	a201      	add	r2, pc, #4	; (adr r2, 800e848 <SD_ioctl+0x34>)
 800e844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e848:	0800e859 	.word	0x0800e859
 800e84c:	0800e861 	.word	0x0800e861
 800e850:	0800e879 	.word	0x0800e879
 800e854:	0800e893 	.word	0x0800e893
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e858:	2300      	movs	r3, #0
 800e85a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e85e:	e028      	b.n	800e8b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e860:	f107 030c 	add.w	r3, r7, #12
 800e864:	4618      	mov	r0, r3
 800e866:	f7fd fcb3 	bl	800c1d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e86a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e870:	2300      	movs	r3, #0
 800e872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e876:	e01c      	b.n	800e8b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e878:	f107 030c 	add.w	r3, r7, #12
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7fd fca7 	bl	800c1d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e884:	b29a      	uxth	r2, r3
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e88a:	2300      	movs	r3, #0
 800e88c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e890:	e00f      	b.n	800e8b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e892:	f107 030c 	add.w	r3, r7, #12
 800e896:	4618      	mov	r0, r3
 800e898:	f7fd fc9a 	bl	800c1d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89e:	0a5a      	lsrs	r2, r3, #9
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e8aa:	e002      	b.n	800e8b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e8ac:	2304      	movs	r3, #4
 800e8ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e8b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3730      	adds	r7, #48	; 0x30
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	2000026c 	.word	0x2000026c

0800e8c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800e8ca:	4b0f      	ldr	r3, [pc, #60]	; (800e908 <HAL_MspInit+0x44>)
 800e8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ce:	4a0e      	ldr	r2, [pc, #56]	; (800e908 <HAL_MspInit+0x44>)
 800e8d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8d4:	6413      	str	r3, [r2, #64]	; 0x40
 800e8d6:	4b0c      	ldr	r3, [pc, #48]	; (800e908 <HAL_MspInit+0x44>)
 800e8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e8de:	607b      	str	r3, [r7, #4]
 800e8e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e8e2:	4b09      	ldr	r3, [pc, #36]	; (800e908 <HAL_MspInit+0x44>)
 800e8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8e6:	4a08      	ldr	r2, [pc, #32]	; (800e908 <HAL_MspInit+0x44>)
 800e8e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e8ec:	6453      	str	r3, [r2, #68]	; 0x44
 800e8ee:	4b06      	ldr	r3, [pc, #24]	; (800e908 <HAL_MspInit+0x44>)
 800e8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e8f6:	603b      	str	r3, [r7, #0]
 800e8f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e8fa:	bf00      	nop
 800e8fc:	370c      	adds	r7, #12
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr
 800e906:	bf00      	nop
 800e908:	40023800 	.word	0x40023800

0800e90c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4a0d      	ldr	r2, [pc, #52]	; (800e950 <HAL_ADC_MspInit+0x44>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d113      	bne.n	800e946 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e91e:	4b0d      	ldr	r3, [pc, #52]	; (800e954 <HAL_ADC_MspInit+0x48>)
 800e920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e922:	4a0c      	ldr	r2, [pc, #48]	; (800e954 <HAL_ADC_MspInit+0x48>)
 800e924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e928:	6453      	str	r3, [r2, #68]	; 0x44
 800e92a:	4b0a      	ldr	r3, [pc, #40]	; (800e954 <HAL_ADC_MspInit+0x48>)
 800e92c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e932:	60fb      	str	r3, [r7, #12]
 800e934:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800e936:	2200      	movs	r2, #0
 800e938:	2100      	movs	r1, #0
 800e93a:	2012      	movs	r0, #18
 800e93c:	f7f4 fe1b 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800e940:	2012      	movs	r0, #18
 800e942:	f7f4 fe34 	bl	80035ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e946:	bf00      	nop
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	40012000 	.word	0x40012000
 800e954:	40023800 	.word	0x40023800

0800e958 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4a0a      	ldr	r2, [pc, #40]	; (800e990 <HAL_DMA2D_MspInit+0x38>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d10b      	bne.n	800e982 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800e96a:	4b0a      	ldr	r3, [pc, #40]	; (800e994 <HAL_DMA2D_MspInit+0x3c>)
 800e96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e96e:	4a09      	ldr	r2, [pc, #36]	; (800e994 <HAL_DMA2D_MspInit+0x3c>)
 800e970:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e974:	6313      	str	r3, [r2, #48]	; 0x30
 800e976:	4b07      	ldr	r3, [pc, #28]	; (800e994 <HAL_DMA2D_MspInit+0x3c>)
 800e978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e97a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e97e:	60fb      	str	r3, [r7, #12]
 800e980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800e982:	bf00      	nop
 800e984:	3714      	adds	r7, #20
 800e986:	46bd      	mov	sp, r7
 800e988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98c:	4770      	bx	lr
 800e98e:	bf00      	nop
 800e990:	4002b000 	.word	0x4002b000
 800e994:	40023800 	.word	0x40023800

0800e998 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b08a      	sub	sp, #40	; 0x28
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e9a0:	f107 0314 	add.w	r3, r7, #20
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	601a      	str	r2, [r3, #0]
 800e9a8:	605a      	str	r2, [r3, #4]
 800e9aa:	609a      	str	r2, [r3, #8]
 800e9ac:	60da      	str	r2, [r3, #12]
 800e9ae:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4a17      	ldr	r2, [pc, #92]	; (800ea14 <HAL_DSI_MspInit+0x7c>)
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d127      	bne.n	800ea0a <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800e9ba:	4b17      	ldr	r3, [pc, #92]	; (800ea18 <HAL_DSI_MspInit+0x80>)
 800e9bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9be:	4a16      	ldr	r2, [pc, #88]	; (800ea18 <HAL_DSI_MspInit+0x80>)
 800e9c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e9c4:	6453      	str	r3, [r2, #68]	; 0x44
 800e9c6:	4b14      	ldr	r3, [pc, #80]	; (800ea18 <HAL_DSI_MspInit+0x80>)
 800e9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e9ce:	613b      	str	r3, [r7, #16]
 800e9d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800e9d2:	4b11      	ldr	r3, [pc, #68]	; (800ea18 <HAL_DSI_MspInit+0x80>)
 800e9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9d6:	4a10      	ldr	r2, [pc, #64]	; (800ea18 <HAL_DSI_MspInit+0x80>)
 800e9d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e9dc:	6313      	str	r3, [r2, #48]	; 0x30
 800e9de:	4b0e      	ldr	r3, [pc, #56]	; (800ea18 <HAL_DSI_MspInit+0x80>)
 800e9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e9e6:	60fb      	str	r3, [r7, #12]
 800e9e8:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e9ea:	2304      	movs	r3, #4
 800e9ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9ee:	2302      	movs	r3, #2
 800e9f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800e9fa:	230d      	movs	r3, #13
 800e9fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800e9fe:	f107 0314 	add.w	r3, r7, #20
 800ea02:	4619      	mov	r1, r3
 800ea04:	4805      	ldr	r0, [pc, #20]	; (800ea1c <HAL_DSI_MspInit+0x84>)
 800ea06:	f7f6 fac1 	bl	8004f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800ea0a:	bf00      	nop
 800ea0c:	3728      	adds	r7, #40	; 0x28
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	40016c00 	.word	0x40016c00
 800ea18:	40023800 	.word	0x40023800
 800ea1c:	40022400 	.word	0x40022400

0800ea20 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a08      	ldr	r2, [pc, #32]	; (800ea50 <HAL_DSI_MspDeInit+0x30>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d109      	bne.n	800ea46 <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800ea32:	4b08      	ldr	r3, [pc, #32]	; (800ea54 <HAL_DSI_MspDeInit+0x34>)
 800ea34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea36:	4a07      	ldr	r2, [pc, #28]	; (800ea54 <HAL_DSI_MspDeInit+0x34>)
 800ea38:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800ea3c:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 800ea3e:	2104      	movs	r1, #4
 800ea40:	4805      	ldr	r0, [pc, #20]	; (800ea58 <HAL_DSI_MspDeInit+0x38>)
 800ea42:	f7f6 fc4d 	bl	80052e0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800ea46:	bf00      	nop
 800ea48:	3708      	adds	r7, #8
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	40016c00 	.word	0x40016c00
 800ea54:	40023800 	.word	0x40023800
 800ea58:	40022400 	.word	0x40022400

0800ea5c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b085      	sub	sp, #20
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	4a0a      	ldr	r2, [pc, #40]	; (800ea94 <HAL_LTDC_MspInit+0x38>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d10b      	bne.n	800ea86 <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800ea6e:	4b0a      	ldr	r3, [pc, #40]	; (800ea98 <HAL_LTDC_MspInit+0x3c>)
 800ea70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea72:	4a09      	ldr	r2, [pc, #36]	; (800ea98 <HAL_LTDC_MspInit+0x3c>)
 800ea74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ea78:	6453      	str	r3, [r2, #68]	; 0x44
 800ea7a:	4b07      	ldr	r3, [pc, #28]	; (800ea98 <HAL_LTDC_MspInit+0x3c>)
 800ea7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ea82:	60fb      	str	r3, [r7, #12]
 800ea84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800ea86:	bf00      	nop
 800ea88:	3714      	adds	r7, #20
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	40016800 	.word	0x40016800
 800ea98:	40023800 	.word	0x40023800

0800ea9c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b08c      	sub	sp, #48	; 0x30
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eaa4:	f107 031c 	add.w	r3, r7, #28
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	601a      	str	r2, [r3, #0]
 800eaac:	605a      	str	r2, [r3, #4]
 800eaae:	609a      	str	r2, [r3, #8]
 800eab0:	60da      	str	r2, [r3, #12]
 800eab2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4a33      	ldr	r2, [pc, #204]	; (800eb88 <HAL_SD_MspInit+0xec>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d160      	bne.n	800eb80 <HAL_SD_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800eabe:	4b33      	ldr	r3, [pc, #204]	; (800eb8c <HAL_SD_MspInit+0xf0>)
 800eac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eac2:	4a32      	ldr	r2, [pc, #200]	; (800eb8c <HAL_SD_MspInit+0xf0>)
 800eac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eac8:	6453      	str	r3, [r2, #68]	; 0x44
 800eaca:	4b30      	ldr	r3, [pc, #192]	; (800eb8c <HAL_SD_MspInit+0xf0>)
 800eacc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ead2:	61bb      	str	r3, [r7, #24]
 800ead4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ead6:	4b2d      	ldr	r3, [pc, #180]	; (800eb8c <HAL_SD_MspInit+0xf0>)
 800ead8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eada:	4a2c      	ldr	r2, [pc, #176]	; (800eb8c <HAL_SD_MspInit+0xf0>)
 800eadc:	f043 0302 	orr.w	r3, r3, #2
 800eae0:	6313      	str	r3, [r2, #48]	; 0x30
 800eae2:	4b2a      	ldr	r3, [pc, #168]	; (800eb8c <HAL_SD_MspInit+0xf0>)
 800eae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eae6:	f003 0302 	and.w	r3, r3, #2
 800eaea:	617b      	str	r3, [r7, #20]
 800eaec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800eaee:	4b27      	ldr	r3, [pc, #156]	; (800eb8c <HAL_SD_MspInit+0xf0>)
 800eaf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaf2:	4a26      	ldr	r2, [pc, #152]	; (800eb8c <HAL_SD_MspInit+0xf0>)
 800eaf4:	f043 0308 	orr.w	r3, r3, #8
 800eaf8:	6313      	str	r3, [r2, #48]	; 0x30
 800eafa:	4b24      	ldr	r3, [pc, #144]	; (800eb8c <HAL_SD_MspInit+0xf0>)
 800eafc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eafe:	f003 0308 	and.w	r3, r3, #8
 800eb02:	613b      	str	r3, [r7, #16]
 800eb04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800eb06:	4b21      	ldr	r3, [pc, #132]	; (800eb8c <HAL_SD_MspInit+0xf0>)
 800eb08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb0a:	4a20      	ldr	r2, [pc, #128]	; (800eb8c <HAL_SD_MspInit+0xf0>)
 800eb0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb10:	6313      	str	r3, [r2, #48]	; 0x30
 800eb12:	4b1e      	ldr	r3, [pc, #120]	; (800eb8c <HAL_SD_MspInit+0xf0>)
 800eb14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb1a:	60fb      	str	r3, [r7, #12]
 800eb1c:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800eb1e:	2318      	movs	r3, #24
 800eb20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb22:	2302      	movs	r3, #2
 800eb24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb26:	2300      	movs	r3, #0
 800eb28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb2a:	2303      	movs	r3, #3
 800eb2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800eb2e:	230a      	movs	r3, #10
 800eb30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eb32:	f107 031c 	add.w	r3, r7, #28
 800eb36:	4619      	mov	r1, r3
 800eb38:	4815      	ldr	r0, [pc, #84]	; (800eb90 <HAL_SD_MspInit+0xf4>)
 800eb3a:	f7f6 fa27 	bl	8004f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800eb3e:	23c0      	movs	r3, #192	; 0xc0
 800eb40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb42:	2302      	movs	r3, #2
 800eb44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb46:	2300      	movs	r3, #0
 800eb48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb4a:	2303      	movs	r3, #3
 800eb4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800eb4e:	230b      	movs	r3, #11
 800eb50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800eb52:	f107 031c 	add.w	r3, r7, #28
 800eb56:	4619      	mov	r1, r3
 800eb58:	480e      	ldr	r0, [pc, #56]	; (800eb94 <HAL_SD_MspInit+0xf8>)
 800eb5a:	f7f6 fa17 	bl	8004f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800eb5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800eb62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb64:	2302      	movs	r3, #2
 800eb66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb6c:	2303      	movs	r3, #3
 800eb6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800eb70:	230b      	movs	r3, #11
 800eb72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800eb74:	f107 031c 	add.w	r3, r7, #28
 800eb78:	4619      	mov	r1, r3
 800eb7a:	4807      	ldr	r0, [pc, #28]	; (800eb98 <HAL_SD_MspInit+0xfc>)
 800eb7c:	f7f6 fa06 	bl	8004f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 800eb80:	bf00      	nop
 800eb82:	3730      	adds	r7, #48	; 0x30
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	40011c00 	.word	0x40011c00
 800eb8c:	40023800 	.word	0x40023800
 800eb90:	40020400 	.word	0x40020400
 800eb94:	40020c00 	.word	0x40020c00
 800eb98:	40021800 	.word	0x40021800

0800eb9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4a1a      	ldr	r2, [pc, #104]	; (800ec14 <HAL_TIM_Base_MspInit+0x78>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d114      	bne.n	800ebd8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800ebae:	4b1a      	ldr	r3, [pc, #104]	; (800ec18 <HAL_TIM_Base_MspInit+0x7c>)
 800ebb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebb2:	4a19      	ldr	r2, [pc, #100]	; (800ec18 <HAL_TIM_Base_MspInit+0x7c>)
 800ebb4:	f043 0310 	orr.w	r3, r3, #16
 800ebb8:	6413      	str	r3, [r2, #64]	; 0x40
 800ebba:	4b17      	ldr	r3, [pc, #92]	; (800ec18 <HAL_TIM_Base_MspInit+0x7c>)
 800ebbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebbe:	f003 0310 	and.w	r3, r3, #16
 800ebc2:	60fb      	str	r3, [r7, #12]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	2100      	movs	r1, #0
 800ebca:	2036      	movs	r0, #54	; 0x36
 800ebcc:	f7f4 fcd3 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ebd0:	2036      	movs	r0, #54	; 0x36
 800ebd2:	f7f4 fcec 	bl	80035ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800ebd6:	e018      	b.n	800ec0a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4a0f      	ldr	r2, [pc, #60]	; (800ec1c <HAL_TIM_Base_MspInit+0x80>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d113      	bne.n	800ec0a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800ebe2:	4b0d      	ldr	r3, [pc, #52]	; (800ec18 <HAL_TIM_Base_MspInit+0x7c>)
 800ebe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebe6:	4a0c      	ldr	r2, [pc, #48]	; (800ec18 <HAL_TIM_Base_MspInit+0x7c>)
 800ebe8:	f043 0320 	orr.w	r3, r3, #32
 800ebec:	6413      	str	r3, [r2, #64]	; 0x40
 800ebee:	4b0a      	ldr	r3, [pc, #40]	; (800ec18 <HAL_TIM_Base_MspInit+0x7c>)
 800ebf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebf2:	f003 0320 	and.w	r3, r3, #32
 800ebf6:	60bb      	str	r3, [r7, #8]
 800ebf8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	2100      	movs	r1, #0
 800ebfe:	2037      	movs	r0, #55	; 0x37
 800ec00:	f7f4 fcb9 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800ec04:	2037      	movs	r0, #55	; 0x37
 800ec06:	f7f4 fcd2 	bl	80035ae <HAL_NVIC_EnableIRQ>
}
 800ec0a:	bf00      	nop
 800ec0c:	3710      	adds	r7, #16
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	40001000 	.word	0x40001000
 800ec18:	40023800 	.word	0x40023800
 800ec1c:	40001400 	.word	0x40001400

0800ec20 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b086      	sub	sp, #24
 800ec24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800ec26:	1d3b      	adds	r3, r7, #4
 800ec28:	2200      	movs	r2, #0
 800ec2a:	601a      	str	r2, [r3, #0]
 800ec2c:	605a      	str	r2, [r3, #4]
 800ec2e:	609a      	str	r2, [r3, #8]
 800ec30:	60da      	str	r2, [r3, #12]
 800ec32:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800ec34:	4b43      	ldr	r3, [pc, #268]	; (800ed44 <HAL_FMC_MspInit+0x124>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d17e      	bne.n	800ed3a <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 800ec3c:	4b41      	ldr	r3, [pc, #260]	; (800ed44 <HAL_FMC_MspInit+0x124>)
 800ec3e:	2201      	movs	r2, #1
 800ec40:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800ec42:	4b41      	ldr	r3, [pc, #260]	; (800ed48 <HAL_FMC_MspInit+0x128>)
 800ec44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec46:	4a40      	ldr	r2, [pc, #256]	; (800ed48 <HAL_FMC_MspInit+0x128>)
 800ec48:	f043 0301 	orr.w	r3, r3, #1
 800ec4c:	6393      	str	r3, [r2, #56]	; 0x38
 800ec4e:	4b3e      	ldr	r3, [pc, #248]	; (800ed48 <HAL_FMC_MspInit+0x128>)
 800ec50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec52:	f003 0301 	and.w	r3, r3, #1
 800ec56:	603b      	str	r3, [r7, #0]
 800ec58:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 800ec5a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800ec5e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10 
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec60:	2302      	movs	r3, #2
 800ec62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec64:	2300      	movs	r3, #0
 800ec66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec68:	2303      	movs	r3, #3
 800ec6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ec6c:	230c      	movs	r3, #12
 800ec6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ec70:	1d3b      	adds	r3, r7, #4
 800ec72:	4619      	mov	r1, r3
 800ec74:	4835      	ldr	r0, [pc, #212]	; (800ed4c <HAL_FMC_MspInit+0x12c>)
 800ec76:	f7f6 f989 	bl	8004f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800ec7a:	2360      	movs	r3, #96	; 0x60
 800ec7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec7e:	2302      	movs	r3, #2
 800ec80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec82:	2300      	movs	r3, #0
 800ec84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec86:	2303      	movs	r3, #3
 800ec88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ec8a:	230c      	movs	r3, #12
 800ec8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ec8e:	1d3b      	adds	r3, r7, #4
 800ec90:	4619      	mov	r1, r3
 800ec92:	482f      	ldr	r0, [pc, #188]	; (800ed50 <HAL_FMC_MspInit+0x130>)
 800ec94:	f7f6 f97a 	bl	8004f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 800ec98:	f248 1337 	movw	r3, #33079	; 0x8137
 800ec9c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec9e:	2302      	movs	r3, #2
 800eca0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eca2:	2300      	movs	r3, #0
 800eca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eca6:	2303      	movs	r3, #3
 800eca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ecaa:	230c      	movs	r3, #12
 800ecac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ecae:	1d3b      	adds	r3, r7, #4
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	4828      	ldr	r0, [pc, #160]	; (800ed54 <HAL_FMC_MspInit+0x134>)
 800ecb4:	f7f6 f96a 	bl	8004f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 800ecb8:	f24c 7303 	movw	r3, #50947	; 0xc703
 800ecbc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecbe:	2302      	movs	r3, #2
 800ecc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ecc6:	2303      	movs	r3, #3
 800ecc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ecca:	230c      	movs	r3, #12
 800eccc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ecce:	1d3b      	adds	r3, r7, #4
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	4821      	ldr	r0, [pc, #132]	; (800ed58 <HAL_FMC_MspInit+0x138>)
 800ecd4:	f7f6 f95a 	bl	8004f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5 
 800ecd8:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800ecdc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1 
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecde:	2302      	movs	r3, #2
 800ece0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ece2:	2300      	movs	r3, #0
 800ece4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ece6:	2303      	movs	r3, #3
 800ece8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ecea:	230c      	movs	r3, #12
 800ecec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ecee:	1d3b      	adds	r3, r7, #4
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	481a      	ldr	r0, [pc, #104]	; (800ed5c <HAL_FMC_MspInit+0x13c>)
 800ecf4:	f7f6 f94a 	bl	8004f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800ecf8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800ecfc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecfe:	2302      	movs	r3, #2
 800ed00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed02:	2300      	movs	r3, #0
 800ed04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed06:	2303      	movs	r3, #3
 800ed08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ed0a:	230c      	movs	r3, #12
 800ed0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ed0e:	1d3b      	adds	r3, r7, #4
 800ed10:	4619      	mov	r1, r3
 800ed12:	4813      	ldr	r0, [pc, #76]	; (800ed60 <HAL_FMC_MspInit+0x140>)
 800ed14:	f7f6 f93a 	bl	8004f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 800ed18:	f64f 7320 	movw	r3, #65312	; 0xff20
 800ed1c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed1e:	2302      	movs	r3, #2
 800ed20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed22:	2300      	movs	r3, #0
 800ed24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed26:	2303      	movs	r3, #3
 800ed28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ed2a:	230c      	movs	r3, #12
 800ed2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ed2e:	1d3b      	adds	r3, r7, #4
 800ed30:	4619      	mov	r1, r3
 800ed32:	480c      	ldr	r0, [pc, #48]	; (800ed64 <HAL_FMC_MspInit+0x144>)
 800ed34:	f7f6 f92a 	bl	8004f8c <HAL_GPIO_Init>
 800ed38:	e000      	b.n	800ed3c <HAL_FMC_MspInit+0x11c>
    return;
 800ed3a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800ed3c:	3718      	adds	r7, #24
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	20000554 	.word	0x20000554
 800ed48:	40023800 	.word	0x40023800
 800ed4c:	40021000 	.word	0x40021000
 800ed50:	40020400 	.word	0x40020400
 800ed54:	40021800 	.word	0x40021800
 800ed58:	40020c00 	.word	0x40020c00
 800ed5c:	40022000 	.word	0x40022000
 800ed60:	40021400 	.word	0x40021400
 800ed64:	40021c00 	.word	0x40021c00

0800ed68 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800ed70:	f7ff ff56 	bl	800ec20 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800ed74:	bf00      	nop
 800ed76:	3708      	adds	r7, #8
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ed80:	bf00      	nop
 800ed82:	46bd      	mov	sp, r7
 800ed84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed88:	4770      	bx	lr

0800ed8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ed8a:	b480      	push	{r7}
 800ed8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ed8e:	e7fe      	b.n	800ed8e <HardFault_Handler+0x4>

0800ed90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ed90:	b480      	push	{r7}
 800ed92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ed94:	e7fe      	b.n	800ed94 <MemManage_Handler+0x4>

0800ed96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ed96:	b480      	push	{r7}
 800ed98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ed9a:	e7fe      	b.n	800ed9a <BusFault_Handler+0x4>

0800ed9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800eda0:	e7fe      	b.n	800eda0 <UsageFault_Handler+0x4>

0800eda2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800eda2:	b480      	push	{r7}
 800eda4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800eda6:	bf00      	nop
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800edb0:	b480      	push	{r7}
 800edb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800edb4:	bf00      	nop
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr

0800edbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800edbe:	b480      	push	{r7}
 800edc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800edc2:	bf00      	nop
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr

0800edcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800edd0:	f7f3 fe02 	bl	80029d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800edd4:	bf00      	nop
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800eddc:	2001      	movs	r0, #1
 800edde:	f7f6 fbd5 	bl	800558c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800ede2:	bf00      	nop
 800ede4:	bd80      	pop	{r7, pc}
	...

0800ede8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800edec:	4802      	ldr	r0, [pc, #8]	; (800edf8 <ADC_IRQHandler+0x10>)
 800edee:	f7f3 ff43 	bl	8002c78 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800edf2:	bf00      	nop
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	20000c88 	.word	0x20000c88

0800edfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800ee00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ee04:	f7f6 fbc2 	bl	800558c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800ee08:	bf00      	nop
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800ee10:	4802      	ldr	r0, [pc, #8]	; (800ee1c <TIM6_DAC_IRQHandler+0x10>)
 800ee12:	f7f9 fecd 	bl	8008bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800ee16:	bf00      	nop
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	20000cf0 	.word	0x20000cf0

0800ee20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800ee24:	4802      	ldr	r0, [pc, #8]	; (800ee30 <TIM7_IRQHandler+0x10>)
 800ee26:	f7f9 fec3 	bl	8008bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800ee2a:	bf00      	nop
 800ee2c:	bd80      	pop	{r7, pc}
 800ee2e:	bf00      	nop
 800ee30:	20000e1c 	.word	0x20000e1c

0800ee34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b084      	sub	sp, #16
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ee3c:	4b11      	ldr	r3, [pc, #68]	; (800ee84 <_sbrk+0x50>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d102      	bne.n	800ee4a <_sbrk+0x16>
		heap_end = &end;
 800ee44:	4b0f      	ldr	r3, [pc, #60]	; (800ee84 <_sbrk+0x50>)
 800ee46:	4a10      	ldr	r2, [pc, #64]	; (800ee88 <_sbrk+0x54>)
 800ee48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ee4a:	4b0e      	ldr	r3, [pc, #56]	; (800ee84 <_sbrk+0x50>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ee50:	4b0c      	ldr	r3, [pc, #48]	; (800ee84 <_sbrk+0x50>)
 800ee52:	681a      	ldr	r2, [r3, #0]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	4413      	add	r3, r2
 800ee58:	466a      	mov	r2, sp
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d907      	bls.n	800ee6e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800ee5e:	f000 f875 	bl	800ef4c <__errno>
 800ee62:	4602      	mov	r2, r0
 800ee64:	230c      	movs	r3, #12
 800ee66:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800ee68:	f04f 33ff 	mov.w	r3, #4294967295
 800ee6c:	e006      	b.n	800ee7c <_sbrk+0x48>
	}

	heap_end += incr;
 800ee6e:	4b05      	ldr	r3, [pc, #20]	; (800ee84 <_sbrk+0x50>)
 800ee70:	681a      	ldr	r2, [r3, #0]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	4413      	add	r3, r2
 800ee76:	4a03      	ldr	r2, [pc, #12]	; (800ee84 <_sbrk+0x50>)
 800ee78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3710      	adds	r7, #16
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	20000558 	.word	0x20000558
 800ee88:	20000e60 	.word	0x20000e60

0800ee8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ee90:	4b15      	ldr	r3, [pc, #84]	; (800eee8 <SystemInit+0x5c>)
 800ee92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee96:	4a14      	ldr	r2, [pc, #80]	; (800eee8 <SystemInit+0x5c>)
 800ee98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ee9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800eea0:	4b12      	ldr	r3, [pc, #72]	; (800eeec <SystemInit+0x60>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4a11      	ldr	r2, [pc, #68]	; (800eeec <SystemInit+0x60>)
 800eea6:	f043 0301 	orr.w	r3, r3, #1
 800eeaa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800eeac:	4b0f      	ldr	r3, [pc, #60]	; (800eeec <SystemInit+0x60>)
 800eeae:	2200      	movs	r2, #0
 800eeb0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800eeb2:	4b0e      	ldr	r3, [pc, #56]	; (800eeec <SystemInit+0x60>)
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	490d      	ldr	r1, [pc, #52]	; (800eeec <SystemInit+0x60>)
 800eeb8:	4b0d      	ldr	r3, [pc, #52]	; (800eef0 <SystemInit+0x64>)
 800eeba:	4013      	ands	r3, r2
 800eebc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800eebe:	4b0b      	ldr	r3, [pc, #44]	; (800eeec <SystemInit+0x60>)
 800eec0:	4a0c      	ldr	r2, [pc, #48]	; (800eef4 <SystemInit+0x68>)
 800eec2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800eec4:	4b09      	ldr	r3, [pc, #36]	; (800eeec <SystemInit+0x60>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a08      	ldr	r2, [pc, #32]	; (800eeec <SystemInit+0x60>)
 800eeca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eece:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800eed0:	4b06      	ldr	r3, [pc, #24]	; (800eeec <SystemInit+0x60>)
 800eed2:	2200      	movs	r2, #0
 800eed4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800eed6:	4b04      	ldr	r3, [pc, #16]	; (800eee8 <SystemInit+0x5c>)
 800eed8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800eedc:	609a      	str	r2, [r3, #8]
#endif
}
 800eede:	bf00      	nop
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr
 800eee8:	e000ed00 	.word	0xe000ed00
 800eeec:	40023800 	.word	0x40023800
 800eef0:	fef6ffff 	.word	0xfef6ffff
 800eef4:	24003010 	.word	0x24003010

0800eef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800eef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ef30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800eefc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800eefe:	e003      	b.n	800ef08 <LoopCopyDataInit>

0800ef00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ef00:	4b0c      	ldr	r3, [pc, #48]	; (800ef34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ef02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ef04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ef06:	3104      	adds	r1, #4

0800ef08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ef08:	480b      	ldr	r0, [pc, #44]	; (800ef38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ef0a:	4b0c      	ldr	r3, [pc, #48]	; (800ef3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ef0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ef0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ef10:	d3f6      	bcc.n	800ef00 <CopyDataInit>
  ldr  r2, =_sbss
 800ef12:	4a0b      	ldr	r2, [pc, #44]	; (800ef40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ef14:	e002      	b.n	800ef1c <LoopFillZerobss>

0800ef16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ef16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ef18:	f842 3b04 	str.w	r3, [r2], #4

0800ef1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ef1c:	4b09      	ldr	r3, [pc, #36]	; (800ef44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ef1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ef20:	d3f9      	bcc.n	800ef16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ef22:	f7ff ffb3 	bl	800ee8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ef26:	f000 f817 	bl	800ef58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ef2a:	f7fd fa29 	bl	800c380 <main>
  bx  lr    
 800ef2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ef30:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800ef34:	0801254c 	.word	0x0801254c
  ldr  r0, =_sdata
 800ef38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ef3c:	200002d8 	.word	0x200002d8
  ldr  r2, =_sbss
 800ef40:	200002d8 	.word	0x200002d8
  ldr  r3, = _ebss
 800ef44:	20000e60 	.word	0x20000e60

0800ef48 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ef48:	e7fe      	b.n	800ef48 <CAN1_RX0_IRQHandler>
	...

0800ef4c <__errno>:
 800ef4c:	4b01      	ldr	r3, [pc, #4]	; (800ef54 <__errno+0x8>)
 800ef4e:	6818      	ldr	r0, [r3, #0]
 800ef50:	4770      	bx	lr
 800ef52:	bf00      	nop
 800ef54:	20000274 	.word	0x20000274

0800ef58 <__libc_init_array>:
 800ef58:	b570      	push	{r4, r5, r6, lr}
 800ef5a:	4e0d      	ldr	r6, [pc, #52]	; (800ef90 <__libc_init_array+0x38>)
 800ef5c:	4c0d      	ldr	r4, [pc, #52]	; (800ef94 <__libc_init_array+0x3c>)
 800ef5e:	1ba4      	subs	r4, r4, r6
 800ef60:	10a4      	asrs	r4, r4, #2
 800ef62:	2500      	movs	r5, #0
 800ef64:	42a5      	cmp	r5, r4
 800ef66:	d109      	bne.n	800ef7c <__libc_init_array+0x24>
 800ef68:	4e0b      	ldr	r6, [pc, #44]	; (800ef98 <__libc_init_array+0x40>)
 800ef6a:	4c0c      	ldr	r4, [pc, #48]	; (800ef9c <__libc_init_array+0x44>)
 800ef6c:	f000 fcba 	bl	800f8e4 <_init>
 800ef70:	1ba4      	subs	r4, r4, r6
 800ef72:	10a4      	asrs	r4, r4, #2
 800ef74:	2500      	movs	r5, #0
 800ef76:	42a5      	cmp	r5, r4
 800ef78:	d105      	bne.n	800ef86 <__libc_init_array+0x2e>
 800ef7a:	bd70      	pop	{r4, r5, r6, pc}
 800ef7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ef80:	4798      	blx	r3
 800ef82:	3501      	adds	r5, #1
 800ef84:	e7ee      	b.n	800ef64 <__libc_init_array+0xc>
 800ef86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ef8a:	4798      	blx	r3
 800ef8c:	3501      	adds	r5, #1
 800ef8e:	e7f2      	b.n	800ef76 <__libc_init_array+0x1e>
 800ef90:	08012544 	.word	0x08012544
 800ef94:	08012544 	.word	0x08012544
 800ef98:	08012544 	.word	0x08012544
 800ef9c:	08012548 	.word	0x08012548

0800efa0 <memset>:
 800efa0:	4402      	add	r2, r0
 800efa2:	4603      	mov	r3, r0
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d100      	bne.n	800efaa <memset+0xa>
 800efa8:	4770      	bx	lr
 800efaa:	f803 1b01 	strb.w	r1, [r3], #1
 800efae:	e7f9      	b.n	800efa4 <memset+0x4>

0800efb0 <srand>:
 800efb0:	b538      	push	{r3, r4, r5, lr}
 800efb2:	4b0d      	ldr	r3, [pc, #52]	; (800efe8 <srand+0x38>)
 800efb4:	681c      	ldr	r4, [r3, #0]
 800efb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800efb8:	4605      	mov	r5, r0
 800efba:	b97b      	cbnz	r3, 800efdc <srand+0x2c>
 800efbc:	2018      	movs	r0, #24
 800efbe:	f000 f89b 	bl	800f0f8 <malloc>
 800efc2:	4a0a      	ldr	r2, [pc, #40]	; (800efec <srand+0x3c>)
 800efc4:	4b0a      	ldr	r3, [pc, #40]	; (800eff0 <srand+0x40>)
 800efc6:	63a0      	str	r0, [r4, #56]	; 0x38
 800efc8:	e9c0 2300 	strd	r2, r3, [r0]
 800efcc:	4b09      	ldr	r3, [pc, #36]	; (800eff4 <srand+0x44>)
 800efce:	6083      	str	r3, [r0, #8]
 800efd0:	230b      	movs	r3, #11
 800efd2:	8183      	strh	r3, [r0, #12]
 800efd4:	2201      	movs	r2, #1
 800efd6:	2300      	movs	r3, #0
 800efd8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800efdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800efde:	2200      	movs	r2, #0
 800efe0:	611d      	str	r5, [r3, #16]
 800efe2:	615a      	str	r2, [r3, #20]
 800efe4:	bd38      	pop	{r3, r4, r5, pc}
 800efe6:	bf00      	nop
 800efe8:	20000274 	.word	0x20000274
 800efec:	abcd330e 	.word	0xabcd330e
 800eff0:	e66d1234 	.word	0xe66d1234
 800eff4:	0005deec 	.word	0x0005deec

0800eff8 <rand>:
 800eff8:	b538      	push	{r3, r4, r5, lr}
 800effa:	4b13      	ldr	r3, [pc, #76]	; (800f048 <rand+0x50>)
 800effc:	681c      	ldr	r4, [r3, #0]
 800effe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f000:	b97b      	cbnz	r3, 800f022 <rand+0x2a>
 800f002:	2018      	movs	r0, #24
 800f004:	f000 f878 	bl	800f0f8 <malloc>
 800f008:	4a10      	ldr	r2, [pc, #64]	; (800f04c <rand+0x54>)
 800f00a:	4b11      	ldr	r3, [pc, #68]	; (800f050 <rand+0x58>)
 800f00c:	63a0      	str	r0, [r4, #56]	; 0x38
 800f00e:	e9c0 2300 	strd	r2, r3, [r0]
 800f012:	4b10      	ldr	r3, [pc, #64]	; (800f054 <rand+0x5c>)
 800f014:	6083      	str	r3, [r0, #8]
 800f016:	230b      	movs	r3, #11
 800f018:	8183      	strh	r3, [r0, #12]
 800f01a:	2201      	movs	r2, #1
 800f01c:	2300      	movs	r3, #0
 800f01e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f022:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f024:	480c      	ldr	r0, [pc, #48]	; (800f058 <rand+0x60>)
 800f026:	690a      	ldr	r2, [r1, #16]
 800f028:	694b      	ldr	r3, [r1, #20]
 800f02a:	4c0c      	ldr	r4, [pc, #48]	; (800f05c <rand+0x64>)
 800f02c:	4350      	muls	r0, r2
 800f02e:	fb04 0003 	mla	r0, r4, r3, r0
 800f032:	fba2 2304 	umull	r2, r3, r2, r4
 800f036:	4403      	add	r3, r0
 800f038:	1c54      	adds	r4, r2, #1
 800f03a:	f143 0500 	adc.w	r5, r3, #0
 800f03e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800f042:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800f046:	bd38      	pop	{r3, r4, r5, pc}
 800f048:	20000274 	.word	0x20000274
 800f04c:	abcd330e 	.word	0xabcd330e
 800f050:	e66d1234 	.word	0xe66d1234
 800f054:	0005deec 	.word	0x0005deec
 800f058:	5851f42d 	.word	0x5851f42d
 800f05c:	4c957f2d 	.word	0x4c957f2d

0800f060 <siprintf>:
 800f060:	b40e      	push	{r1, r2, r3}
 800f062:	b500      	push	{lr}
 800f064:	b09c      	sub	sp, #112	; 0x70
 800f066:	ab1d      	add	r3, sp, #116	; 0x74
 800f068:	9002      	str	r0, [sp, #8]
 800f06a:	9006      	str	r0, [sp, #24]
 800f06c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f070:	4809      	ldr	r0, [pc, #36]	; (800f098 <siprintf+0x38>)
 800f072:	9107      	str	r1, [sp, #28]
 800f074:	9104      	str	r1, [sp, #16]
 800f076:	4909      	ldr	r1, [pc, #36]	; (800f09c <siprintf+0x3c>)
 800f078:	f853 2b04 	ldr.w	r2, [r3], #4
 800f07c:	9105      	str	r1, [sp, #20]
 800f07e:	6800      	ldr	r0, [r0, #0]
 800f080:	9301      	str	r3, [sp, #4]
 800f082:	a902      	add	r1, sp, #8
 800f084:	f000 f942 	bl	800f30c <_svfiprintf_r>
 800f088:	9b02      	ldr	r3, [sp, #8]
 800f08a:	2200      	movs	r2, #0
 800f08c:	701a      	strb	r2, [r3, #0]
 800f08e:	b01c      	add	sp, #112	; 0x70
 800f090:	f85d eb04 	ldr.w	lr, [sp], #4
 800f094:	b003      	add	sp, #12
 800f096:	4770      	bx	lr
 800f098:	20000274 	.word	0x20000274
 800f09c:	ffff0208 	.word	0xffff0208

0800f0a0 <time>:
 800f0a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0a2:	4b0b      	ldr	r3, [pc, #44]	; (800f0d0 <time+0x30>)
 800f0a4:	4604      	mov	r4, r0
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	4669      	mov	r1, sp
 800f0aa:	6818      	ldr	r0, [r3, #0]
 800f0ac:	f000 f812 	bl	800f0d4 <_gettimeofday_r>
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	da05      	bge.n	800f0c0 <time+0x20>
 800f0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0bc:	e9cd 2300 	strd	r2, r3, [sp]
 800f0c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f0c4:	b10c      	cbz	r4, 800f0ca <time+0x2a>
 800f0c6:	e9c4 0100 	strd	r0, r1, [r4]
 800f0ca:	b004      	add	sp, #16
 800f0cc:	bd10      	pop	{r4, pc}
 800f0ce:	bf00      	nop
 800f0d0:	20000274 	.word	0x20000274

0800f0d4 <_gettimeofday_r>:
 800f0d4:	b538      	push	{r3, r4, r5, lr}
 800f0d6:	4c07      	ldr	r4, [pc, #28]	; (800f0f4 <_gettimeofday_r+0x20>)
 800f0d8:	2300      	movs	r3, #0
 800f0da:	4605      	mov	r5, r0
 800f0dc:	4608      	mov	r0, r1
 800f0de:	4611      	mov	r1, r2
 800f0e0:	6023      	str	r3, [r4, #0]
 800f0e2:	f000 fbf7 	bl	800f8d4 <_gettimeofday>
 800f0e6:	1c43      	adds	r3, r0, #1
 800f0e8:	d102      	bne.n	800f0f0 <_gettimeofday_r+0x1c>
 800f0ea:	6823      	ldr	r3, [r4, #0]
 800f0ec:	b103      	cbz	r3, 800f0f0 <_gettimeofday_r+0x1c>
 800f0ee:	602b      	str	r3, [r5, #0]
 800f0f0:	bd38      	pop	{r3, r4, r5, pc}
 800f0f2:	bf00      	nop
 800f0f4:	20000e5c 	.word	0x20000e5c

0800f0f8 <malloc>:
 800f0f8:	4b02      	ldr	r3, [pc, #8]	; (800f104 <malloc+0xc>)
 800f0fa:	4601      	mov	r1, r0
 800f0fc:	6818      	ldr	r0, [r3, #0]
 800f0fe:	f000 b851 	b.w	800f1a4 <_malloc_r>
 800f102:	bf00      	nop
 800f104:	20000274 	.word	0x20000274

0800f108 <_free_r>:
 800f108:	b538      	push	{r3, r4, r5, lr}
 800f10a:	4605      	mov	r5, r0
 800f10c:	2900      	cmp	r1, #0
 800f10e:	d045      	beq.n	800f19c <_free_r+0x94>
 800f110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f114:	1f0c      	subs	r4, r1, #4
 800f116:	2b00      	cmp	r3, #0
 800f118:	bfb8      	it	lt
 800f11a:	18e4      	addlt	r4, r4, r3
 800f11c:	f000 fbaa 	bl	800f874 <__malloc_lock>
 800f120:	4a1f      	ldr	r2, [pc, #124]	; (800f1a0 <_free_r+0x98>)
 800f122:	6813      	ldr	r3, [r2, #0]
 800f124:	4610      	mov	r0, r2
 800f126:	b933      	cbnz	r3, 800f136 <_free_r+0x2e>
 800f128:	6063      	str	r3, [r4, #4]
 800f12a:	6014      	str	r4, [r2, #0]
 800f12c:	4628      	mov	r0, r5
 800f12e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f132:	f000 bba0 	b.w	800f876 <__malloc_unlock>
 800f136:	42a3      	cmp	r3, r4
 800f138:	d90c      	bls.n	800f154 <_free_r+0x4c>
 800f13a:	6821      	ldr	r1, [r4, #0]
 800f13c:	1862      	adds	r2, r4, r1
 800f13e:	4293      	cmp	r3, r2
 800f140:	bf04      	itt	eq
 800f142:	681a      	ldreq	r2, [r3, #0]
 800f144:	685b      	ldreq	r3, [r3, #4]
 800f146:	6063      	str	r3, [r4, #4]
 800f148:	bf04      	itt	eq
 800f14a:	1852      	addeq	r2, r2, r1
 800f14c:	6022      	streq	r2, [r4, #0]
 800f14e:	6004      	str	r4, [r0, #0]
 800f150:	e7ec      	b.n	800f12c <_free_r+0x24>
 800f152:	4613      	mov	r3, r2
 800f154:	685a      	ldr	r2, [r3, #4]
 800f156:	b10a      	cbz	r2, 800f15c <_free_r+0x54>
 800f158:	42a2      	cmp	r2, r4
 800f15a:	d9fa      	bls.n	800f152 <_free_r+0x4a>
 800f15c:	6819      	ldr	r1, [r3, #0]
 800f15e:	1858      	adds	r0, r3, r1
 800f160:	42a0      	cmp	r0, r4
 800f162:	d10b      	bne.n	800f17c <_free_r+0x74>
 800f164:	6820      	ldr	r0, [r4, #0]
 800f166:	4401      	add	r1, r0
 800f168:	1858      	adds	r0, r3, r1
 800f16a:	4282      	cmp	r2, r0
 800f16c:	6019      	str	r1, [r3, #0]
 800f16e:	d1dd      	bne.n	800f12c <_free_r+0x24>
 800f170:	6810      	ldr	r0, [r2, #0]
 800f172:	6852      	ldr	r2, [r2, #4]
 800f174:	605a      	str	r2, [r3, #4]
 800f176:	4401      	add	r1, r0
 800f178:	6019      	str	r1, [r3, #0]
 800f17a:	e7d7      	b.n	800f12c <_free_r+0x24>
 800f17c:	d902      	bls.n	800f184 <_free_r+0x7c>
 800f17e:	230c      	movs	r3, #12
 800f180:	602b      	str	r3, [r5, #0]
 800f182:	e7d3      	b.n	800f12c <_free_r+0x24>
 800f184:	6820      	ldr	r0, [r4, #0]
 800f186:	1821      	adds	r1, r4, r0
 800f188:	428a      	cmp	r2, r1
 800f18a:	bf04      	itt	eq
 800f18c:	6811      	ldreq	r1, [r2, #0]
 800f18e:	6852      	ldreq	r2, [r2, #4]
 800f190:	6062      	str	r2, [r4, #4]
 800f192:	bf04      	itt	eq
 800f194:	1809      	addeq	r1, r1, r0
 800f196:	6021      	streq	r1, [r4, #0]
 800f198:	605c      	str	r4, [r3, #4]
 800f19a:	e7c7      	b.n	800f12c <_free_r+0x24>
 800f19c:	bd38      	pop	{r3, r4, r5, pc}
 800f19e:	bf00      	nop
 800f1a0:	2000055c 	.word	0x2000055c

0800f1a4 <_malloc_r>:
 800f1a4:	b570      	push	{r4, r5, r6, lr}
 800f1a6:	1ccd      	adds	r5, r1, #3
 800f1a8:	f025 0503 	bic.w	r5, r5, #3
 800f1ac:	3508      	adds	r5, #8
 800f1ae:	2d0c      	cmp	r5, #12
 800f1b0:	bf38      	it	cc
 800f1b2:	250c      	movcc	r5, #12
 800f1b4:	2d00      	cmp	r5, #0
 800f1b6:	4606      	mov	r6, r0
 800f1b8:	db01      	blt.n	800f1be <_malloc_r+0x1a>
 800f1ba:	42a9      	cmp	r1, r5
 800f1bc:	d903      	bls.n	800f1c6 <_malloc_r+0x22>
 800f1be:	230c      	movs	r3, #12
 800f1c0:	6033      	str	r3, [r6, #0]
 800f1c2:	2000      	movs	r0, #0
 800f1c4:	bd70      	pop	{r4, r5, r6, pc}
 800f1c6:	f000 fb55 	bl	800f874 <__malloc_lock>
 800f1ca:	4a21      	ldr	r2, [pc, #132]	; (800f250 <_malloc_r+0xac>)
 800f1cc:	6814      	ldr	r4, [r2, #0]
 800f1ce:	4621      	mov	r1, r4
 800f1d0:	b991      	cbnz	r1, 800f1f8 <_malloc_r+0x54>
 800f1d2:	4c20      	ldr	r4, [pc, #128]	; (800f254 <_malloc_r+0xb0>)
 800f1d4:	6823      	ldr	r3, [r4, #0]
 800f1d6:	b91b      	cbnz	r3, 800f1e0 <_malloc_r+0x3c>
 800f1d8:	4630      	mov	r0, r6
 800f1da:	f000 fb17 	bl	800f80c <_sbrk_r>
 800f1de:	6020      	str	r0, [r4, #0]
 800f1e0:	4629      	mov	r1, r5
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	f000 fb12 	bl	800f80c <_sbrk_r>
 800f1e8:	1c43      	adds	r3, r0, #1
 800f1ea:	d124      	bne.n	800f236 <_malloc_r+0x92>
 800f1ec:	230c      	movs	r3, #12
 800f1ee:	6033      	str	r3, [r6, #0]
 800f1f0:	4630      	mov	r0, r6
 800f1f2:	f000 fb40 	bl	800f876 <__malloc_unlock>
 800f1f6:	e7e4      	b.n	800f1c2 <_malloc_r+0x1e>
 800f1f8:	680b      	ldr	r3, [r1, #0]
 800f1fa:	1b5b      	subs	r3, r3, r5
 800f1fc:	d418      	bmi.n	800f230 <_malloc_r+0x8c>
 800f1fe:	2b0b      	cmp	r3, #11
 800f200:	d90f      	bls.n	800f222 <_malloc_r+0x7e>
 800f202:	600b      	str	r3, [r1, #0]
 800f204:	50cd      	str	r5, [r1, r3]
 800f206:	18cc      	adds	r4, r1, r3
 800f208:	4630      	mov	r0, r6
 800f20a:	f000 fb34 	bl	800f876 <__malloc_unlock>
 800f20e:	f104 000b 	add.w	r0, r4, #11
 800f212:	1d23      	adds	r3, r4, #4
 800f214:	f020 0007 	bic.w	r0, r0, #7
 800f218:	1ac3      	subs	r3, r0, r3
 800f21a:	d0d3      	beq.n	800f1c4 <_malloc_r+0x20>
 800f21c:	425a      	negs	r2, r3
 800f21e:	50e2      	str	r2, [r4, r3]
 800f220:	e7d0      	b.n	800f1c4 <_malloc_r+0x20>
 800f222:	428c      	cmp	r4, r1
 800f224:	684b      	ldr	r3, [r1, #4]
 800f226:	bf16      	itet	ne
 800f228:	6063      	strne	r3, [r4, #4]
 800f22a:	6013      	streq	r3, [r2, #0]
 800f22c:	460c      	movne	r4, r1
 800f22e:	e7eb      	b.n	800f208 <_malloc_r+0x64>
 800f230:	460c      	mov	r4, r1
 800f232:	6849      	ldr	r1, [r1, #4]
 800f234:	e7cc      	b.n	800f1d0 <_malloc_r+0x2c>
 800f236:	1cc4      	adds	r4, r0, #3
 800f238:	f024 0403 	bic.w	r4, r4, #3
 800f23c:	42a0      	cmp	r0, r4
 800f23e:	d005      	beq.n	800f24c <_malloc_r+0xa8>
 800f240:	1a21      	subs	r1, r4, r0
 800f242:	4630      	mov	r0, r6
 800f244:	f000 fae2 	bl	800f80c <_sbrk_r>
 800f248:	3001      	adds	r0, #1
 800f24a:	d0cf      	beq.n	800f1ec <_malloc_r+0x48>
 800f24c:	6025      	str	r5, [r4, #0]
 800f24e:	e7db      	b.n	800f208 <_malloc_r+0x64>
 800f250:	2000055c 	.word	0x2000055c
 800f254:	20000560 	.word	0x20000560

0800f258 <__ssputs_r>:
 800f258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f25c:	688e      	ldr	r6, [r1, #8]
 800f25e:	429e      	cmp	r6, r3
 800f260:	4682      	mov	sl, r0
 800f262:	460c      	mov	r4, r1
 800f264:	4690      	mov	r8, r2
 800f266:	4699      	mov	r9, r3
 800f268:	d837      	bhi.n	800f2da <__ssputs_r+0x82>
 800f26a:	898a      	ldrh	r2, [r1, #12]
 800f26c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f270:	d031      	beq.n	800f2d6 <__ssputs_r+0x7e>
 800f272:	6825      	ldr	r5, [r4, #0]
 800f274:	6909      	ldr	r1, [r1, #16]
 800f276:	1a6f      	subs	r7, r5, r1
 800f278:	6965      	ldr	r5, [r4, #20]
 800f27a:	2302      	movs	r3, #2
 800f27c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f280:	fb95 f5f3 	sdiv	r5, r5, r3
 800f284:	f109 0301 	add.w	r3, r9, #1
 800f288:	443b      	add	r3, r7
 800f28a:	429d      	cmp	r5, r3
 800f28c:	bf38      	it	cc
 800f28e:	461d      	movcc	r5, r3
 800f290:	0553      	lsls	r3, r2, #21
 800f292:	d530      	bpl.n	800f2f6 <__ssputs_r+0x9e>
 800f294:	4629      	mov	r1, r5
 800f296:	f7ff ff85 	bl	800f1a4 <_malloc_r>
 800f29a:	4606      	mov	r6, r0
 800f29c:	b950      	cbnz	r0, 800f2b4 <__ssputs_r+0x5c>
 800f29e:	230c      	movs	r3, #12
 800f2a0:	f8ca 3000 	str.w	r3, [sl]
 800f2a4:	89a3      	ldrh	r3, [r4, #12]
 800f2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2aa:	81a3      	strh	r3, [r4, #12]
 800f2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2b4:	463a      	mov	r2, r7
 800f2b6:	6921      	ldr	r1, [r4, #16]
 800f2b8:	f000 fab8 	bl	800f82c <memcpy>
 800f2bc:	89a3      	ldrh	r3, [r4, #12]
 800f2be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f2c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2c6:	81a3      	strh	r3, [r4, #12]
 800f2c8:	6126      	str	r6, [r4, #16]
 800f2ca:	6165      	str	r5, [r4, #20]
 800f2cc:	443e      	add	r6, r7
 800f2ce:	1bed      	subs	r5, r5, r7
 800f2d0:	6026      	str	r6, [r4, #0]
 800f2d2:	60a5      	str	r5, [r4, #8]
 800f2d4:	464e      	mov	r6, r9
 800f2d6:	454e      	cmp	r6, r9
 800f2d8:	d900      	bls.n	800f2dc <__ssputs_r+0x84>
 800f2da:	464e      	mov	r6, r9
 800f2dc:	4632      	mov	r2, r6
 800f2de:	4641      	mov	r1, r8
 800f2e0:	6820      	ldr	r0, [r4, #0]
 800f2e2:	f000 faae 	bl	800f842 <memmove>
 800f2e6:	68a3      	ldr	r3, [r4, #8]
 800f2e8:	1b9b      	subs	r3, r3, r6
 800f2ea:	60a3      	str	r3, [r4, #8]
 800f2ec:	6823      	ldr	r3, [r4, #0]
 800f2ee:	441e      	add	r6, r3
 800f2f0:	6026      	str	r6, [r4, #0]
 800f2f2:	2000      	movs	r0, #0
 800f2f4:	e7dc      	b.n	800f2b0 <__ssputs_r+0x58>
 800f2f6:	462a      	mov	r2, r5
 800f2f8:	f000 fabe 	bl	800f878 <_realloc_r>
 800f2fc:	4606      	mov	r6, r0
 800f2fe:	2800      	cmp	r0, #0
 800f300:	d1e2      	bne.n	800f2c8 <__ssputs_r+0x70>
 800f302:	6921      	ldr	r1, [r4, #16]
 800f304:	4650      	mov	r0, sl
 800f306:	f7ff feff 	bl	800f108 <_free_r>
 800f30a:	e7c8      	b.n	800f29e <__ssputs_r+0x46>

0800f30c <_svfiprintf_r>:
 800f30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f310:	461d      	mov	r5, r3
 800f312:	898b      	ldrh	r3, [r1, #12]
 800f314:	061f      	lsls	r7, r3, #24
 800f316:	b09d      	sub	sp, #116	; 0x74
 800f318:	4680      	mov	r8, r0
 800f31a:	460c      	mov	r4, r1
 800f31c:	4616      	mov	r6, r2
 800f31e:	d50f      	bpl.n	800f340 <_svfiprintf_r+0x34>
 800f320:	690b      	ldr	r3, [r1, #16]
 800f322:	b96b      	cbnz	r3, 800f340 <_svfiprintf_r+0x34>
 800f324:	2140      	movs	r1, #64	; 0x40
 800f326:	f7ff ff3d 	bl	800f1a4 <_malloc_r>
 800f32a:	6020      	str	r0, [r4, #0]
 800f32c:	6120      	str	r0, [r4, #16]
 800f32e:	b928      	cbnz	r0, 800f33c <_svfiprintf_r+0x30>
 800f330:	230c      	movs	r3, #12
 800f332:	f8c8 3000 	str.w	r3, [r8]
 800f336:	f04f 30ff 	mov.w	r0, #4294967295
 800f33a:	e0c8      	b.n	800f4ce <_svfiprintf_r+0x1c2>
 800f33c:	2340      	movs	r3, #64	; 0x40
 800f33e:	6163      	str	r3, [r4, #20]
 800f340:	2300      	movs	r3, #0
 800f342:	9309      	str	r3, [sp, #36]	; 0x24
 800f344:	2320      	movs	r3, #32
 800f346:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f34a:	2330      	movs	r3, #48	; 0x30
 800f34c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f350:	9503      	str	r5, [sp, #12]
 800f352:	f04f 0b01 	mov.w	fp, #1
 800f356:	4637      	mov	r7, r6
 800f358:	463d      	mov	r5, r7
 800f35a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f35e:	b10b      	cbz	r3, 800f364 <_svfiprintf_r+0x58>
 800f360:	2b25      	cmp	r3, #37	; 0x25
 800f362:	d13e      	bne.n	800f3e2 <_svfiprintf_r+0xd6>
 800f364:	ebb7 0a06 	subs.w	sl, r7, r6
 800f368:	d00b      	beq.n	800f382 <_svfiprintf_r+0x76>
 800f36a:	4653      	mov	r3, sl
 800f36c:	4632      	mov	r2, r6
 800f36e:	4621      	mov	r1, r4
 800f370:	4640      	mov	r0, r8
 800f372:	f7ff ff71 	bl	800f258 <__ssputs_r>
 800f376:	3001      	adds	r0, #1
 800f378:	f000 80a4 	beq.w	800f4c4 <_svfiprintf_r+0x1b8>
 800f37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f37e:	4453      	add	r3, sl
 800f380:	9309      	str	r3, [sp, #36]	; 0x24
 800f382:	783b      	ldrb	r3, [r7, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	f000 809d 	beq.w	800f4c4 <_svfiprintf_r+0x1b8>
 800f38a:	2300      	movs	r3, #0
 800f38c:	f04f 32ff 	mov.w	r2, #4294967295
 800f390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f394:	9304      	str	r3, [sp, #16]
 800f396:	9307      	str	r3, [sp, #28]
 800f398:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f39c:	931a      	str	r3, [sp, #104]	; 0x68
 800f39e:	462f      	mov	r7, r5
 800f3a0:	2205      	movs	r2, #5
 800f3a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f3a6:	4850      	ldr	r0, [pc, #320]	; (800f4e8 <_svfiprintf_r+0x1dc>)
 800f3a8:	f7f0 ff52 	bl	8000250 <memchr>
 800f3ac:	9b04      	ldr	r3, [sp, #16]
 800f3ae:	b9d0      	cbnz	r0, 800f3e6 <_svfiprintf_r+0xda>
 800f3b0:	06d9      	lsls	r1, r3, #27
 800f3b2:	bf44      	itt	mi
 800f3b4:	2220      	movmi	r2, #32
 800f3b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f3ba:	071a      	lsls	r2, r3, #28
 800f3bc:	bf44      	itt	mi
 800f3be:	222b      	movmi	r2, #43	; 0x2b
 800f3c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f3c4:	782a      	ldrb	r2, [r5, #0]
 800f3c6:	2a2a      	cmp	r2, #42	; 0x2a
 800f3c8:	d015      	beq.n	800f3f6 <_svfiprintf_r+0xea>
 800f3ca:	9a07      	ldr	r2, [sp, #28]
 800f3cc:	462f      	mov	r7, r5
 800f3ce:	2000      	movs	r0, #0
 800f3d0:	250a      	movs	r5, #10
 800f3d2:	4639      	mov	r1, r7
 800f3d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3d8:	3b30      	subs	r3, #48	; 0x30
 800f3da:	2b09      	cmp	r3, #9
 800f3dc:	d94d      	bls.n	800f47a <_svfiprintf_r+0x16e>
 800f3de:	b1b8      	cbz	r0, 800f410 <_svfiprintf_r+0x104>
 800f3e0:	e00f      	b.n	800f402 <_svfiprintf_r+0xf6>
 800f3e2:	462f      	mov	r7, r5
 800f3e4:	e7b8      	b.n	800f358 <_svfiprintf_r+0x4c>
 800f3e6:	4a40      	ldr	r2, [pc, #256]	; (800f4e8 <_svfiprintf_r+0x1dc>)
 800f3e8:	1a80      	subs	r0, r0, r2
 800f3ea:	fa0b f000 	lsl.w	r0, fp, r0
 800f3ee:	4318      	orrs	r0, r3
 800f3f0:	9004      	str	r0, [sp, #16]
 800f3f2:	463d      	mov	r5, r7
 800f3f4:	e7d3      	b.n	800f39e <_svfiprintf_r+0x92>
 800f3f6:	9a03      	ldr	r2, [sp, #12]
 800f3f8:	1d11      	adds	r1, r2, #4
 800f3fa:	6812      	ldr	r2, [r2, #0]
 800f3fc:	9103      	str	r1, [sp, #12]
 800f3fe:	2a00      	cmp	r2, #0
 800f400:	db01      	blt.n	800f406 <_svfiprintf_r+0xfa>
 800f402:	9207      	str	r2, [sp, #28]
 800f404:	e004      	b.n	800f410 <_svfiprintf_r+0x104>
 800f406:	4252      	negs	r2, r2
 800f408:	f043 0302 	orr.w	r3, r3, #2
 800f40c:	9207      	str	r2, [sp, #28]
 800f40e:	9304      	str	r3, [sp, #16]
 800f410:	783b      	ldrb	r3, [r7, #0]
 800f412:	2b2e      	cmp	r3, #46	; 0x2e
 800f414:	d10c      	bne.n	800f430 <_svfiprintf_r+0x124>
 800f416:	787b      	ldrb	r3, [r7, #1]
 800f418:	2b2a      	cmp	r3, #42	; 0x2a
 800f41a:	d133      	bne.n	800f484 <_svfiprintf_r+0x178>
 800f41c:	9b03      	ldr	r3, [sp, #12]
 800f41e:	1d1a      	adds	r2, r3, #4
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	9203      	str	r2, [sp, #12]
 800f424:	2b00      	cmp	r3, #0
 800f426:	bfb8      	it	lt
 800f428:	f04f 33ff 	movlt.w	r3, #4294967295
 800f42c:	3702      	adds	r7, #2
 800f42e:	9305      	str	r3, [sp, #20]
 800f430:	4d2e      	ldr	r5, [pc, #184]	; (800f4ec <_svfiprintf_r+0x1e0>)
 800f432:	7839      	ldrb	r1, [r7, #0]
 800f434:	2203      	movs	r2, #3
 800f436:	4628      	mov	r0, r5
 800f438:	f7f0 ff0a 	bl	8000250 <memchr>
 800f43c:	b138      	cbz	r0, 800f44e <_svfiprintf_r+0x142>
 800f43e:	2340      	movs	r3, #64	; 0x40
 800f440:	1b40      	subs	r0, r0, r5
 800f442:	fa03 f000 	lsl.w	r0, r3, r0
 800f446:	9b04      	ldr	r3, [sp, #16]
 800f448:	4303      	orrs	r3, r0
 800f44a:	3701      	adds	r7, #1
 800f44c:	9304      	str	r3, [sp, #16]
 800f44e:	7839      	ldrb	r1, [r7, #0]
 800f450:	4827      	ldr	r0, [pc, #156]	; (800f4f0 <_svfiprintf_r+0x1e4>)
 800f452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f456:	2206      	movs	r2, #6
 800f458:	1c7e      	adds	r6, r7, #1
 800f45a:	f7f0 fef9 	bl	8000250 <memchr>
 800f45e:	2800      	cmp	r0, #0
 800f460:	d038      	beq.n	800f4d4 <_svfiprintf_r+0x1c8>
 800f462:	4b24      	ldr	r3, [pc, #144]	; (800f4f4 <_svfiprintf_r+0x1e8>)
 800f464:	bb13      	cbnz	r3, 800f4ac <_svfiprintf_r+0x1a0>
 800f466:	9b03      	ldr	r3, [sp, #12]
 800f468:	3307      	adds	r3, #7
 800f46a:	f023 0307 	bic.w	r3, r3, #7
 800f46e:	3308      	adds	r3, #8
 800f470:	9303      	str	r3, [sp, #12]
 800f472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f474:	444b      	add	r3, r9
 800f476:	9309      	str	r3, [sp, #36]	; 0x24
 800f478:	e76d      	b.n	800f356 <_svfiprintf_r+0x4a>
 800f47a:	fb05 3202 	mla	r2, r5, r2, r3
 800f47e:	2001      	movs	r0, #1
 800f480:	460f      	mov	r7, r1
 800f482:	e7a6      	b.n	800f3d2 <_svfiprintf_r+0xc6>
 800f484:	2300      	movs	r3, #0
 800f486:	3701      	adds	r7, #1
 800f488:	9305      	str	r3, [sp, #20]
 800f48a:	4619      	mov	r1, r3
 800f48c:	250a      	movs	r5, #10
 800f48e:	4638      	mov	r0, r7
 800f490:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f494:	3a30      	subs	r2, #48	; 0x30
 800f496:	2a09      	cmp	r2, #9
 800f498:	d903      	bls.n	800f4a2 <_svfiprintf_r+0x196>
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d0c8      	beq.n	800f430 <_svfiprintf_r+0x124>
 800f49e:	9105      	str	r1, [sp, #20]
 800f4a0:	e7c6      	b.n	800f430 <_svfiprintf_r+0x124>
 800f4a2:	fb05 2101 	mla	r1, r5, r1, r2
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	4607      	mov	r7, r0
 800f4aa:	e7f0      	b.n	800f48e <_svfiprintf_r+0x182>
 800f4ac:	ab03      	add	r3, sp, #12
 800f4ae:	9300      	str	r3, [sp, #0]
 800f4b0:	4622      	mov	r2, r4
 800f4b2:	4b11      	ldr	r3, [pc, #68]	; (800f4f8 <_svfiprintf_r+0x1ec>)
 800f4b4:	a904      	add	r1, sp, #16
 800f4b6:	4640      	mov	r0, r8
 800f4b8:	f3af 8000 	nop.w
 800f4bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f4c0:	4681      	mov	r9, r0
 800f4c2:	d1d6      	bne.n	800f472 <_svfiprintf_r+0x166>
 800f4c4:	89a3      	ldrh	r3, [r4, #12]
 800f4c6:	065b      	lsls	r3, r3, #25
 800f4c8:	f53f af35 	bmi.w	800f336 <_svfiprintf_r+0x2a>
 800f4cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4ce:	b01d      	add	sp, #116	; 0x74
 800f4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4d4:	ab03      	add	r3, sp, #12
 800f4d6:	9300      	str	r3, [sp, #0]
 800f4d8:	4622      	mov	r2, r4
 800f4da:	4b07      	ldr	r3, [pc, #28]	; (800f4f8 <_svfiprintf_r+0x1ec>)
 800f4dc:	a904      	add	r1, sp, #16
 800f4de:	4640      	mov	r0, r8
 800f4e0:	f000 f882 	bl	800f5e8 <_printf_i>
 800f4e4:	e7ea      	b.n	800f4bc <_svfiprintf_r+0x1b0>
 800f4e6:	bf00      	nop
 800f4e8:	08012508 	.word	0x08012508
 800f4ec:	0801250e 	.word	0x0801250e
 800f4f0:	08012512 	.word	0x08012512
 800f4f4:	00000000 	.word	0x00000000
 800f4f8:	0800f259 	.word	0x0800f259

0800f4fc <_printf_common>:
 800f4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f500:	4691      	mov	r9, r2
 800f502:	461f      	mov	r7, r3
 800f504:	688a      	ldr	r2, [r1, #8]
 800f506:	690b      	ldr	r3, [r1, #16]
 800f508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f50c:	4293      	cmp	r3, r2
 800f50e:	bfb8      	it	lt
 800f510:	4613      	movlt	r3, r2
 800f512:	f8c9 3000 	str.w	r3, [r9]
 800f516:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f51a:	4606      	mov	r6, r0
 800f51c:	460c      	mov	r4, r1
 800f51e:	b112      	cbz	r2, 800f526 <_printf_common+0x2a>
 800f520:	3301      	adds	r3, #1
 800f522:	f8c9 3000 	str.w	r3, [r9]
 800f526:	6823      	ldr	r3, [r4, #0]
 800f528:	0699      	lsls	r1, r3, #26
 800f52a:	bf42      	ittt	mi
 800f52c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f530:	3302      	addmi	r3, #2
 800f532:	f8c9 3000 	strmi.w	r3, [r9]
 800f536:	6825      	ldr	r5, [r4, #0]
 800f538:	f015 0506 	ands.w	r5, r5, #6
 800f53c:	d107      	bne.n	800f54e <_printf_common+0x52>
 800f53e:	f104 0a19 	add.w	sl, r4, #25
 800f542:	68e3      	ldr	r3, [r4, #12]
 800f544:	f8d9 2000 	ldr.w	r2, [r9]
 800f548:	1a9b      	subs	r3, r3, r2
 800f54a:	42ab      	cmp	r3, r5
 800f54c:	dc28      	bgt.n	800f5a0 <_printf_common+0xa4>
 800f54e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f552:	6822      	ldr	r2, [r4, #0]
 800f554:	3300      	adds	r3, #0
 800f556:	bf18      	it	ne
 800f558:	2301      	movne	r3, #1
 800f55a:	0692      	lsls	r2, r2, #26
 800f55c:	d42d      	bmi.n	800f5ba <_printf_common+0xbe>
 800f55e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f562:	4639      	mov	r1, r7
 800f564:	4630      	mov	r0, r6
 800f566:	47c0      	blx	r8
 800f568:	3001      	adds	r0, #1
 800f56a:	d020      	beq.n	800f5ae <_printf_common+0xb2>
 800f56c:	6823      	ldr	r3, [r4, #0]
 800f56e:	68e5      	ldr	r5, [r4, #12]
 800f570:	f8d9 2000 	ldr.w	r2, [r9]
 800f574:	f003 0306 	and.w	r3, r3, #6
 800f578:	2b04      	cmp	r3, #4
 800f57a:	bf08      	it	eq
 800f57c:	1aad      	subeq	r5, r5, r2
 800f57e:	68a3      	ldr	r3, [r4, #8]
 800f580:	6922      	ldr	r2, [r4, #16]
 800f582:	bf0c      	ite	eq
 800f584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f588:	2500      	movne	r5, #0
 800f58a:	4293      	cmp	r3, r2
 800f58c:	bfc4      	itt	gt
 800f58e:	1a9b      	subgt	r3, r3, r2
 800f590:	18ed      	addgt	r5, r5, r3
 800f592:	f04f 0900 	mov.w	r9, #0
 800f596:	341a      	adds	r4, #26
 800f598:	454d      	cmp	r5, r9
 800f59a:	d11a      	bne.n	800f5d2 <_printf_common+0xd6>
 800f59c:	2000      	movs	r0, #0
 800f59e:	e008      	b.n	800f5b2 <_printf_common+0xb6>
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	4652      	mov	r2, sl
 800f5a4:	4639      	mov	r1, r7
 800f5a6:	4630      	mov	r0, r6
 800f5a8:	47c0      	blx	r8
 800f5aa:	3001      	adds	r0, #1
 800f5ac:	d103      	bne.n	800f5b6 <_printf_common+0xba>
 800f5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5b6:	3501      	adds	r5, #1
 800f5b8:	e7c3      	b.n	800f542 <_printf_common+0x46>
 800f5ba:	18e1      	adds	r1, r4, r3
 800f5bc:	1c5a      	adds	r2, r3, #1
 800f5be:	2030      	movs	r0, #48	; 0x30
 800f5c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f5c4:	4422      	add	r2, r4
 800f5c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f5ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f5ce:	3302      	adds	r3, #2
 800f5d0:	e7c5      	b.n	800f55e <_printf_common+0x62>
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	4622      	mov	r2, r4
 800f5d6:	4639      	mov	r1, r7
 800f5d8:	4630      	mov	r0, r6
 800f5da:	47c0      	blx	r8
 800f5dc:	3001      	adds	r0, #1
 800f5de:	d0e6      	beq.n	800f5ae <_printf_common+0xb2>
 800f5e0:	f109 0901 	add.w	r9, r9, #1
 800f5e4:	e7d8      	b.n	800f598 <_printf_common+0x9c>
	...

0800f5e8 <_printf_i>:
 800f5e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f5f0:	460c      	mov	r4, r1
 800f5f2:	7e09      	ldrb	r1, [r1, #24]
 800f5f4:	b085      	sub	sp, #20
 800f5f6:	296e      	cmp	r1, #110	; 0x6e
 800f5f8:	4617      	mov	r7, r2
 800f5fa:	4606      	mov	r6, r0
 800f5fc:	4698      	mov	r8, r3
 800f5fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f600:	f000 80b3 	beq.w	800f76a <_printf_i+0x182>
 800f604:	d822      	bhi.n	800f64c <_printf_i+0x64>
 800f606:	2963      	cmp	r1, #99	; 0x63
 800f608:	d036      	beq.n	800f678 <_printf_i+0x90>
 800f60a:	d80a      	bhi.n	800f622 <_printf_i+0x3a>
 800f60c:	2900      	cmp	r1, #0
 800f60e:	f000 80b9 	beq.w	800f784 <_printf_i+0x19c>
 800f612:	2958      	cmp	r1, #88	; 0x58
 800f614:	f000 8083 	beq.w	800f71e <_printf_i+0x136>
 800f618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f61c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f620:	e032      	b.n	800f688 <_printf_i+0xa0>
 800f622:	2964      	cmp	r1, #100	; 0x64
 800f624:	d001      	beq.n	800f62a <_printf_i+0x42>
 800f626:	2969      	cmp	r1, #105	; 0x69
 800f628:	d1f6      	bne.n	800f618 <_printf_i+0x30>
 800f62a:	6820      	ldr	r0, [r4, #0]
 800f62c:	6813      	ldr	r3, [r2, #0]
 800f62e:	0605      	lsls	r5, r0, #24
 800f630:	f103 0104 	add.w	r1, r3, #4
 800f634:	d52a      	bpl.n	800f68c <_printf_i+0xa4>
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	6011      	str	r1, [r2, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	da03      	bge.n	800f646 <_printf_i+0x5e>
 800f63e:	222d      	movs	r2, #45	; 0x2d
 800f640:	425b      	negs	r3, r3
 800f642:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f646:	486f      	ldr	r0, [pc, #444]	; (800f804 <_printf_i+0x21c>)
 800f648:	220a      	movs	r2, #10
 800f64a:	e039      	b.n	800f6c0 <_printf_i+0xd8>
 800f64c:	2973      	cmp	r1, #115	; 0x73
 800f64e:	f000 809d 	beq.w	800f78c <_printf_i+0x1a4>
 800f652:	d808      	bhi.n	800f666 <_printf_i+0x7e>
 800f654:	296f      	cmp	r1, #111	; 0x6f
 800f656:	d020      	beq.n	800f69a <_printf_i+0xb2>
 800f658:	2970      	cmp	r1, #112	; 0x70
 800f65a:	d1dd      	bne.n	800f618 <_printf_i+0x30>
 800f65c:	6823      	ldr	r3, [r4, #0]
 800f65e:	f043 0320 	orr.w	r3, r3, #32
 800f662:	6023      	str	r3, [r4, #0]
 800f664:	e003      	b.n	800f66e <_printf_i+0x86>
 800f666:	2975      	cmp	r1, #117	; 0x75
 800f668:	d017      	beq.n	800f69a <_printf_i+0xb2>
 800f66a:	2978      	cmp	r1, #120	; 0x78
 800f66c:	d1d4      	bne.n	800f618 <_printf_i+0x30>
 800f66e:	2378      	movs	r3, #120	; 0x78
 800f670:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f674:	4864      	ldr	r0, [pc, #400]	; (800f808 <_printf_i+0x220>)
 800f676:	e055      	b.n	800f724 <_printf_i+0x13c>
 800f678:	6813      	ldr	r3, [r2, #0]
 800f67a:	1d19      	adds	r1, r3, #4
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	6011      	str	r1, [r2, #0]
 800f680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f688:	2301      	movs	r3, #1
 800f68a:	e08c      	b.n	800f7a6 <_printf_i+0x1be>
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	6011      	str	r1, [r2, #0]
 800f690:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f694:	bf18      	it	ne
 800f696:	b21b      	sxthne	r3, r3
 800f698:	e7cf      	b.n	800f63a <_printf_i+0x52>
 800f69a:	6813      	ldr	r3, [r2, #0]
 800f69c:	6825      	ldr	r5, [r4, #0]
 800f69e:	1d18      	adds	r0, r3, #4
 800f6a0:	6010      	str	r0, [r2, #0]
 800f6a2:	0628      	lsls	r0, r5, #24
 800f6a4:	d501      	bpl.n	800f6aa <_printf_i+0xc2>
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	e002      	b.n	800f6b0 <_printf_i+0xc8>
 800f6aa:	0668      	lsls	r0, r5, #25
 800f6ac:	d5fb      	bpl.n	800f6a6 <_printf_i+0xbe>
 800f6ae:	881b      	ldrh	r3, [r3, #0]
 800f6b0:	4854      	ldr	r0, [pc, #336]	; (800f804 <_printf_i+0x21c>)
 800f6b2:	296f      	cmp	r1, #111	; 0x6f
 800f6b4:	bf14      	ite	ne
 800f6b6:	220a      	movne	r2, #10
 800f6b8:	2208      	moveq	r2, #8
 800f6ba:	2100      	movs	r1, #0
 800f6bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f6c0:	6865      	ldr	r5, [r4, #4]
 800f6c2:	60a5      	str	r5, [r4, #8]
 800f6c4:	2d00      	cmp	r5, #0
 800f6c6:	f2c0 8095 	blt.w	800f7f4 <_printf_i+0x20c>
 800f6ca:	6821      	ldr	r1, [r4, #0]
 800f6cc:	f021 0104 	bic.w	r1, r1, #4
 800f6d0:	6021      	str	r1, [r4, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d13d      	bne.n	800f752 <_printf_i+0x16a>
 800f6d6:	2d00      	cmp	r5, #0
 800f6d8:	f040 808e 	bne.w	800f7f8 <_printf_i+0x210>
 800f6dc:	4665      	mov	r5, ip
 800f6de:	2a08      	cmp	r2, #8
 800f6e0:	d10b      	bne.n	800f6fa <_printf_i+0x112>
 800f6e2:	6823      	ldr	r3, [r4, #0]
 800f6e4:	07db      	lsls	r3, r3, #31
 800f6e6:	d508      	bpl.n	800f6fa <_printf_i+0x112>
 800f6e8:	6923      	ldr	r3, [r4, #16]
 800f6ea:	6862      	ldr	r2, [r4, #4]
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	bfde      	ittt	le
 800f6f0:	2330      	movle	r3, #48	; 0x30
 800f6f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f6f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f6fa:	ebac 0305 	sub.w	r3, ip, r5
 800f6fe:	6123      	str	r3, [r4, #16]
 800f700:	f8cd 8000 	str.w	r8, [sp]
 800f704:	463b      	mov	r3, r7
 800f706:	aa03      	add	r2, sp, #12
 800f708:	4621      	mov	r1, r4
 800f70a:	4630      	mov	r0, r6
 800f70c:	f7ff fef6 	bl	800f4fc <_printf_common>
 800f710:	3001      	adds	r0, #1
 800f712:	d14d      	bne.n	800f7b0 <_printf_i+0x1c8>
 800f714:	f04f 30ff 	mov.w	r0, #4294967295
 800f718:	b005      	add	sp, #20
 800f71a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f71e:	4839      	ldr	r0, [pc, #228]	; (800f804 <_printf_i+0x21c>)
 800f720:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f724:	6813      	ldr	r3, [r2, #0]
 800f726:	6821      	ldr	r1, [r4, #0]
 800f728:	1d1d      	adds	r5, r3, #4
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	6015      	str	r5, [r2, #0]
 800f72e:	060a      	lsls	r2, r1, #24
 800f730:	d50b      	bpl.n	800f74a <_printf_i+0x162>
 800f732:	07ca      	lsls	r2, r1, #31
 800f734:	bf44      	itt	mi
 800f736:	f041 0120 	orrmi.w	r1, r1, #32
 800f73a:	6021      	strmi	r1, [r4, #0]
 800f73c:	b91b      	cbnz	r3, 800f746 <_printf_i+0x15e>
 800f73e:	6822      	ldr	r2, [r4, #0]
 800f740:	f022 0220 	bic.w	r2, r2, #32
 800f744:	6022      	str	r2, [r4, #0]
 800f746:	2210      	movs	r2, #16
 800f748:	e7b7      	b.n	800f6ba <_printf_i+0xd2>
 800f74a:	064d      	lsls	r5, r1, #25
 800f74c:	bf48      	it	mi
 800f74e:	b29b      	uxthmi	r3, r3
 800f750:	e7ef      	b.n	800f732 <_printf_i+0x14a>
 800f752:	4665      	mov	r5, ip
 800f754:	fbb3 f1f2 	udiv	r1, r3, r2
 800f758:	fb02 3311 	mls	r3, r2, r1, r3
 800f75c:	5cc3      	ldrb	r3, [r0, r3]
 800f75e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f762:	460b      	mov	r3, r1
 800f764:	2900      	cmp	r1, #0
 800f766:	d1f5      	bne.n	800f754 <_printf_i+0x16c>
 800f768:	e7b9      	b.n	800f6de <_printf_i+0xf6>
 800f76a:	6813      	ldr	r3, [r2, #0]
 800f76c:	6825      	ldr	r5, [r4, #0]
 800f76e:	6961      	ldr	r1, [r4, #20]
 800f770:	1d18      	adds	r0, r3, #4
 800f772:	6010      	str	r0, [r2, #0]
 800f774:	0628      	lsls	r0, r5, #24
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	d501      	bpl.n	800f77e <_printf_i+0x196>
 800f77a:	6019      	str	r1, [r3, #0]
 800f77c:	e002      	b.n	800f784 <_printf_i+0x19c>
 800f77e:	066a      	lsls	r2, r5, #25
 800f780:	d5fb      	bpl.n	800f77a <_printf_i+0x192>
 800f782:	8019      	strh	r1, [r3, #0]
 800f784:	2300      	movs	r3, #0
 800f786:	6123      	str	r3, [r4, #16]
 800f788:	4665      	mov	r5, ip
 800f78a:	e7b9      	b.n	800f700 <_printf_i+0x118>
 800f78c:	6813      	ldr	r3, [r2, #0]
 800f78e:	1d19      	adds	r1, r3, #4
 800f790:	6011      	str	r1, [r2, #0]
 800f792:	681d      	ldr	r5, [r3, #0]
 800f794:	6862      	ldr	r2, [r4, #4]
 800f796:	2100      	movs	r1, #0
 800f798:	4628      	mov	r0, r5
 800f79a:	f7f0 fd59 	bl	8000250 <memchr>
 800f79e:	b108      	cbz	r0, 800f7a4 <_printf_i+0x1bc>
 800f7a0:	1b40      	subs	r0, r0, r5
 800f7a2:	6060      	str	r0, [r4, #4]
 800f7a4:	6863      	ldr	r3, [r4, #4]
 800f7a6:	6123      	str	r3, [r4, #16]
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7ae:	e7a7      	b.n	800f700 <_printf_i+0x118>
 800f7b0:	6923      	ldr	r3, [r4, #16]
 800f7b2:	462a      	mov	r2, r5
 800f7b4:	4639      	mov	r1, r7
 800f7b6:	4630      	mov	r0, r6
 800f7b8:	47c0      	blx	r8
 800f7ba:	3001      	adds	r0, #1
 800f7bc:	d0aa      	beq.n	800f714 <_printf_i+0x12c>
 800f7be:	6823      	ldr	r3, [r4, #0]
 800f7c0:	079b      	lsls	r3, r3, #30
 800f7c2:	d413      	bmi.n	800f7ec <_printf_i+0x204>
 800f7c4:	68e0      	ldr	r0, [r4, #12]
 800f7c6:	9b03      	ldr	r3, [sp, #12]
 800f7c8:	4298      	cmp	r0, r3
 800f7ca:	bfb8      	it	lt
 800f7cc:	4618      	movlt	r0, r3
 800f7ce:	e7a3      	b.n	800f718 <_printf_i+0x130>
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	464a      	mov	r2, r9
 800f7d4:	4639      	mov	r1, r7
 800f7d6:	4630      	mov	r0, r6
 800f7d8:	47c0      	blx	r8
 800f7da:	3001      	adds	r0, #1
 800f7dc:	d09a      	beq.n	800f714 <_printf_i+0x12c>
 800f7de:	3501      	adds	r5, #1
 800f7e0:	68e3      	ldr	r3, [r4, #12]
 800f7e2:	9a03      	ldr	r2, [sp, #12]
 800f7e4:	1a9b      	subs	r3, r3, r2
 800f7e6:	42ab      	cmp	r3, r5
 800f7e8:	dcf2      	bgt.n	800f7d0 <_printf_i+0x1e8>
 800f7ea:	e7eb      	b.n	800f7c4 <_printf_i+0x1dc>
 800f7ec:	2500      	movs	r5, #0
 800f7ee:	f104 0919 	add.w	r9, r4, #25
 800f7f2:	e7f5      	b.n	800f7e0 <_printf_i+0x1f8>
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d1ac      	bne.n	800f752 <_printf_i+0x16a>
 800f7f8:	7803      	ldrb	r3, [r0, #0]
 800f7fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f7fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f802:	e76c      	b.n	800f6de <_printf_i+0xf6>
 800f804:	08012519 	.word	0x08012519
 800f808:	0801252a 	.word	0x0801252a

0800f80c <_sbrk_r>:
 800f80c:	b538      	push	{r3, r4, r5, lr}
 800f80e:	4c06      	ldr	r4, [pc, #24]	; (800f828 <_sbrk_r+0x1c>)
 800f810:	2300      	movs	r3, #0
 800f812:	4605      	mov	r5, r0
 800f814:	4608      	mov	r0, r1
 800f816:	6023      	str	r3, [r4, #0]
 800f818:	f7ff fb0c 	bl	800ee34 <_sbrk>
 800f81c:	1c43      	adds	r3, r0, #1
 800f81e:	d102      	bne.n	800f826 <_sbrk_r+0x1a>
 800f820:	6823      	ldr	r3, [r4, #0]
 800f822:	b103      	cbz	r3, 800f826 <_sbrk_r+0x1a>
 800f824:	602b      	str	r3, [r5, #0]
 800f826:	bd38      	pop	{r3, r4, r5, pc}
 800f828:	20000e5c 	.word	0x20000e5c

0800f82c <memcpy>:
 800f82c:	b510      	push	{r4, lr}
 800f82e:	1e43      	subs	r3, r0, #1
 800f830:	440a      	add	r2, r1
 800f832:	4291      	cmp	r1, r2
 800f834:	d100      	bne.n	800f838 <memcpy+0xc>
 800f836:	bd10      	pop	{r4, pc}
 800f838:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f83c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f840:	e7f7      	b.n	800f832 <memcpy+0x6>

0800f842 <memmove>:
 800f842:	4288      	cmp	r0, r1
 800f844:	b510      	push	{r4, lr}
 800f846:	eb01 0302 	add.w	r3, r1, r2
 800f84a:	d807      	bhi.n	800f85c <memmove+0x1a>
 800f84c:	1e42      	subs	r2, r0, #1
 800f84e:	4299      	cmp	r1, r3
 800f850:	d00a      	beq.n	800f868 <memmove+0x26>
 800f852:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f856:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f85a:	e7f8      	b.n	800f84e <memmove+0xc>
 800f85c:	4283      	cmp	r3, r0
 800f85e:	d9f5      	bls.n	800f84c <memmove+0xa>
 800f860:	1881      	adds	r1, r0, r2
 800f862:	1ad2      	subs	r2, r2, r3
 800f864:	42d3      	cmn	r3, r2
 800f866:	d100      	bne.n	800f86a <memmove+0x28>
 800f868:	bd10      	pop	{r4, pc}
 800f86a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f86e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f872:	e7f7      	b.n	800f864 <memmove+0x22>

0800f874 <__malloc_lock>:
 800f874:	4770      	bx	lr

0800f876 <__malloc_unlock>:
 800f876:	4770      	bx	lr

0800f878 <_realloc_r>:
 800f878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f87a:	4607      	mov	r7, r0
 800f87c:	4614      	mov	r4, r2
 800f87e:	460e      	mov	r6, r1
 800f880:	b921      	cbnz	r1, 800f88c <_realloc_r+0x14>
 800f882:	4611      	mov	r1, r2
 800f884:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f888:	f7ff bc8c 	b.w	800f1a4 <_malloc_r>
 800f88c:	b922      	cbnz	r2, 800f898 <_realloc_r+0x20>
 800f88e:	f7ff fc3b 	bl	800f108 <_free_r>
 800f892:	4625      	mov	r5, r4
 800f894:	4628      	mov	r0, r5
 800f896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f898:	f000 f814 	bl	800f8c4 <_malloc_usable_size_r>
 800f89c:	42a0      	cmp	r0, r4
 800f89e:	d20f      	bcs.n	800f8c0 <_realloc_r+0x48>
 800f8a0:	4621      	mov	r1, r4
 800f8a2:	4638      	mov	r0, r7
 800f8a4:	f7ff fc7e 	bl	800f1a4 <_malloc_r>
 800f8a8:	4605      	mov	r5, r0
 800f8aa:	2800      	cmp	r0, #0
 800f8ac:	d0f2      	beq.n	800f894 <_realloc_r+0x1c>
 800f8ae:	4631      	mov	r1, r6
 800f8b0:	4622      	mov	r2, r4
 800f8b2:	f7ff ffbb 	bl	800f82c <memcpy>
 800f8b6:	4631      	mov	r1, r6
 800f8b8:	4638      	mov	r0, r7
 800f8ba:	f7ff fc25 	bl	800f108 <_free_r>
 800f8be:	e7e9      	b.n	800f894 <_realloc_r+0x1c>
 800f8c0:	4635      	mov	r5, r6
 800f8c2:	e7e7      	b.n	800f894 <_realloc_r+0x1c>

0800f8c4 <_malloc_usable_size_r>:
 800f8c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8c8:	1f18      	subs	r0, r3, #4
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	bfbc      	itt	lt
 800f8ce:	580b      	ldrlt	r3, [r1, r0]
 800f8d0:	18c0      	addlt	r0, r0, r3
 800f8d2:	4770      	bx	lr

0800f8d4 <_gettimeofday>:
 800f8d4:	4b02      	ldr	r3, [pc, #8]	; (800f8e0 <_gettimeofday+0xc>)
 800f8d6:	2258      	movs	r2, #88	; 0x58
 800f8d8:	601a      	str	r2, [r3, #0]
 800f8da:	f04f 30ff 	mov.w	r0, #4294967295
 800f8de:	4770      	bx	lr
 800f8e0:	20000e5c 	.word	0x20000e5c

0800f8e4 <_init>:
 800f8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e6:	bf00      	nop
 800f8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ea:	bc08      	pop	{r3}
 800f8ec:	469e      	mov	lr, r3
 800f8ee:	4770      	bx	lr

0800f8f0 <_fini>:
 800f8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8f2:	bf00      	nop
 800f8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8f6:	bc08      	pop	{r3}
 800f8f8:	469e      	mov	lr, r3
 800f8fa:	4770      	bx	lr
