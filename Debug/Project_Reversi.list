
Project_Reversi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cd4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029a4  08009ed4  08009ed4  00019ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c878  0800c878  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c878  0800c878  0001c878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c880  0800c880  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c880  0800c880  0001c880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c884  0800c884  0001c884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800c888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006cc  200000c8  0800c950  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000794  0800c950  00020794  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002014f  00000000  00000000  000200f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b0c  00000000  00000000  00040245  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001968  00000000  00000000  00043d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001790  00000000  00000000  000456c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f997  00000000  00000000  00046e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015212  00000000  00000000  000767e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012359a  00000000  00000000  0008b9f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001aef93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ed4  00000000  00000000  001af010  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000c8 	.word	0x200000c8
 800021c:	00000000 	.word	0x00000000
 8000220:	08009ebc 	.word	0x08009ebc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000cc 	.word	0x200000cc
 800023c:	08009ebc 	.word	0x08009ebc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f90d 	bl	800080c <ft6x06_GetInstance>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2bff      	cmp	r3, #255	; 0xff
 80005fa:	d10e      	bne.n	800061a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f905 	bl	800080c <ft6x06_GetInstance>
 8000602:	4603      	mov	r3, r0
 8000604:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d806      	bhi.n	800061a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 800060c:	7bbb      	ldrb	r3, [r7, #14]
 800060e:	88fa      	ldrh	r2, [r7, #6]
 8000610:	b2d1      	uxtb	r1, r2
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <ft6x06_Init+0x44>)
 8000614:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8000616:	f000 fd73 	bl	8001100 <TS_IO_Init>
    }
  }
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000e4 	.word	0x200000e4

08000628 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8000648:	f000 fd5a 	bl	8001100 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	21a8      	movs	r1, #168	; 0xa8
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fd78 	bl	8001148 <TS_IO_Read>
 8000658:	4603      	mov	r3, r0
 800065a:	b29b      	uxth	r3, r3
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f8bc 	bl	80007ee <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f88d 	bl	8000798 <ft6x06_TS_DisableIT>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2102      	movs	r1, #2
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fd53 	bl	8001148 <TS_IO_Read>
 80006a2:	4603      	mov	r3, r0
 80006a4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d901      	bls.n	80006be <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <ft6x06_TS_DetectTouch+0x50>)
 80006c4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80006c6:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <ft6x06_TS_DetectTouch+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	b2db      	uxtb	r3, r3
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000e8 	.word	0x200000e8

080006dc <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006f0:	789a      	ldrb	r2, [r3, #2]
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006f4:	785b      	ldrb	r3, [r3, #1]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d234      	bcs.n	8000764 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <ft6x06_TS_GetXY+0x2c>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d003      	beq.n	800070e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8000706:	e005      	b.n	8000714 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000708:	2303      	movs	r3, #3
 800070a:	75fb      	strb	r3, [r7, #23]
      break;
 800070c:	e002      	b.n	8000714 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 800070e:	2309      	movs	r3, #9
 8000710:	75fb      	strb	r3, [r7, #23]
      break;
 8000712:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000714:	89fb      	ldrh	r3, [r7, #14]
 8000716:	b2d8      	uxtb	r0, r3
 8000718:	f107 0210 	add.w	r2, r7, #16
 800071c:	7df9      	ldrb	r1, [r7, #23]
 800071e:	2304      	movs	r3, #4
 8000720:	f000 fd30 	bl	8001184 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000724:	7c3b      	ldrb	r3, [r7, #16]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	b21b      	sxth	r3, r3
 800072a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800072e:	b21a      	sxth	r2, r3
 8000730:	7c7b      	ldrb	r3, [r7, #17]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29a      	uxth	r2, r3
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800073e:	7cbb      	ldrb	r3, [r7, #18]
 8000740:	021b      	lsls	r3, r3, #8
 8000742:	b21b      	sxth	r3, r3
 8000744:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000748:	b21a      	sxth	r2, r3
 800074a:	7cfb      	ldrb	r3, [r7, #19]
 800074c:	b21b      	sxth	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b21b      	sxth	r3, r3
 8000752:	b29a      	uxth	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <ft6x06_TS_GetXY+0x90>)
 800075a:	789b      	ldrb	r3, [r3, #2]
 800075c:	3301      	adds	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <ft6x06_TS_GetXY+0x90>)
 8000762:	709a      	strb	r2, [r3, #2]
  }
}
 8000764:	bf00      	nop
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000e8 	.word	0x200000e8

08000770 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800077e:	2301      	movs	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	7bfa      	ldrb	r2, [r7, #15]
 8000788:	21a4      	movs	r1, #164	; 0xa4
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fcc2 	bl	8001114 <TS_IO_Write>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	21a4      	movs	r1, #164	; 0xa4
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fcae 	bl	8001114 <TS_IO_Write>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b085      	sub	sp, #20
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 80007fc:	68fb      	ldr	r3, [r7, #12]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e00b      	b.n	8000838 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <ft6x06_GetInstance+0x40>)
 8000824:	5cd3      	ldrb	r3, [r2, r3]
 8000826:	b29b      	uxth	r3, r3
 8000828:	88fa      	ldrh	r2, [r7, #6]
 800082a:	429a      	cmp	r2, r3
 800082c:	d101      	bne.n	8000832 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	e006      	b.n	8000840 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	3301      	adds	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d9f0      	bls.n	8000820 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800083e:	23ff      	movs	r3, #255	; 0xff
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	200000e4 	.word	0x200000e4

08000850 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800085a:	49be      	ldr	r1, [pc, #760]	; (8000b54 <OTM8009A_Init+0x304>)
 800085c:	2000      	movs	r0, #0
 800085e:	f001 fb2f 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000862:	49bd      	ldr	r1, [pc, #756]	; (8000b58 <OTM8009A_Init+0x308>)
 8000864:	2003      	movs	r0, #3
 8000866:	f001 fb2b 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800086a:	49bc      	ldr	r1, [pc, #752]	; (8000b5c <OTM8009A_Init+0x30c>)
 800086c:	2000      	movs	r0, #0
 800086e:	f001 fb27 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000872:	49bb      	ldr	r1, [pc, #748]	; (8000b60 <OTM8009A_Init+0x310>)
 8000874:	2002      	movs	r0, #2
 8000876:	f001 fb23 	bl	8001ec0 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800087a:	49b8      	ldr	r1, [pc, #736]	; (8000b5c <OTM8009A_Init+0x30c>)
 800087c:	2000      	movs	r0, #0
 800087e:	f001 fb1f 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000882:	49b8      	ldr	r1, [pc, #736]	; (8000b64 <OTM8009A_Init+0x314>)
 8000884:	2000      	movs	r0, #0
 8000886:	f001 fb1b 	bl	8001ec0 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800088a:	200a      	movs	r0, #10
 800088c:	f000 fc98 	bl	80011c0 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000890:	49b5      	ldr	r1, [pc, #724]	; (8000b68 <OTM8009A_Init+0x318>)
 8000892:	2000      	movs	r0, #0
 8000894:	f001 fb14 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000898:	49b4      	ldr	r1, [pc, #720]	; (8000b6c <OTM8009A_Init+0x31c>)
 800089a:	2000      	movs	r0, #0
 800089c:	f001 fb10 	bl	8001ec0 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80008a0:	200a      	movs	r0, #10
 80008a2:	f000 fc8d 	bl	80011c0 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80008a6:	49b2      	ldr	r1, [pc, #712]	; (8000b70 <OTM8009A_Init+0x320>)
 80008a8:	2000      	movs	r0, #0
 80008aa:	f001 fb09 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80008ae:	49b1      	ldr	r1, [pc, #708]	; (8000b74 <OTM8009A_Init+0x324>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f001 fb05 	bl	8001ec0 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80008b6:	49b0      	ldr	r1, [pc, #704]	; (8000b78 <OTM8009A_Init+0x328>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 fb01 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80008be:	49af      	ldr	r1, [pc, #700]	; (8000b7c <OTM8009A_Init+0x32c>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 fafd 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80008c6:	49ae      	ldr	r1, [pc, #696]	; (8000b80 <OTM8009A_Init+0x330>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 faf9 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80008ce:	49ad      	ldr	r1, [pc, #692]	; (8000b84 <OTM8009A_Init+0x334>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 faf5 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008d6:	499f      	ldr	r1, [pc, #636]	; (8000b54 <OTM8009A_Init+0x304>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 faf1 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80008de:	49aa      	ldr	r1, [pc, #680]	; (8000b88 <OTM8009A_Init+0x338>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 faed 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008e6:	49a9      	ldr	r1, [pc, #676]	; (8000b8c <OTM8009A_Init+0x33c>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 fae9 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80008ee:	49a8      	ldr	r1, [pc, #672]	; (8000b90 <OTM8009A_Init+0x340>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 fae5 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80008f6:	49a7      	ldr	r1, [pc, #668]	; (8000b94 <OTM8009A_Init+0x344>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 fae1 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80008fe:	49a6      	ldr	r1, [pc, #664]	; (8000b98 <OTM8009A_Init+0x348>)
 8000900:	2000      	movs	r0, #0
 8000902:	f001 fadd 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000906:	49a5      	ldr	r1, [pc, #660]	; (8000b9c <OTM8009A_Init+0x34c>)
 8000908:	2000      	movs	r0, #0
 800090a:	f001 fad9 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800090e:	49a4      	ldr	r1, [pc, #656]	; (8000ba0 <OTM8009A_Init+0x350>)
 8000910:	2000      	movs	r0, #0
 8000912:	f001 fad5 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000916:	49a3      	ldr	r1, [pc, #652]	; (8000ba4 <OTM8009A_Init+0x354>)
 8000918:	2000      	movs	r0, #0
 800091a:	f001 fad1 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800091e:	4997      	ldr	r1, [pc, #604]	; (8000b7c <OTM8009A_Init+0x32c>)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 facd 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000926:	498b      	ldr	r1, [pc, #556]	; (8000b54 <OTM8009A_Init+0x304>)
 8000928:	2000      	movs	r0, #0
 800092a:	f001 fac9 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800092e:	499e      	ldr	r1, [pc, #632]	; (8000ba8 <OTM8009A_Init+0x358>)
 8000930:	2002      	movs	r0, #2
 8000932:	f001 fac5 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000936:	499d      	ldr	r1, [pc, #628]	; (8000bac <OTM8009A_Init+0x35c>)
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fac1 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800093e:	499c      	ldr	r1, [pc, #624]	; (8000bb0 <OTM8009A_Init+0x360>)
 8000940:	2000      	movs	r0, #0
 8000942:	f001 fabd 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000946:	499b      	ldr	r1, [pc, #620]	; (8000bb4 <OTM8009A_Init+0x364>)
 8000948:	2000      	movs	r0, #0
 800094a:	f001 fab9 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800094e:	499a      	ldr	r1, [pc, #616]	; (8000bb8 <OTM8009A_Init+0x368>)
 8000950:	2000      	movs	r0, #0
 8000952:	f001 fab5 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000956:	4999      	ldr	r1, [pc, #612]	; (8000bbc <OTM8009A_Init+0x36c>)
 8000958:	2000      	movs	r0, #0
 800095a:	f001 fab1 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800095e:	4998      	ldr	r1, [pc, #608]	; (8000bc0 <OTM8009A_Init+0x370>)
 8000960:	2000      	movs	r0, #0
 8000962:	f001 faad 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000966:	4989      	ldr	r1, [pc, #548]	; (8000b8c <OTM8009A_Init+0x33c>)
 8000968:	2000      	movs	r0, #0
 800096a:	f001 faa9 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800096e:	4995      	ldr	r1, [pc, #596]	; (8000bc4 <OTM8009A_Init+0x374>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 faa5 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000976:	4987      	ldr	r1, [pc, #540]	; (8000b94 <OTM8009A_Init+0x344>)
 8000978:	2000      	movs	r0, #0
 800097a:	f001 faa1 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800097e:	4992      	ldr	r1, [pc, #584]	; (8000bc8 <OTM8009A_Init+0x378>)
 8000980:	2000      	movs	r0, #0
 8000982:	f001 fa9d 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000986:	4991      	ldr	r1, [pc, #580]	; (8000bcc <OTM8009A_Init+0x37c>)
 8000988:	2000      	movs	r0, #0
 800098a:	f001 fa99 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800098e:	4990      	ldr	r1, [pc, #576]	; (8000bd0 <OTM8009A_Init+0x380>)
 8000990:	2002      	movs	r0, #2
 8000992:	f001 fa95 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000996:	4971      	ldr	r1, [pc, #452]	; (8000b5c <OTM8009A_Init+0x30c>)
 8000998:	2000      	movs	r0, #0
 800099a:	f001 fa91 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800099e:	498d      	ldr	r1, [pc, #564]	; (8000bd4 <OTM8009A_Init+0x384>)
 80009a0:	2006      	movs	r0, #6
 80009a2:	f001 fa8d 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009a6:	498c      	ldr	r1, [pc, #560]	; (8000bd8 <OTM8009A_Init+0x388>)
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 fa89 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80009ae:	498b      	ldr	r1, [pc, #556]	; (8000bdc <OTM8009A_Init+0x38c>)
 80009b0:	200e      	movs	r0, #14
 80009b2:	f001 fa85 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009b6:	498a      	ldr	r1, [pc, #552]	; (8000be0 <OTM8009A_Init+0x390>)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 fa81 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80009be:	4989      	ldr	r1, [pc, #548]	; (8000be4 <OTM8009A_Init+0x394>)
 80009c0:	200e      	movs	r0, #14
 80009c2:	f001 fa7d 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009c6:	4988      	ldr	r1, [pc, #544]	; (8000be8 <OTM8009A_Init+0x398>)
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 fa79 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80009ce:	4987      	ldr	r1, [pc, #540]	; (8000bec <OTM8009A_Init+0x39c>)
 80009d0:	200a      	movs	r0, #10
 80009d2:	f001 fa75 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80009d6:	4986      	ldr	r1, [pc, #536]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 fa71 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80009de:	4985      	ldr	r1, [pc, #532]	; (8000bf4 <OTM8009A_Init+0x3a4>)
 80009e0:	2000      	movs	r0, #0
 80009e2:	f001 fa6d 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009e6:	495d      	ldr	r1, [pc, #372]	; (8000b5c <OTM8009A_Init+0x30c>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 fa69 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80009ee:	4982      	ldr	r1, [pc, #520]	; (8000bf8 <OTM8009A_Init+0x3a8>)
 80009f0:	200a      	movs	r0, #10
 80009f2:	f001 fa65 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80009f6:	4981      	ldr	r1, [pc, #516]	; (8000bfc <OTM8009A_Init+0x3ac>)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 fa61 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80009fe:	4980      	ldr	r1, [pc, #512]	; (8000c00 <OTM8009A_Init+0x3b0>)
 8000a00:	200f      	movs	r0, #15
 8000a02:	f001 fa5d 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a06:	4974      	ldr	r1, [pc, #464]	; (8000bd8 <OTM8009A_Init+0x388>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 fa59 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000a0e:	497d      	ldr	r1, [pc, #500]	; (8000c04 <OTM8009A_Init+0x3b4>)
 8000a10:	200f      	movs	r0, #15
 8000a12:	f001 fa55 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a16:	4972      	ldr	r1, [pc, #456]	; (8000be0 <OTM8009A_Init+0x390>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 fa51 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000a1e:	497a      	ldr	r1, [pc, #488]	; (8000c08 <OTM8009A_Init+0x3b8>)
 8000a20:	200a      	movs	r0, #10
 8000a22:	f001 fa4d 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000a26:	4970      	ldr	r1, [pc, #448]	; (8000be8 <OTM8009A_Init+0x398>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 fa49 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000a2e:	4977      	ldr	r1, [pc, #476]	; (8000c0c <OTM8009A_Init+0x3bc>)
 8000a30:	200f      	movs	r0, #15
 8000a32:	f001 fa45 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a36:	496e      	ldr	r1, [pc, #440]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 fa41 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000a3e:	4974      	ldr	r1, [pc, #464]	; (8000c10 <OTM8009A_Init+0x3c0>)
 8000a40:	200f      	movs	r0, #15
 8000a42:	f001 fa3d 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000a46:	4973      	ldr	r1, [pc, #460]	; (8000c14 <OTM8009A_Init+0x3c4>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 fa39 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000a4e:	4972      	ldr	r1, [pc, #456]	; (8000c18 <OTM8009A_Init+0x3c8>)
 8000a50:	200a      	movs	r0, #10
 8000a52:	f001 fa35 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000a56:	4971      	ldr	r1, [pc, #452]	; (8000c1c <OTM8009A_Init+0x3cc>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 fa31 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000a5e:	4970      	ldr	r1, [pc, #448]	; (8000c20 <OTM8009A_Init+0x3d0>)
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 fa2d 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000a66:	493d      	ldr	r1, [pc, #244]	; (8000b5c <OTM8009A_Init+0x30c>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 fa29 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000a6e:	496d      	ldr	r1, [pc, #436]	; (8000c24 <OTM8009A_Init+0x3d4>)
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 fa25 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a76:	4961      	ldr	r1, [pc, #388]	; (8000bfc <OTM8009A_Init+0x3ac>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 fa21 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000a7e:	496a      	ldr	r1, [pc, #424]	; (8000c28 <OTM8009A_Init+0x3d8>)
 8000a80:	200f      	movs	r0, #15
 8000a82:	f001 fa1d 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a86:	4954      	ldr	r1, [pc, #336]	; (8000bd8 <OTM8009A_Init+0x388>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 fa19 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000a8e:	4967      	ldr	r1, [pc, #412]	; (8000c2c <OTM8009A_Init+0x3dc>)
 8000a90:	200f      	movs	r0, #15
 8000a92:	f001 fa15 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a96:	4952      	ldr	r1, [pc, #328]	; (8000be0 <OTM8009A_Init+0x390>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f001 fa11 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000a9e:	4964      	ldr	r1, [pc, #400]	; (8000c30 <OTM8009A_Init+0x3e0>)
 8000aa0:	200a      	movs	r0, #10
 8000aa2:	f001 fa0d 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000aa6:	4950      	ldr	r1, [pc, #320]	; (8000be8 <OTM8009A_Init+0x398>)
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 fa09 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000aae:	4961      	ldr	r1, [pc, #388]	; (8000c34 <OTM8009A_Init+0x3e4>)
 8000ab0:	200f      	movs	r0, #15
 8000ab2:	f001 fa05 	bl	8001ec0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000ab6:	494e      	ldr	r1, [pc, #312]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f001 fa01 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000abe:	495e      	ldr	r1, [pc, #376]	; (8000c38 <OTM8009A_Init+0x3e8>)
 8000ac0:	200f      	movs	r0, #15
 8000ac2:	f001 f9fd 	bl	8001ec0 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000ac6:	4931      	ldr	r1, [pc, #196]	; (8000b8c <OTM8009A_Init+0x33c>)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f001 f9f9 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000ace:	495b      	ldr	r1, [pc, #364]	; (8000c3c <OTM8009A_Init+0x3ec>)
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f001 f9f5 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000ad6:	495a      	ldr	r1, [pc, #360]	; (8000c40 <OTM8009A_Init+0x3f0>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f9f1 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000ade:	4959      	ldr	r1, [pc, #356]	; (8000c44 <OTM8009A_Init+0x3f4>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 f9ed 	bl	8001ec0 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000ae6:	4958      	ldr	r1, [pc, #352]	; (8000c48 <OTM8009A_Init+0x3f8>)
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f001 f9e9 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000aee:	4957      	ldr	r1, [pc, #348]	; (8000c4c <OTM8009A_Init+0x3fc>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 f9e5 	bl	8001ec0 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000af6:	4917      	ldr	r1, [pc, #92]	; (8000b54 <OTM8009A_Init+0x304>)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f9e1 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000afe:	4954      	ldr	r1, [pc, #336]	; (8000c50 <OTM8009A_Init+0x400>)
 8000b00:	2003      	movs	r0, #3
 8000b02:	f001 f9dd 	bl	8001ec0 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b06:	4913      	ldr	r1, [pc, #76]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f001 f9d9 	bl	8001ec0 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b0e:	4911      	ldr	r1, [pc, #68]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b10:	2000      	movs	r0, #0
 8000b12:	f001 f9d5 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000b16:	494f      	ldr	r1, [pc, #316]	; (8000c54 <OTM8009A_Init+0x404>)
 8000b18:	2010      	movs	r0, #16
 8000b1a:	f001 f9d1 	bl	8001ec0 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b1e:	490d      	ldr	r1, [pc, #52]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f9cd 	bl	8001ec0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000b26:	494c      	ldr	r1, [pc, #304]	; (8000c58 <OTM8009A_Init+0x408>)
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f001 f9c9 	bl	8001ec0 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000b2e:	494b      	ldr	r1, [pc, #300]	; (8000c5c <OTM8009A_Init+0x40c>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f001 f9c5 	bl	8001ec0 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000b36:	2078      	movs	r0, #120	; 0x78
 8000b38:	f000 fb42 	bl	80011c0 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 8090 	beq.w	8000c64 <OTM8009A_Init+0x414>
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d000      	beq.n	8000b4a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000b48:	e091      	b.n	8000c6e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000b4a:	4945      	ldr	r1, [pc, #276]	; (8000c60 <OTM8009A_Init+0x410>)
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f001 f9b7 	bl	8001ec0 <DSI_IO_WriteCmd>
    break;
 8000b52:	e08c      	b.n	8000c6e <OTM8009A_Init+0x41e>
 8000b54:	0800a0c8 	.word	0x0800a0c8
 8000b58:	08009f80 	.word	0x08009f80
 8000b5c:	0800a0cc 	.word	0x0800a0cc
 8000b60:	08009f84 	.word	0x08009f84
 8000b64:	0800a0d0 	.word	0x0800a0d0
 8000b68:	0800a0d4 	.word	0x0800a0d4
 8000b6c:	0800a0d8 	.word	0x0800a0d8
 8000b70:	0800a0dc 	.word	0x0800a0dc
 8000b74:	0800a0e0 	.word	0x0800a0e0
 8000b78:	0800a0e4 	.word	0x0800a0e4
 8000b7c:	0800a0e8 	.word	0x0800a0e8
 8000b80:	0800a0ec 	.word	0x0800a0ec
 8000b84:	0800a0f0 	.word	0x0800a0f0
 8000b88:	0800a0f4 	.word	0x0800a0f4
 8000b8c:	0800a0f8 	.word	0x0800a0f8
 8000b90:	0800a0fc 	.word	0x0800a0fc
 8000b94:	0800a100 	.word	0x0800a100
 8000b98:	0800a104 	.word	0x0800a104
 8000b9c:	0800a108 	.word	0x0800a108
 8000ba0:	0800a10c 	.word	0x0800a10c
 8000ba4:	0800a110 	.word	0x0800a110
 8000ba8:	08009fb0 	.word	0x08009fb0
 8000bac:	0800a114 	.word	0x0800a114
 8000bb0:	0800a118 	.word	0x0800a118
 8000bb4:	0800a11c 	.word	0x0800a11c
 8000bb8:	0800a120 	.word	0x0800a120
 8000bbc:	0800a124 	.word	0x0800a124
 8000bc0:	0800a128 	.word	0x0800a128
 8000bc4:	0800a12c 	.word	0x0800a12c
 8000bc8:	0800a130 	.word	0x0800a130
 8000bcc:	0800a134 	.word	0x0800a134
 8000bd0:	08009fb4 	.word	0x08009fb4
 8000bd4:	08009fb8 	.word	0x08009fb8
 8000bd8:	0800a138 	.word	0x0800a138
 8000bdc:	08009fc0 	.word	0x08009fc0
 8000be0:	0800a13c 	.word	0x0800a13c
 8000be4:	08009fd0 	.word	0x08009fd0
 8000be8:	0800a140 	.word	0x0800a140
 8000bec:	08009fe0 	.word	0x08009fe0
 8000bf0:	0800a144 	.word	0x0800a144
 8000bf4:	0800a17c 	.word	0x0800a17c
 8000bf8:	08009fec 	.word	0x08009fec
 8000bfc:	0800a148 	.word	0x0800a148
 8000c00:	08009ff8 	.word	0x08009ff8
 8000c04:	0800a008 	.word	0x0800a008
 8000c08:	0800a018 	.word	0x0800a018
 8000c0c:	0800a024 	.word	0x0800a024
 8000c10:	0800a034 	.word	0x0800a034
 8000c14:	0800a14c 	.word	0x0800a14c
 8000c18:	0800a044 	.word	0x0800a044
 8000c1c:	0800a150 	.word	0x0800a150
 8000c20:	0800a050 	.word	0x0800a050
 8000c24:	0800a05c 	.word	0x0800a05c
 8000c28:	0800a068 	.word	0x0800a068
 8000c2c:	0800a078 	.word	0x0800a078
 8000c30:	0800a088 	.word	0x0800a088
 8000c34:	0800a094 	.word	0x0800a094
 8000c38:	0800a0a4 	.word	0x0800a0a4
 8000c3c:	0800a180 	.word	0x0800a180
 8000c40:	0800a184 	.word	0x0800a184
 8000c44:	0800a188 	.word	0x0800a188
 8000c48:	0800a18c 	.word	0x0800a18c
 8000c4c:	0800a190 	.word	0x0800a190
 8000c50:	0800a0b4 	.word	0x0800a0b4
 8000c54:	08009f88 	.word	0x08009f88
 8000c58:	08009f9c 	.word	0x08009f9c
 8000c5c:	0800a154 	.word	0x0800a154
 8000c60:	0800a158 	.word	0x0800a158
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000c64:	491a      	ldr	r1, [pc, #104]	; (8000cd0 <OTM8009A_Init+0x480>)
 8000c66:	2000      	movs	r0, #0
 8000c68:	f001 f92a 	bl	8001ec0 <DSI_IO_WriteCmd>
    break;
 8000c6c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d10b      	bne.n	8000c8c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000c74:	4917      	ldr	r1, [pc, #92]	; (8000cd4 <OTM8009A_Init+0x484>)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f001 f922 	bl	8001ec0 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000c7c:	4916      	ldr	r1, [pc, #88]	; (8000cd8 <OTM8009A_Init+0x488>)
 8000c7e:	2004      	movs	r0, #4
 8000c80:	f001 f91e 	bl	8001ec0 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000c84:	4915      	ldr	r1, [pc, #84]	; (8000cdc <OTM8009A_Init+0x48c>)
 8000c86:	2004      	movs	r0, #4
 8000c88:	f001 f91a 	bl	8001ec0 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000c8c:	4914      	ldr	r1, [pc, #80]	; (8000ce0 <OTM8009A_Init+0x490>)
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f001 f916 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000c94:	4913      	ldr	r1, [pc, #76]	; (8000ce4 <OTM8009A_Init+0x494>)
 8000c96:	2000      	movs	r0, #0
 8000c98:	f001 f912 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000c9c:	4912      	ldr	r1, [pc, #72]	; (8000ce8 <OTM8009A_Init+0x498>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f001 f90e 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000ca4:	4911      	ldr	r1, [pc, #68]	; (8000cec <OTM8009A_Init+0x49c>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f001 f90a 	bl	8001ec0 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000cac:	4910      	ldr	r1, [pc, #64]	; (8000cf0 <OTM8009A_Init+0x4a0>)
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 f906 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000cb4:	490f      	ldr	r1, [pc, #60]	; (8000cf4 <OTM8009A_Init+0x4a4>)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f001 f902 	bl	8001ec0 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000cbc:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <OTM8009A_Init+0x4a8>)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 f8fe 	bl	8001ec0 <DSI_IO_WriteCmd>

  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	0800a15c 	.word	0x0800a15c
 8000cd4:	0800a160 	.word	0x0800a160
 8000cd8:	0800a0b8 	.word	0x0800a0b8
 8000cdc:	0800a0c0 	.word	0x0800a0c0
 8000ce0:	0800a164 	.word	0x0800a164
 8000ce4:	0800a168 	.word	0x0800a168
 8000ce8:	0800a16c 	.word	0x0800a16c
 8000cec:	0800a170 	.word	0x0800a170
 8000cf0:	0800a174 	.word	0x0800a174
 8000cf4:	0800a0c8 	.word	0x0800a0c8
 8000cf8:	0800a178 	.word	0x0800a178

08000cfc <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <BSP_LED_Init+0x54>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a11      	ldr	r2, [pc, #68]	; (8000d50 <BSP_LED_Init+0x54>)
 8000d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <BSP_LED_Init+0x54>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <BSP_LED_Init+0x58>)
 8000d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d26:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <BSP_LED_Init+0x5c>)
 8000d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3c:	f107 020c 	add.w	r2, r7, #12
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f004 f91a 	bl	8004f7c <HAL_GPIO_Init>

}
 8000d48:	bf00      	nop
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	20000028 	.word	0x20000028
 8000d58:	20000030 	.word	0x20000030

08000d5c <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <BSP_LED_Toggle+0x2c>)
 8000d6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <BSP_LED_Toggle+0x30>)
 8000d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f004 fbcc 	bl	8005516 <HAL_GPIO_TogglePin>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000030 	.word	0x20000030
 8000d8c:	20000028 	.word	0x20000028

08000d90 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	460a      	mov	r2, r1
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  BUTTON_GPIO_CLK_ENABLE();
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <BSP_PB_Init+0x9c>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <BSP_PB_Init+0x9c>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <BSP_PB_Init+0x9c>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]

  if(Button_Mode == BUTTON_MODE_GPIO)
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d111      	bne.n	8000de2 <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <BSP_PB_Init+0xa0>)
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	f107 020c 	add.w	r2, r7, #12
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f004 f8cd 	bl	8004f7c <HAL_GPIO_Init>
  }

  if(Button_Mode == BUTTON_MODE_EXTI)
 8000de2:	79bb      	ldrb	r3, [r7, #6]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d11d      	bne.n	8000e24 <BSP_PB_Init+0x94>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000de8:	2301      	movs	r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <BSP_PB_Init+0xa4>)
 8000df6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <BSP_PB_Init+0xa0>)
 8000dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e00:	f107 020c 	add.w	r2, r7, #12
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f004 f8b8 	bl	8004f7c <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000e0c:	2306      	movs	r3, #6
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	2200      	movs	r2, #0
 8000e12:	210f      	movs	r1, #15
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 fba6 	bl	8003566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000e1a:	2306      	movs	r3, #6
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f002 fbbd 	bl	800359e <HAL_NVIC_EnableIRQ>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	20000038 	.word	0x20000038
 8000e34:	10110000 	.word	0x10110000

08000e38 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a58      	ldr	r2, [pc, #352]	; (8000fa4 <I2Cx_MspInit+0x16c>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d15b      	bne.n	8000f00 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000e48:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	4a56      	ldr	r2, [pc, #344]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000e4e:	f043 0308 	orr.w	r3, r3, #8
 8000e52:	6313      	str	r3, [r2, #48]	; 0x30
 8000e54:	4b54      	ldr	r3, [pc, #336]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	f003 0308 	and.w	r3, r3, #8
 8000e5c:	61bb      	str	r3, [r7, #24]
 8000e5e:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000e60:	4b51      	ldr	r3, [pc, #324]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	4a50      	ldr	r2, [pc, #320]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000e66:	f043 0302 	orr.w	r3, r3, #2
 8000e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6c:	4b4e      	ldr	r3, [pc, #312]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e7e:	2312      	movs	r3, #18
 8000e80:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e86:	2302      	movs	r3, #2
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	4619      	mov	r1, r3
 8000e94:	4845      	ldr	r0, [pc, #276]	; (8000fac <I2Cx_MspInit+0x174>)
 8000e96:	f004 f871 	bl	8004f7c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000e9e:	230b      	movs	r3, #11
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4841      	ldr	r0, [pc, #260]	; (8000fb0 <I2Cx_MspInit+0x178>)
 8000eaa:	f004 f867 	bl	8004f7c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000eae:	4b3e      	ldr	r3, [pc, #248]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a3d      	ldr	r2, [pc, #244]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000ec8:	6a1b      	ldr	r3, [r3, #32]
 8000eca:	4a37      	ldr	r2, [pc, #220]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000ecc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ed0:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000ed2:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000ed4:	6a1b      	ldr	r3, [r3, #32]
 8000ed6:	4a34      	ldr	r2, [pc, #208]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000edc:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	210f      	movs	r1, #15
 8000ee2:	205f      	movs	r0, #95	; 0x5f
 8000ee4:	f002 fb3f 	bl	8003566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000ee8:	205f      	movs	r0, #95	; 0x5f
 8000eea:	f002 fb58 	bl	800359e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	210f      	movs	r1, #15
 8000ef2:	2060      	movs	r0, #96	; 0x60
 8000ef4:	f002 fb37 	bl	8003566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000ef8:	2060      	movs	r0, #96	; 0x60
 8000efa:	f002 fb50 	bl	800359e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000efe:	e04d      	b.n	8000f9c <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000f00:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	4a28      	ldr	r2, [pc, #160]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0c:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f1e:	2312      	movs	r3, #18
 8000f20:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000f26:	2302      	movs	r3, #2
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	481e      	ldr	r0, [pc, #120]	; (8000fb0 <I2Cx_MspInit+0x178>)
 8000f36:	f004 f821 	bl	8004f7c <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	481a      	ldr	r0, [pc, #104]	; (8000fb0 <I2Cx_MspInit+0x178>)
 8000f48:	f004 f818 	bl	8004f7c <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000f52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f56:	6413      	str	r3, [r2, #64]	; 0x40
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000f6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f6e:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000f70:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <I2Cx_MspInit+0x170>)
 8000f76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f7a:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	210f      	movs	r1, #15
 8000f80:	201f      	movs	r0, #31
 8000f82:	f002 faf0 	bl	8003566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000f86:	201f      	movs	r0, #31
 8000f88:	f002 fb09 	bl	800359e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	210f      	movs	r1, #15
 8000f90:	2020      	movs	r0, #32
 8000f92:	f002 fae8 	bl	8003566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000f96:	2020      	movs	r0, #32
 8000f98:	f002 fb01 	bl	800359e <HAL_NVIC_EnableIRQ>
}
 8000f9c:	bf00      	nop
 8000f9e:	3730      	adds	r7, #48	; 0x30
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200000ec 	.word	0x200000ec
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020c00 	.word	0x40020c00
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f004 fddf 	bl	8005b80 <HAL_I2C_GetState>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d125      	bne.n	8001014 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a14      	ldr	r2, [pc, #80]	; (800101c <I2Cx_Init+0x68>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d103      	bne.n	8000fd8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a13      	ldr	r2, [pc, #76]	; (8001020 <I2Cx_Init+0x6c>)
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	e002      	b.n	8000fde <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <I2Cx_Init+0x70>)
 8000fdc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a11      	ldr	r2, [pc, #68]	; (8001028 <I2Cx_Init+0x74>)
 8000fe2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff15 	bl	8000e38 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f004 fab4 	bl	800557c <HAL_I2C_Init>
  }
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200000ec 	.word	0x200000ec
 8001020:	40006000 	.word	0x40006000
 8001024:	40005400 	.word	0x40005400
 8001028:	40912732 	.word	0x40912732

0800102c <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af04      	add	r7, sp, #16
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	4608      	mov	r0, r1
 8001036:	4611      	mov	r1, r2
 8001038:	461a      	mov	r2, r3
 800103a:	4603      	mov	r3, r0
 800103c:	72fb      	strb	r3, [r7, #11]
 800103e:	460b      	mov	r3, r1
 8001040:	813b      	strh	r3, [r7, #8]
 8001042:	4613      	mov	r3, r2
 8001044:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800104a:	7afb      	ldrb	r3, [r7, #11]
 800104c:	b299      	uxth	r1, r3
 800104e:	88f8      	ldrh	r0, [r7, #6]
 8001050:	893a      	ldrh	r2, [r7, #8]
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	4603      	mov	r3, r0
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f004 fc72 	bl	800594c <HAL_I2C_Mem_Read>
 8001068:	4603      	mov	r3, r0
 800106a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d004      	beq.n	800107c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001072:	7afb      	ldrb	r3, [r7, #11]
 8001074:	4619      	mov	r1, r3
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f000 f832 	bl	80010e0 <I2Cx_Error>
  }
  return status;
 800107c:	7dfb      	ldrb	r3, [r7, #23]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b08a      	sub	sp, #40	; 0x28
 800108a:	af04      	add	r7, sp, #16
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	4608      	mov	r0, r1
 8001090:	4611      	mov	r1, r2
 8001092:	461a      	mov	r2, r3
 8001094:	4603      	mov	r3, r0
 8001096:	72fb      	strb	r3, [r7, #11]
 8001098:	460b      	mov	r3, r1
 800109a:	813b      	strh	r3, [r7, #8]
 800109c:	4613      	mov	r3, r2
 800109e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80010a4:	7afb      	ldrb	r3, [r7, #11]
 80010a6:	b299      	uxth	r1, r3
 80010a8:	88f8      	ldrh	r0, [r7, #6]
 80010aa:	893a      	ldrh	r2, [r7, #8]
 80010ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	4603      	mov	r3, r0
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f004 fb31 	bl	8005724 <HAL_I2C_Mem_Write>
 80010c2:	4603      	mov	r3, r0
 80010c4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d004      	beq.n	80010d6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80010cc:	7afb      	ldrb	r3, [r7, #11]
 80010ce:	4619      	mov	r1, r3
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f000 f805 	bl	80010e0 <I2Cx_Error>
  }
  return status;
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f004 fad5 	bl	800569c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff5e 	bl	8000fb4 <I2Cx_Init>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <TS_IO_Init+0x10>)
 8001106:	f7ff ff55 	bl	8000fb4 <I2Cx_Init>
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200000ec 	.word	0x200000ec

08001114 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af02      	add	r7, sp, #8
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
 800111e:	460b      	mov	r3, r1
 8001120:	71bb      	strb	r3, [r7, #6]
 8001122:	4613      	mov	r3, r2
 8001124:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	b29a      	uxth	r2, r3
 800112a:	79f9      	ldrb	r1, [r7, #7]
 800112c:	2301      	movs	r3, #1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	1d7b      	adds	r3, r7, #5
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	4803      	ldr	r0, [pc, #12]	; (8001144 <TS_IO_Write+0x30>)
 8001138:	f7ff ffa5 	bl	8001086 <I2Cx_WriteMultiple>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200000ec 	.word	0x200000ec

08001148 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	b29a      	uxth	r2, r3
 8001160:	79f9      	ldrb	r1, [r7, #7]
 8001162:	2301      	movs	r3, #1
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	f107 030f 	add.w	r3, r7, #15
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	4804      	ldr	r0, [pc, #16]	; (8001180 <TS_IO_Read+0x38>)
 8001170:	f7ff ff5c 	bl	800102c <I2Cx_ReadMultiple>

  return read_value;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000ec 	.word	0x200000ec

08001184 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af02      	add	r7, sp, #8
 800118a:	603a      	str	r2, [r7, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
 8001192:	460b      	mov	r3, r1
 8001194:	71bb      	strb	r3, [r7, #6]
 8001196:	4613      	mov	r3, r2
 8001198:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	b29a      	uxth	r2, r3
 800119e:	79f9      	ldrb	r1, [r7, #7]
 80011a0:	88bb      	ldrh	r3, [r7, #4]
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <TS_IO_ReadMultiple+0x38>)
 80011ac:	f7ff ff3e 	bl	800102c <I2Cx_ReadMultiple>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29b      	uxth	r3, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200000ec 	.word	0x200000ec

080011c0 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f001 fc1d 	bl	8002a08 <HAL_Delay>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80011da:	2001      	movs	r0, #1
 80011dc:	f000 f804 	bl	80011e8 <BSP_LCD_InitEx>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b090      	sub	sp, #64	; 0x40
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80011f2:	f646 3325 	movw	r3, #27429	; 0x6b25
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8001200:	f000 f936 	bl	8001470 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8001204:	f000 fe86 	bl	8001f14 <LCD_IO_GetID>
 8001208:	4603      	mov	r3, r0
 800120a:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 800120c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800120e:	2b11      	cmp	r3, #17
 8001210:	d001      	beq.n	8001216 <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8001212:	2301      	movs	r3, #1
 8001214:	e113      	b.n	800143e <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8001216:	f000 fe85 	bl	8001f24 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 800121a:	4b8b      	ldr	r3, [pc, #556]	; (8001448 <BSP_LCD_InitEx+0x260>)
 800121c:	4a8b      	ldr	r2, [pc, #556]	; (800144c <BSP_LCD_InitEx+0x264>)
 800121e:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8001220:	4889      	ldr	r0, [pc, #548]	; (8001448 <BSP_LCD_InitEx+0x260>)
 8001222:	f002 ff9d 	bl	8004160 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8001226:	2364      	movs	r3, #100	; 0x64
 8001228:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800122a:	2305      	movs	r3, #5
 800122c:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8001232:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001236:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001238:	4b83      	ldr	r3, [pc, #524]	; (8001448 <BSP_LCD_InitEx+0x260>)
 800123a:	2201      	movs	r2, #1
 800123c:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 800123e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	4a83      	ldr	r2, [pc, #524]	; (8001450 <BSP_LCD_InitEx+0x268>)
 8001244:	fba2 2303 	umull	r2, r3, r2, r3
 8001248:	0a9b      	lsrs	r3, r3, #10
 800124a:	4a7f      	ldr	r2, [pc, #508]	; (8001448 <BSP_LCD_InitEx+0x260>)
 800124c:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	4619      	mov	r1, r3
 8001254:	487c      	ldr	r0, [pc, #496]	; (8001448 <BSP_LCD_InitEx+0x260>)
 8001256:	f002 fe69 	bl	8003f2c <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d108      	bne.n	8001272 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001260:	4b7c      	ldr	r3, [pc, #496]	; (8001454 <BSP_LCD_InitEx+0x26c>)
 8001262:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001266:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8001268:	4b7b      	ldr	r3, [pc, #492]	; (8001458 <BSP_LCD_InitEx+0x270>)
 800126a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	e007      	b.n	8001282 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8001272:	4b78      	ldr	r3, [pc, #480]	; (8001454 <BSP_LCD_InitEx+0x26c>)
 8001274:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001278:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800127a:	4b77      	ldr	r3, [pc, #476]	; (8001458 <BSP_LCD_InitEx+0x270>)
 800127c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001280:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8001282:	4b74      	ldr	r3, [pc, #464]	; (8001454 <BSP_LCD_InitEx+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 8001288:	4b73      	ldr	r3, [pc, #460]	; (8001458 <BSP_LCD_InitEx+0x270>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 800128e:	2301      	movs	r3, #1
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8001292:	230f      	movs	r3, #15
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 8001296:	2310      	movs	r3, #16
 8001298:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800129a:	2302      	movs	r3, #2
 800129c:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 800129e:	2322      	movs	r3, #34	; 0x22
 80012a0:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 80012a2:	2322      	movs	r3, #34	; 0x22
 80012a4:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80012a6:	4b6d      	ldr	r3, [pc, #436]	; (800145c <BSP_LCD_InitEx+0x274>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80012ac:	4b6b      	ldr	r3, [pc, #428]	; (800145c <BSP_LCD_InitEx+0x274>)
 80012ae:	2205      	movs	r2, #5
 80012b0:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80012b2:	4b6a      	ldr	r3, [pc, #424]	; (800145c <BSP_LCD_InitEx+0x274>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80012b8:	4b68      	ldr	r3, [pc, #416]	; (800145c <BSP_LCD_InitEx+0x274>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80012be:	4b67      	ldr	r3, [pc, #412]	; (800145c <BSP_LCD_InitEx+0x274>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80012c4:	4b65      	ldr	r3, [pc, #404]	; (800145c <BSP_LCD_InitEx+0x274>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80012ca:	4b64      	ldr	r3, [pc, #400]	; (800145c <BSP_LCD_InitEx+0x274>)
 80012cc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80012d0:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80012d2:	4b62      	ldr	r3, [pc, #392]	; (800145c <BSP_LCD_InitEx+0x274>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80012d8:	4a60      	ldr	r2, [pc, #384]	; (800145c <BSP_LCD_InitEx+0x274>)
 80012da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012dc:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012e2:	fb02 f203 	mul.w	r2, r2, r3
 80012e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ec:	4a5b      	ldr	r2, [pc, #364]	; (800145c <BSP_LCD_InitEx+0x274>)
 80012ee:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012f4:	fb02 f203 	mul.w	r2, r2, r3
 80012f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4a57      	ldr	r2, [pc, #348]	; (800145c <BSP_LCD_InitEx+0x274>)
 8001300:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8001302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	441a      	add	r2, r3
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	441a      	add	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	4413      	add	r3, r2
 8001310:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001312:	fb02 f203 	mul.w	r2, r2, r3
 8001316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001318:	fbb2 f3f3 	udiv	r3, r2, r3
 800131c:	4a4f      	ldr	r2, [pc, #316]	; (800145c <BSP_LCD_InitEx+0x274>)
 800131e:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8001320:	4a4e      	ldr	r2, [pc, #312]	; (800145c <BSP_LCD_InitEx+0x274>)
 8001322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001324:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8001326:	4a4d      	ldr	r2, [pc, #308]	; (800145c <BSP_LCD_InitEx+0x274>)
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 800132c:	4a4b      	ldr	r2, [pc, #300]	; (800145c <BSP_LCD_InitEx+0x274>)
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8001332:	4a4a      	ldr	r2, [pc, #296]	; (800145c <BSP_LCD_InitEx+0x274>)
 8001334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001336:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8001338:	4b48      	ldr	r3, [pc, #288]	; (800145c <BSP_LCD_InitEx+0x274>)
 800133a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800133e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001340:	4b46      	ldr	r3, [pc, #280]	; (800145c <BSP_LCD_InitEx+0x274>)
 8001342:	2210      	movs	r2, #16
 8001344:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8001346:	4b45      	ldr	r3, [pc, #276]	; (800145c <BSP_LCD_InitEx+0x274>)
 8001348:	2200      	movs	r2, #0
 800134a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 800134c:	4b43      	ldr	r3, [pc, #268]	; (800145c <BSP_LCD_InitEx+0x274>)
 800134e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001352:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001354:	4b41      	ldr	r3, [pc, #260]	; (800145c <BSP_LCD_InitEx+0x274>)
 8001356:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800135a:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 800135c:	4b3f      	ldr	r3, [pc, #252]	; (800145c <BSP_LCD_InitEx+0x274>)
 800135e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001362:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001364:	4b3d      	ldr	r3, [pc, #244]	; (800145c <BSP_LCD_InitEx+0x274>)
 8001366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800136a:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 800136c:	4b3b      	ldr	r3, [pc, #236]	; (800145c <BSP_LCD_InitEx+0x274>)
 800136e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001372:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001374:	4b39      	ldr	r3, [pc, #228]	; (800145c <BSP_LCD_InitEx+0x274>)
 8001376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 800137c:	4937      	ldr	r1, [pc, #220]	; (800145c <BSP_LCD_InitEx+0x274>)
 800137e:	4832      	ldr	r0, [pc, #200]	; (8001448 <BSP_LCD_InitEx+0x260>)
 8001380:	f003 f846 	bl	8004410 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	3b01      	subs	r3, #1
 8001388:	4a35      	ldr	r2, [pc, #212]	; (8001460 <BSP_LCD_InitEx+0x278>)
 800138a:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4413      	add	r3, r2
 8001392:	3b01      	subs	r3, #1
 8001394:	4a32      	ldr	r2, [pc, #200]	; (8001460 <BSP_LCD_InitEx+0x278>)
 8001396:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8001398:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <BSP_LCD_InitEx+0x26c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	441a      	add	r2, r3
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	4413      	add	r3, r2
 80013a4:	3b01      	subs	r3, #1
 80013a6:	4a2e      	ldr	r2, [pc, #184]	; (8001460 <BSP_LCD_InitEx+0x278>)
 80013a8:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <BSP_LCD_InitEx+0x26c>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	441a      	add	r2, r3
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	441a      	add	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	4413      	add	r3, r2
 80013ba:	3b01      	subs	r3, #1
 80013bc:	4a28      	ldr	r2, [pc, #160]	; (8001460 <BSP_LCD_InitEx+0x278>)
 80013be:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80013c0:	4b24      	ldr	r3, [pc, #144]	; (8001454 <BSP_LCD_InitEx+0x26c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a26      	ldr	r2, [pc, #152]	; (8001460 <BSP_LCD_InitEx+0x278>)
 80013c6:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <BSP_LCD_InitEx+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a24      	ldr	r2, [pc, #144]	; (8001460 <BSP_LCD_InitEx+0x278>)
 80013ce:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <BSP_LCD_InitEx+0x27c>)
 80013d2:	2208      	movs	r2, #8
 80013d4:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80013d6:	4b23      	ldr	r3, [pc, #140]	; (8001464 <BSP_LCD_InitEx+0x27c>)
 80013d8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80013dc:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <BSP_LCD_InitEx+0x27c>)
 80013e0:	2207      	movs	r2, #7
 80013e2:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <BSP_LCD_InitEx+0x27c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80013ea:	481e      	ldr	r0, [pc, #120]	; (8001464 <BSP_LCD_InitEx+0x27c>)
 80013ec:	f005 fd46 	bl	8006e7c <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <BSP_LCD_InitEx+0x278>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <BSP_LCD_InitEx+0x278>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <BSP_LCD_InitEx+0x278>)
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <BSP_LCD_InitEx+0x278>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <BSP_LCD_InitEx+0x278>)
 8001410:	4a15      	ldr	r2, [pc, #84]	; (8001468 <BSP_LCD_InitEx+0x280>)
 8001412:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8001414:	4911      	ldr	r1, [pc, #68]	; (800145c <BSP_LCD_InitEx+0x274>)
 8001416:	4812      	ldr	r0, [pc, #72]	; (8001460 <BSP_LCD_InitEx+0x278>)
 8001418:	f005 f884 	bl	8006524 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 800141c:	4810      	ldr	r0, [pc, #64]	; (8001460 <BSP_LCD_InitEx+0x278>)
 800141e:	f004 fdd9 	bl	8005fd4 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8001422:	4809      	ldr	r0, [pc, #36]	; (8001448 <BSP_LCD_InitEx+0x260>)
 8001424:	f003 fc86 	bl	8004d34 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001428:	f000 fefc 	bl	8002224 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800142c:	480f      	ldr	r0, [pc, #60]	; (800146c <BSP_LCD_InitEx+0x284>)
 800142e:	f000 f8e7 	bl	8001600 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4619      	mov	r1, r3
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff fa0a 	bl	8000850 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3740      	adds	r7, #64	; 0x40
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000050c 	.word	0x2000050c
 800144c:	40016c00 	.word	0x40016c00
 8001450:	43215e57 	.word	0x43215e57
 8001454:	2000004c 	.word	0x2000004c
 8001458:	20000050 	.word	0x20000050
 800145c:	20000138 	.word	0x20000138
 8001460:	20000464 	.word	0x20000464
 8001464:	200001c0 	.word	0x200001c0
 8001468:	40016800 	.word	0x40016800
 800146c:	2000003c 	.word	0x2000003c

08001470 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <BSP_LCD_Reset+0x68>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <BSP_LCD_Reset+0x68>)
 800147c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <BSP_LCD_Reset+0x68>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 800148e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001492:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8001498:	2301      	movs	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <BSP_LCD_Reset+0x6c>)
 80014a6:	f003 fd69 	bl	8004f7c <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b0:	480a      	ldr	r0, [pc, #40]	; (80014dc <BSP_LCD_Reset+0x6c>)
 80014b2:	f004 f817 	bl	80054e4 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 80014b6:	2014      	movs	r0, #20
 80014b8:	f001 faa6 	bl	8002a08 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <BSP_LCD_Reset+0x6c>)
 80014c4:	f004 f80e 	bl	80054e4 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80014c8:	200a      	movs	r0, #10
 80014ca:	f001 fa9d 	bl	8002a08 <HAL_Delay>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40022400 	.word	0x40022400

080014e0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <BSP_LCD_GetXSize+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	2000004c 	.word	0x2000004c

080014f8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <BSP_LCD_GetYSize+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000050 	.word	0x20000050

08001510 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b090      	sub	sp, #64	; 0x40
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001520:	f7ff ffde 	bl	80014e0 <BSP_LCD_GetXSize>
 8001524:	4603      	mov	r3, r0
 8001526:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800152c:	f7ff ffe4 	bl	80014f8 <BSP_LCD_GetYSize>
 8001530:	4603      	mov	r3, r0
 8001532:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800153c:	23ff      	movs	r3, #255	; 0xff
 800153e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001556:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800155c:	2307      	movs	r3, #7
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001560:	f7ff ffbe 	bl	80014e0 <BSP_LCD_GetXSize>
 8001564:	4603      	mov	r3, r0
 8001566:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001568:	f7ff ffc6 	bl	80014f8 <BSP_LCD_GetYSize>
 800156c:	4603      	mov	r3, r0
 800156e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	4619      	mov	r1, r3
 8001578:	4812      	ldr	r0, [pc, #72]	; (80015c4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800157a:	f004 fdfb 	bl	8006174 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800157e:	88fa      	ldrh	r2, [r7, #6]
 8001580:	4911      	ldr	r1, [pc, #68]	; (80015c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	3304      	adds	r3, #4
 800158e:	f04f 32ff 	mov.w	r2, #4294967295
 8001592:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001594:	88fa      	ldrh	r2, [r7, #6]
 8001596:	490c      	ldr	r1, [pc, #48]	; (80015c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	3308      	adds	r3, #8
 80015a4:	4a09      	ldr	r2, [pc, #36]	; (80015cc <BSP_LCD_LayerDefaultInit+0xbc>)
 80015a6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80015a8:	88fa      	ldrh	r2, [r7, #6]
 80015aa:	4907      	ldr	r1, [pc, #28]	; (80015c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80015ba:	601a      	str	r2, [r3, #0]
}
 80015bc:	bf00      	nop
 80015be:	3740      	adds	r7, #64	; 0x40
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000464 	.word	0x20000464
 80015c8:	200001a8 	.word	0x200001a8
 80015cc:	2000003c 	.word	0x2000003c

080015d0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <BSP_LCD_SetTextColor+0x28>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4907      	ldr	r1, [pc, #28]	; (80015fc <BSP_LCD_SetTextColor+0x2c>)
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	601a      	str	r2, [r3, #0]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	200001a4 	.word	0x200001a4
 80015fc:	200001a8 	.word	0x200001a8

08001600 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <BSP_LCD_SetFont+0x2c>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4908      	ldr	r1, [pc, #32]	; (8001630 <BSP_LCD_SetFont+0x30>)
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	3308      	adds	r3, #8
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	601a      	str	r2, [r3, #0]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	200001a4 	.word	0x200001a4
 8001630:	200001a8 	.word	0x200001a8

08001634 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <BSP_LCD_GetFont+0x24>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4907      	ldr	r1, [pc, #28]	; (800165c <BSP_LCD_GetFont+0x28>)
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	3308      	adds	r3, #8
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	200001a4 	.word	0x200001a4
 800165c:	200001a8 	.word	0x200001a8

08001660 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001662:	b085      	sub	sp, #20
 8001664:	af02      	add	r7, sp, #8
 8001666:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <BSP_LCD_Clear+0x48>)
 800166a:	681c      	ldr	r4, [r3, #0]
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <BSP_LCD_Clear+0x48>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <BSP_LCD_Clear+0x4c>)
 8001672:	2134      	movs	r1, #52	; 0x34
 8001674:	fb01 f303 	mul.w	r3, r1, r3
 8001678:	4413      	add	r3, r2
 800167a:	335c      	adds	r3, #92	; 0x5c
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	461d      	mov	r5, r3
 8001680:	f7ff ff2e 	bl	80014e0 <BSP_LCD_GetXSize>
 8001684:	4606      	mov	r6, r0
 8001686:	f7ff ff37 	bl	80014f8 <BSP_LCD_GetYSize>
 800168a:	4602      	mov	r2, r0
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	2300      	movs	r3, #0
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4613      	mov	r3, r2
 8001696:	4632      	mov	r2, r6
 8001698:	4629      	mov	r1, r5
 800169a:	4620      	mov	r0, r4
 800169c:	f000 fd8a 	bl	80021b4 <LL_FillBuffer>
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a8:	200001a4 	.word	0x200001a4
 80016ac:	20000464 	.word	0x20000464

080016b0 <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line in currently active layer.
  * @param  Line: Line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <BSP_LCD_ClearStringLine+0xc0>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	492d      	ldr	r1, [pc, #180]	; (8001774 <BSP_LCD_ClearStringLine+0xc4>)
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 80016cc:	4b28      	ldr	r3, [pc, #160]	; (8001770 <BSP_LCD_ClearStringLine+0xc0>)
 80016ce:	6819      	ldr	r1, [r3, #0]
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <BSP_LCD_ClearStringLine+0xc0>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4827      	ldr	r0, [pc, #156]	; (8001774 <BSP_LCD_ClearStringLine+0xc4>)
 80016d6:	460b      	mov	r3, r1
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	440b      	add	r3, r1
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4403      	add	r3, r0
 80016e0:	3304      	adds	r3, #4
 80016e2:	6819      	ldr	r1, [r3, #0]
 80016e4:	4823      	ldr	r0, [pc, #140]	; (8001774 <BSP_LCD_ClearStringLine+0xc4>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4403      	add	r3, r0
 80016f0:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <BSP_LCD_ClearStringLine+0xc0>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	491f      	ldr	r1, [pc, #124]	; (8001774 <BSP_LCD_ClearStringLine+0xc4>)
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	3308      	adds	r3, #8
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	88da      	ldrh	r2, [r3, #6]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	b29b      	uxth	r3, r3
 800170c:	fb12 f303 	smulbb	r3, r2, r3
 8001710:	b29c      	uxth	r4, r3
 8001712:	f7ff fee5 	bl	80014e0 <BSP_LCD_GetXSize>
 8001716:	4603      	mov	r3, r0
 8001718:	b298      	uxth	r0, r3
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <BSP_LCD_ClearStringLine+0xc0>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4915      	ldr	r1, [pc, #84]	; (8001774 <BSP_LCD_ClearStringLine+0xc4>)
 8001720:	4613      	mov	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	3308      	adds	r3, #8
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	88db      	ldrh	r3, [r3, #6]
 8001730:	4602      	mov	r2, r0
 8001732:	4621      	mov	r1, r4
 8001734:	2000      	movs	r0, #0
 8001736:	f000 fac9 	bl	8001ccc <BSP_LCD_FillRect>

  DrawProp[ActiveLayer].TextColor = color_backup;
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <BSP_LCD_ClearStringLine+0xc0>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	490d      	ldr	r1, [pc, #52]	; (8001774 <BSP_LCD_ClearStringLine+0xc4>)
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <BSP_LCD_ClearStringLine+0xc0>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <BSP_LCD_ClearStringLine+0xc4>)
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff35 	bl	80015d0 <BSP_LCD_SetTextColor>
}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	bd90      	pop	{r4, r7, pc}
 800176e:	bf00      	nop
 8001770:	200001a4 	.word	0x200001a4
 8001774:	200001a8 	.word	0x200001a8

08001778 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
 8001782:	460b      	mov	r3, r1
 8001784:	80bb      	strh	r3, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <BSP_LCD_DisplayChar+0x80>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	491b      	ldr	r1, [pc, #108]	; (80017fc <BSP_LCD_DisplayChar+0x84>)
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	3308      	adds	r3, #8
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6819      	ldr	r1, [r3, #0]
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <BSP_LCD_DisplayChar+0x80>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4c14      	ldr	r4, [pc, #80]	; (80017fc <BSP_LCD_DisplayChar+0x84>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4423      	add	r3, r4
 80017b6:	3308      	adds	r3, #8
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80017bc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <BSP_LCD_DisplayChar+0x80>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4c0d      	ldr	r4, [pc, #52]	; (80017fc <BSP_LCD_DisplayChar+0x84>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4423      	add	r3, r4
 80017d0:	3308      	adds	r3, #8
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	889b      	ldrh	r3, [r3, #4]
 80017d6:	3307      	adds	r3, #7
 80017d8:	2b00      	cmp	r3, #0
 80017da:	da00      	bge.n	80017de <BSP_LCD_DisplayChar+0x66>
 80017dc:	3307      	adds	r3, #7
 80017de:	10db      	asrs	r3, r3, #3
 80017e0:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80017e4:	18ca      	adds	r2, r1, r3
 80017e6:	88b9      	ldrh	r1, [r7, #4]
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 fc2a 	bl	8002044 <DrawChar>
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd90      	pop	{r4, r7, pc}
 80017f8:	200001a4 	.word	0x200001a4
 80017fc:	200001a8 	.word	0x200001a8

08001800 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	60ba      	str	r2, [r7, #8]
 8001808:	461a      	mov	r2, r3
 800180a:	4603      	mov	r3, r0
 800180c:	81fb      	strh	r3, [r7, #14]
 800180e:	460b      	mov	r3, r1
 8001810:	81bb      	strh	r3, [r7, #12]
 8001812:	4613      	mov	r3, r2
 8001814:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001816:	2301      	movs	r3, #1
 8001818:	83fb      	strh	r3, [r7, #30]
 800181a:	2300      	movs	r3, #0
 800181c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800182a:	e002      	b.n	8001832 <BSP_LCD_DisplayStringAt+0x32>
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	3301      	adds	r3, #1
 8001830:	61bb      	str	r3, [r7, #24]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	617a      	str	r2, [r7, #20]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f6      	bne.n	800182c <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800183e:	f7ff fe4f 	bl	80014e0 <BSP_LCD_GetXSize>
 8001842:	4b4f      	ldr	r3, [pc, #316]	; (8001980 <BSP_LCD_DisplayStringAt+0x180>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	494f      	ldr	r1, [pc, #316]	; (8001984 <BSP_LCD_DisplayStringAt+0x184>)
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	3308      	adds	r3, #8
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	889b      	ldrh	r3, [r3, #4]
 8001858:	fbb0 f3f3 	udiv	r3, r0, r3
 800185c:	613b      	str	r3, [r7, #16]

  switch (Mode)
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d01c      	beq.n	800189e <BSP_LCD_DisplayStringAt+0x9e>
 8001864:	2b03      	cmp	r3, #3
 8001866:	d017      	beq.n	8001898 <BSP_LCD_DisplayStringAt+0x98>
 8001868:	2b01      	cmp	r3, #1
 800186a:	d12e      	bne.n	80018ca <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	1ad1      	subs	r1, r2, r3
 8001872:	4b43      	ldr	r3, [pc, #268]	; (8001980 <BSP_LCD_DisplayStringAt+0x180>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4843      	ldr	r0, [pc, #268]	; (8001984 <BSP_LCD_DisplayStringAt+0x184>)
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4403      	add	r3, r0
 8001882:	3308      	adds	r3, #8
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	889b      	ldrh	r3, [r3, #4]
 8001888:	fb03 f301 	mul.w	r3, r3, r1
 800188c:	085b      	lsrs	r3, r3, #1
 800188e:	b29a      	uxth	r2, r3
 8001890:	89fb      	ldrh	r3, [r7, #14]
 8001892:	4413      	add	r3, r2
 8001894:	83fb      	strh	r3, [r7, #30]
      break;
 8001896:	e01b      	b.n	80018d0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001898:	89fb      	ldrh	r3, [r7, #14]
 800189a:	83fb      	strh	r3, [r7, #30]
      break;
 800189c:	e018      	b.n	80018d0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	b299      	uxth	r1, r3
 80018a6:	4b36      	ldr	r3, [pc, #216]	; (8001980 <BSP_LCD_DisplayStringAt+0x180>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4836      	ldr	r0, [pc, #216]	; (8001984 <BSP_LCD_DisplayStringAt+0x184>)
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4403      	add	r3, r0
 80018b6:	3308      	adds	r3, #8
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	889b      	ldrh	r3, [r3, #4]
 80018bc:	fb11 f303 	smulbb	r3, r1, r3
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	89fb      	ldrh	r3, [r7, #14]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	83fb      	strh	r3, [r7, #30]
      break;
 80018c8:	e002      	b.n	80018d0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 80018ca:	89fb      	ldrh	r3, [r7, #14]
 80018cc:	83fb      	strh	r3, [r7, #30]
      break;
 80018ce:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80018d0:	8bfb      	ldrh	r3, [r7, #30]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <BSP_LCD_DisplayStringAt+0xde>
 80018d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	da1d      	bge.n	800191a <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 80018de:	2301      	movs	r3, #1
 80018e0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80018e2:	e01a      	b.n	800191a <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	781a      	ldrb	r2, [r3, #0]
 80018e8:	89b9      	ldrh	r1, [r7, #12]
 80018ea:	8bfb      	ldrh	r3, [r7, #30]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff43 	bl	8001778 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80018f2:	4b23      	ldr	r3, [pc, #140]	; (8001980 <BSP_LCD_DisplayStringAt+0x180>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4923      	ldr	r1, [pc, #140]	; (8001984 <BSP_LCD_DisplayStringAt+0x184>)
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	3308      	adds	r3, #8
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	889a      	ldrh	r2, [r3, #4]
 8001908:	8bfb      	ldrh	r3, [r7, #30]
 800190a:	4413      	add	r3, r2
 800190c:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	3301      	adds	r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
    i++;
 8001914:	8bbb      	ldrh	r3, [r7, #28]
 8001916:	3301      	adds	r3, #1
 8001918:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	bf14      	ite	ne
 8001922:	2301      	movne	r3, #1
 8001924:	2300      	moveq	r3, #0
 8001926:	b2dc      	uxtb	r4, r3
 8001928:	f7ff fdda 	bl	80014e0 <BSP_LCD_GetXSize>
 800192c:	4605      	mov	r5, r0
 800192e:	8bb9      	ldrh	r1, [r7, #28]
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <BSP_LCD_DisplayStringAt+0x180>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4813      	ldr	r0, [pc, #76]	; (8001984 <BSP_LCD_DisplayStringAt+0x184>)
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4403      	add	r3, r0
 8001940:	3308      	adds	r3, #8
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	889b      	ldrh	r3, [r3, #4]
 8001946:	fb03 f301 	mul.w	r3, r3, r1
 800194a:	1aeb      	subs	r3, r5, r3
 800194c:	b299      	uxth	r1, r3
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <BSP_LCD_DisplayStringAt+0x180>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	480c      	ldr	r0, [pc, #48]	; (8001984 <BSP_LCD_DisplayStringAt+0x184>)
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4403      	add	r3, r0
 800195e:	3308      	adds	r3, #8
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	889b      	ldrh	r3, [r3, #4]
 8001964:	4299      	cmp	r1, r3
 8001966:	bf2c      	ite	cs
 8001968:	2301      	movcs	r3, #1
 800196a:	2300      	movcc	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	4023      	ands	r3, r4
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1b6      	bne.n	80018e4 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 8001976:	bf00      	nop
 8001978:	3720      	adds	r7, #32
 800197a:	46bd      	mov	sp, r7
 800197c:	bdb0      	pop	{r4, r5, r7, pc}
 800197e:	bf00      	nop
 8001980:	200001a4 	.word	0x200001a4
 8001984:	200001a8 	.word	0x200001a8

08001988 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af02      	add	r7, sp, #8
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
 8001992:	460b      	mov	r3, r1
 8001994:	80bb      	strh	r3, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <BSP_LCD_DrawHLine+0x70>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a16      	ldr	r2, [pc, #88]	; (80019fc <BSP_LCD_DrawHLine+0x74>)
 80019a4:	2134      	movs	r1, #52	; 0x34
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	335c      	adds	r3, #92	; 0x5c
 80019ae:	681c      	ldr	r4, [r3, #0]
 80019b0:	f7ff fd96 	bl	80014e0 <BSP_LCD_GetXSize>
 80019b4:	4602      	mov	r2, r0
 80019b6:	88bb      	ldrh	r3, [r7, #4]
 80019b8:	fb03 f202 	mul.w	r2, r3, r2
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4423      	add	r3, r4
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <BSP_LCD_DrawHLine+0x70>)
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	68fc      	ldr	r4, [r7, #12]
 80019cc:	887d      	ldrh	r5, [r7, #2]
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <BSP_LCD_DrawHLine+0x70>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	490b      	ldr	r1, [pc, #44]	; (8001a00 <BSP_LCD_DrawHLine+0x78>)
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	2300      	movs	r3, #0
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2301      	movs	r3, #1
 80019e8:	462a      	mov	r2, r5
 80019ea:	4621      	mov	r1, r4
 80019ec:	f000 fbe2 	bl	80021b4 <LL_FillBuffer>
}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdb0      	pop	{r4, r5, r7, pc}
 80019f8:	200001a4 	.word	0x200001a4
 80019fc:	20000464 	.word	0x20000464
 8001a00:	200001a8 	.word	0x200001a8

08001a04 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	80bb      	strh	r3, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <BSP_LCD_DrawVLine+0x78>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a18      	ldr	r2, [pc, #96]	; (8001a80 <BSP_LCD_DrawVLine+0x7c>)
 8001a20:	2134      	movs	r1, #52	; 0x34
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	335c      	adds	r3, #92	; 0x5c
 8001a2a:	681c      	ldr	r4, [r3, #0]
 8001a2c:	f7ff fd58 	bl	80014e0 <BSP_LCD_GetXSize>
 8001a30:	4602      	mov	r2, r0
 8001a32:	88bb      	ldrh	r3, [r7, #4]
 8001a34:	fb03 f202 	mul.w	r2, r3, r2
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4423      	add	r3, r4
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <BSP_LCD_DrawVLine+0x78>)
 8001a44:	681c      	ldr	r4, [r3, #0]
 8001a46:	68fd      	ldr	r5, [r7, #12]
 8001a48:	887e      	ldrh	r6, [r7, #2]
 8001a4a:	f7ff fd49 	bl	80014e0 <BSP_LCD_GetXSize>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	1e59      	subs	r1, r3, #1
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <BSP_LCD_DrawVLine+0x78>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	480b      	ldr	r0, [pc, #44]	; (8001a84 <BSP_LCD_DrawVLine+0x80>)
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4403      	add	r3, r0
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	9100      	str	r1, [sp, #0]
 8001a68:	4633      	mov	r3, r6
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f000 fba0 	bl	80021b4 <LL_FillBuffer>
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a7c:	200001a4 	.word	0x200001a4
 8001a80:	20000464 	.word	0x20000464
 8001a84:	200001a8 	.word	0x200001a8

08001a88 <BSP_LCD_DrawRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4604      	mov	r4, r0
 8001a90:	4608      	mov	r0, r1
 8001a92:	4611      	mov	r1, r2
 8001a94:	461a      	mov	r2, r3
 8001a96:	4623      	mov	r3, r4
 8001a98:	80fb      	strh	r3, [r7, #6]
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	80bb      	strh	r3, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	807b      	strh	r3, [r7, #2]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	88b9      	ldrh	r1, [r7, #4]
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff6b 	bl	8001988 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001ab2:	88ba      	ldrh	r2, [r7, #4]
 8001ab4:	883b      	ldrh	r3, [r7, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b299      	uxth	r1, r3
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff62 	bl	8001988 <BSP_LCD_DrawHLine>

  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001ac4:	883a      	ldrh	r2, [r7, #0]
 8001ac6:	88b9      	ldrh	r1, [r7, #4]
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ff9a 	bl	8001a04 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001ad0:	88fa      	ldrh	r2, [r7, #6]
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	883a      	ldrh	r2, [r7, #0]
 8001ada:	88b9      	ldrh	r1, [r7, #4]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff91 	bl	8001a04 <BSP_LCD_DrawVLine>
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd90      	pop	{r4, r7, pc}
	...

08001aec <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	80fb      	strh	r3, [r7, #6]
 8001af6:	460b      	mov	r3, r1
 8001af8:	80bb      	strh	r3, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001afe:	887b      	ldrh	r3, [r7, #2]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	f1c3 0303 	rsb	r3, r3, #3
 8001b06:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8001b10:	e0cf      	b.n	8001cb2 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4413      	add	r3, r2
 8001b1a:	b298      	uxth	r0, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	88ba      	ldrh	r2, [r7, #4]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	b29c      	uxth	r4, r3
 8001b26:	4b67      	ldr	r3, [pc, #412]	; (8001cc4 <BSP_LCD_DrawCircle+0x1d8>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4967      	ldr	r1, [pc, #412]	; (8001cc8 <BSP_LCD_DrawCircle+0x1dc>)
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	f000 fa5c 	bl	8001ff8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	88fa      	ldrh	r2, [r7, #6]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	b298      	uxth	r0, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	88ba      	ldrh	r2, [r7, #4]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	b29c      	uxth	r4, r3
 8001b54:	4b5b      	ldr	r3, [pc, #364]	; (8001cc4 <BSP_LCD_DrawCircle+0x1d8>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	495b      	ldr	r1, [pc, #364]	; (8001cc8 <BSP_LCD_DrawCircle+0x1dc>)
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	4621      	mov	r1, r4
 8001b6a:	f000 fa45 	bl	8001ff8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	4413      	add	r3, r2
 8001b76:	b298      	uxth	r0, r3
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	88ba      	ldrh	r2, [r7, #4]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	b29c      	uxth	r4, r3
 8001b82:	4b50      	ldr	r3, [pc, #320]	; (8001cc4 <BSP_LCD_DrawCircle+0x1d8>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4950      	ldr	r1, [pc, #320]	; (8001cc8 <BSP_LCD_DrawCircle+0x1dc>)
 8001b88:	4613      	mov	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	4621      	mov	r1, r4
 8001b98:	f000 fa2e 	bl	8001ff8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	88fa      	ldrh	r2, [r7, #6]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	b298      	uxth	r0, r3
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	88ba      	ldrh	r2, [r7, #4]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	b29c      	uxth	r4, r3
 8001bb0:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <BSP_LCD_DrawCircle+0x1d8>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4944      	ldr	r1, [pc, #272]	; (8001cc8 <BSP_LCD_DrawCircle+0x1dc>)
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	f000 fa17 	bl	8001ff8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b298      	uxth	r0, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	88bb      	ldrh	r3, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	b29c      	uxth	r4, r3
 8001bde:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <BSP_LCD_DrawCircle+0x1d8>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4939      	ldr	r1, [pc, #228]	; (8001cc8 <BSP_LCD_DrawCircle+0x1dc>)
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	f000 fa00 	bl	8001ff8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	88fa      	ldrh	r2, [r7, #6]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b298      	uxth	r0, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	88bb      	ldrh	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	b29c      	uxth	r4, r3
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <BSP_LCD_DrawCircle+0x1d8>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	492d      	ldr	r1, [pc, #180]	; (8001cc8 <BSP_LCD_DrawCircle+0x1dc>)
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4621      	mov	r1, r4
 8001c22:	f000 f9e9 	bl	8001ff8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b298      	uxth	r0, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	88bb      	ldrh	r3, [r7, #4]
 8001c36:	4413      	add	r3, r2
 8001c38:	b29c      	uxth	r4, r3
 8001c3a:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <BSP_LCD_DrawCircle+0x1d8>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4922      	ldr	r1, [pc, #136]	; (8001cc8 <BSP_LCD_DrawCircle+0x1dc>)
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4621      	mov	r1, r4
 8001c50:	f000 f9d2 	bl	8001ff8 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	88fa      	ldrh	r2, [r7, #6]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	b298      	uxth	r0, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	88bb      	ldrh	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	b29c      	uxth	r4, r3
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <BSP_LCD_DrawCircle+0x1d8>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4916      	ldr	r1, [pc, #88]	; (8001cc8 <BSP_LCD_DrawCircle+0x1dc>)
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	f000 f9bb 	bl	8001ff8 <BSP_LCD_DrawPixel>

    if (D < 0)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	da06      	bge.n	8001c96 <BSP_LCD_DrawCircle+0x1aa>
    {
      D += (CurX << 2) + 6;
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	009a      	lsls	r2, r3, #2
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	4413      	add	r3, r2
 8001c90:	3306      	adds	r3, #6
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	e00a      	b.n	8001cac <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	009a      	lsls	r2, r3, #2
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	330a      	adds	r3, #10
 8001ca4:	617b      	str	r3, [r7, #20]
      CurY--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	f67f af2b 	bls.w	8001b12 <BSP_LCD_DrawCircle+0x26>
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}
 8001cc4:	200001a4 	.word	0x200001a4
 8001cc8:	200001a8 	.word	0x200001a8

08001ccc <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af02      	add	r7, sp, #8
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	4608      	mov	r0, r1
 8001cd8:	4611      	mov	r1, r2
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4623      	mov	r3, r4
 8001cde:	80fb      	strh	r3, [r7, #6]
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	80bb      	strh	r3, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001cf0:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <BSP_LCD_FillRect+0xa8>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4920      	ldr	r1, [pc, #128]	; (8001d78 <BSP_LCD_FillRect+0xac>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fc64 	bl	80015d0 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001d08:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <BSP_LCD_FillRect+0xa8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1b      	ldr	r2, [pc, #108]	; (8001d7c <BSP_LCD_FillRect+0xb0>)
 8001d0e:	2134      	movs	r1, #52	; 0x34
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	335c      	adds	r3, #92	; 0x5c
 8001d18:	681c      	ldr	r4, [r3, #0]
 8001d1a:	f7ff fbe1 	bl	80014e0 <BSP_LCD_GetXSize>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	88bb      	ldrh	r3, [r7, #4]
 8001d22:	fb03 f202 	mul.w	r2, r3, r2
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4423      	add	r3, r4
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <BSP_LCD_FillRect+0xa8>)
 8001d32:	681c      	ldr	r4, [r3, #0]
 8001d34:	68fd      	ldr	r5, [r7, #12]
 8001d36:	887e      	ldrh	r6, [r7, #2]
 8001d38:	f8b7 8000 	ldrh.w	r8, [r7]
 8001d3c:	f7ff fbd0 	bl	80014e0 <BSP_LCD_GetXSize>
 8001d40:	4602      	mov	r2, r0
 8001d42:	887b      	ldrh	r3, [r7, #2]
 8001d44:	1ad1      	subs	r1, r2, r3
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <BSP_LCD_FillRect+0xa8>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	480b      	ldr	r0, [pc, #44]	; (8001d78 <BSP_LCD_FillRect+0xac>)
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4403      	add	r3, r0
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	9100      	str	r1, [sp, #0]
 8001d5c:	4643      	mov	r3, r8
 8001d5e:	4632      	mov	r2, r6
 8001d60:	4629      	mov	r1, r5
 8001d62:	4620      	mov	r0, r4
 8001d64:	f000 fa26 	bl	80021b4 <LL_FillBuffer>
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d72:	bf00      	nop
 8001d74:	200001a4 	.word	0x200001a4
 8001d78:	200001a8 	.word	0x200001a8
 8001d7c:	20000464 	.word	0x20000464

08001d80 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	80fb      	strh	r3, [r7, #6]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	80bb      	strh	r3, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	f1c3 0303 	rsb	r3, r3, #3
 8001d9a:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001da4:	4b44      	ldr	r3, [pc, #272]	; (8001eb8 <BSP_LCD_FillCircle+0x138>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4944      	ldr	r1, [pc, #272]	; (8001ebc <BSP_LCD_FillCircle+0x13c>)
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fc0a 	bl	80015d0 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8001dbc:	e061      	b.n	8001e82 <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d021      	beq.n	8001e08 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	88fa      	ldrh	r2, [r7, #6]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	b298      	uxth	r0, r3
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	88bb      	ldrh	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	b299      	uxth	r1, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	f7ff fdd1 	bl	8001988 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	88fa      	ldrh	r2, [r7, #6]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	b298      	uxth	r0, r3
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	88ba      	ldrh	r2, [r7, #4]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	b299      	uxth	r1, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	f7ff fdc0 	bl	8001988 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d021      	beq.n	8001e52 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	88fa      	ldrh	r2, [r7, #6]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	b298      	uxth	r0, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	88ba      	ldrh	r2, [r7, #4]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	b299      	uxth	r1, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	f7ff fdac 	bl	8001988 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	88fa      	ldrh	r2, [r7, #6]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	b298      	uxth	r0, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	88bb      	ldrh	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	b299      	uxth	r1, r3
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	f7ff fd9b 	bl	8001988 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	da06      	bge.n	8001e66 <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	009a      	lsls	r2, r3, #2
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	4413      	add	r3, r2
 8001e60:	3306      	adds	r3, #6
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	e00a      	b.n	8001e7c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	009a      	lsls	r2, r3, #2
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	4413      	add	r3, r2
 8001e72:	330a      	adds	r3, #10
 8001e74:	617b      	str	r3, [r7, #20]
      CurY--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d999      	bls.n	8001dbe <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <BSP_LCD_FillCircle+0x138>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	490b      	ldr	r1, [pc, #44]	; (8001ebc <BSP_LCD_FillCircle+0x13c>)
 8001e90:	4613      	mov	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fb97 	bl	80015d0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	88b9      	ldrh	r1, [r7, #4]
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fe1f 	bl	8001aec <BSP_LCD_DrawCircle>
}
 8001eae:	bf00      	nop
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200001a4 	.word	0x200001a4
 8001ebc:	200001a8 	.word	0x200001a8

08001ec0 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d80d      	bhi.n	8001eec <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	2215      	movs	r2, #21
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	480a      	ldr	r0, [pc, #40]	; (8001f10 <DSI_IO_WriteCmd+0x50>)
 8001ee6:	f002 ff61 	bl	8004dac <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001eea:	e00d      	b.n	8001f08 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	9200      	str	r2, [sp, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2239      	movs	r2, #57	; 0x39
 8001f00:	2100      	movs	r1, #0
 8001f02:	4803      	ldr	r0, [pc, #12]	; (8001f10 <DSI_IO_WriteCmd+0x50>)
 8001f04:	f002 ff74 	bl	8004df0 <HAL_DSI_LongWrite>
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	2000050c 	.word	0x2000050c

08001f14 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001f18:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001f2a:	4b32      	ldr	r3, [pc, #200]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	4a31      	ldr	r2, [pc, #196]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f34:	6453      	str	r3, [r2, #68]	; 0x44
 8001f36:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001f42:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	4a2b      	ldr	r2, [pc, #172]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f4c:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001f4e:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	4a28      	ldr	r2, [pc, #160]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f58:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f5a:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	4a1f      	ldr	r2, [pc, #124]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f7c:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	4a1c      	ldr	r2, [pc, #112]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f88:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f94:	6453      	str	r3, [r2, #68]	; 0x44
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001fa2:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	4a13      	ldr	r2, [pc, #76]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001fa8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fac:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	4a10      	ldr	r2, [pc, #64]	; (8001ff4 <BSP_LCD_MspInit+0xd0>)
 8001fb4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001fb8:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2103      	movs	r1, #3
 8001fbe:	2058      	movs	r0, #88	; 0x58
 8001fc0:	f001 fad1 	bl	8003566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001fc4:	2058      	movs	r0, #88	; 0x58
 8001fc6:	f001 faea 	bl	800359e <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2103      	movs	r1, #3
 8001fce:	205a      	movs	r0, #90	; 0x5a
 8001fd0:	f001 fac9 	bl	8003566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001fd4:	205a      	movs	r0, #90	; 0x5a
 8001fd6:	f001 fae2 	bl	800359e <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2103      	movs	r1, #3
 8001fde:	2062      	movs	r0, #98	; 0x62
 8001fe0:	f001 fac1 	bl	8003566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001fe4:	2062      	movs	r0, #98	; 0x62
 8001fe6:	f001 fada 	bl	800359e <HAL_NVIC_EnableIRQ>
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800

08001ff8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001ff8:	b5b0      	push	{r4, r5, r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	603a      	str	r2, [r7, #0]
 8002002:	80fb      	strh	r3, [r7, #6]
 8002004:	460b      	mov	r3, r1
 8002006:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <BSP_LCD_DrawPixel+0x44>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <BSP_LCD_DrawPixel+0x48>)
 800200e:	2134      	movs	r1, #52	; 0x34
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	335c      	adds	r3, #92	; 0x5c
 8002018:	681c      	ldr	r4, [r3, #0]
 800201a:	88bd      	ldrh	r5, [r7, #4]
 800201c:	f7ff fa60 	bl	80014e0 <BSP_LCD_GetXSize>
 8002020:	4603      	mov	r3, r0
 8002022:	fb03 f205 	mul.w	r2, r3, r5
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4423      	add	r3, r4
 800202e:	461a      	mov	r2, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	6013      	str	r3, [r2, #0]
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bdb0      	pop	{r4, r5, r7, pc}
 800203c:	200001a4 	.word	0x200001a4
 8002040:	20000464 	.word	0x20000464

08002044 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	603a      	str	r2, [r7, #0]
 800204e:	80fb      	strh	r3, [r7, #6]
 8002050:	460b      	mov	r3, r1
 8002052:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <DrawChar+0x168>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4953      	ldr	r1, [pc, #332]	; (80021b0 <DrawChar+0x16c>)
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	3308      	adds	r3, #8
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	88db      	ldrh	r3, [r3, #6]
 8002072:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002074:	4b4d      	ldr	r3, [pc, #308]	; (80021ac <DrawChar+0x168>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	494d      	ldr	r1, [pc, #308]	; (80021b0 <DrawChar+0x16c>)
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	3308      	adds	r3, #8
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	889b      	ldrh	r3, [r3, #4]
 800208a:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 800208c:	8a3b      	ldrh	r3, [r7, #16]
 800208e:	3307      	adds	r3, #7
 8002090:	2b00      	cmp	r3, #0
 8002092:	da00      	bge.n	8002096 <DrawChar+0x52>
 8002094:	3307      	adds	r3, #7
 8002096:	10db      	asrs	r3, r3, #3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	b2da      	uxtb	r2, r3
 800209e:	8a3b      	ldrh	r3, [r7, #16]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e076      	b.n	800219a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80020ac:	8a3b      	ldrh	r3, [r7, #16]
 80020ae:	3307      	adds	r3, #7
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	da00      	bge.n	80020b6 <DrawChar+0x72>
 80020b4:	3307      	adds	r3, #7
 80020b6:	10db      	asrs	r3, r3, #3
 80020b8:	461a      	mov	r2, r3
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fb03 f302 	mul.w	r3, r3, r2
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80020c6:	8a3b      	ldrh	r3, [r7, #16]
 80020c8:	3307      	adds	r3, #7
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	da00      	bge.n	80020d0 <DrawChar+0x8c>
 80020ce:	3307      	adds	r3, #7
 80020d0:	10db      	asrs	r3, r3, #3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d002      	beq.n	80020dc <DrawChar+0x98>
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d004      	beq.n	80020e4 <DrawChar+0xa0>
 80020da:	e00c      	b.n	80020f6 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	617b      	str	r3, [r7, #20]
      break;
 80020e2:	e016      	b.n	8002112 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	3201      	adds	r2, #1
 80020ee:	7812      	ldrb	r2, [r2, #0]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
      break;
 80020f4:	e00d      	b.n	8002112 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	041a      	lsls	r2, r3, #16
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	3301      	adds	r3, #1
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	4313      	orrs	r3, r2
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	3202      	adds	r2, #2
 800210a:	7812      	ldrb	r2, [r2, #0]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
      break;
 8002110:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	e036      	b.n	8002186 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8002118:	8a3a      	ldrh	r2, [r7, #16]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	1ad2      	subs	r2, r2, r3
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	4413      	add	r3, r2
 8002122:	3b01      	subs	r3, #1
 8002124:	2201      	movs	r2, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	461a      	mov	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d012      	beq.n	800215a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	b29a      	uxth	r2, r3
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	4413      	add	r3, r2
 800213c:	b298      	uxth	r0, r3
 800213e:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <DrawChar+0x168>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	491b      	ldr	r1, [pc, #108]	; (80021b0 <DrawChar+0x16c>)
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	88bb      	ldrh	r3, [r7, #4]
 8002152:	4619      	mov	r1, r3
 8002154:	f7ff ff50 	bl	8001ff8 <BSP_LCD_DrawPixel>
 8002158:	e012      	b.n	8002180 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	b29a      	uxth	r2, r3
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	4413      	add	r3, r2
 8002162:	b298      	uxth	r0, r3
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <DrawChar+0x168>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4911      	ldr	r1, [pc, #68]	; (80021b0 <DrawChar+0x16c>)
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	3304      	adds	r3, #4
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	88bb      	ldrh	r3, [r7, #4]
 800217a:	4619      	mov	r1, r3
 800217c:	f7ff ff3c 	bl	8001ff8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	3301      	adds	r3, #1
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	8a3b      	ldrh	r3, [r7, #16]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	429a      	cmp	r2, r3
 800218c:	d3c4      	bcc.n	8002118 <DrawChar+0xd4>
      }
    }
    Ypos++;
 800218e:	88bb      	ldrh	r3, [r7, #4]
 8002190:	3301      	adds	r3, #1
 8002192:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	3301      	adds	r3, #1
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	8a7b      	ldrh	r3, [r7, #18]
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d384      	bcc.n	80020ac <DrawChar+0x68>
  }
}
 80021a2:	bf00      	nop
 80021a4:	3720      	adds	r7, #32
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200001a4 	.word	0x200001a4
 80021b0:	200001a8 	.word	0x200001a8

080021b4 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80021c2:	4b16      	ldr	r3, [pc, #88]	; (800221c <LL_FillBuffer+0x68>)
 80021c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80021c8:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <LL_FillBuffer+0x68>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 80021d0:	4a12      	ldr	r2, [pc, #72]	; (800221c <LL_FillBuffer+0x68>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <LL_FillBuffer+0x68>)
 80021d8:	4a11      	ldr	r2, [pc, #68]	; (8002220 <LL_FillBuffer+0x6c>)
 80021da:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80021dc:	480f      	ldr	r0, [pc, #60]	; (800221c <LL_FillBuffer+0x68>)
 80021de:	f001 fbb5 	bl	800394c <HAL_DMA2D_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d115      	bne.n	8002214 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 80021e8:	68f9      	ldr	r1, [r7, #12]
 80021ea:	480c      	ldr	r0, [pc, #48]	; (800221c <LL_FillBuffer+0x68>)
 80021ec:	f001 fd1c 	bl	8003c28 <HAL_DMA2D_ConfigLayer>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10e      	bne.n	8002214 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69f9      	ldr	r1, [r7, #28]
 8002200:	4806      	ldr	r0, [pc, #24]	; (800221c <LL_FillBuffer+0x68>)
 8002202:	f001 fbfd 	bl	8003a00 <HAL_DMA2D_Start>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d103      	bne.n	8002214 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 800220c:	210a      	movs	r1, #10
 800220e:	4803      	ldr	r0, [pc, #12]	; (800221c <LL_FillBuffer+0x68>)
 8002210:	f001 fc21 	bl	8003a56 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	2000040c 	.word	0x2000040c
 8002220:	4002b000 	.word	0x4002b000

08002224 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002228:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 800222a:	4a2a      	ldr	r2, [pc, #168]	; (80022d4 <BSP_SDRAM_Init+0xb0>)
 800222c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 8002230:	2202      	movs	r2, #2
 8002232:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 8002236:	2207      	movs	r2, #7
 8002238:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800223a:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 800223c:	2204      	movs	r2, #4
 800223e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 8002242:	2207      	movs	r2, #7
 8002244:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002246:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 8002248:	2202      	movs	r2, #2
 800224a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800224c:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 800224e:	2202      	movs	r2, #2
 8002250:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002252:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 8002254:	2202      	movs	r2, #2
 8002256:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 800225a:	2200      	movs	r2, #0
 800225c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002266:	2204      	movs	r2, #4
 8002268:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 800226c:	2220      	movs	r2, #32
 800226e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002272:	2240      	movs	r2, #64	; 0x40
 8002274:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002278:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800227c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002280:	2200      	movs	r2, #0
 8002282:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800228a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 800228e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002292:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002296:	2200      	movs	r2, #0
 8002298:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800229a:	2100      	movs	r1, #0
 800229c:	480c      	ldr	r0, [pc, #48]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 800229e:	f000 f87f 	bl	80023a0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80022a2:	490d      	ldr	r1, [pc, #52]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 80022a4:	480a      	ldr	r0, [pc, #40]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 80022a6:	f005 fa0f 	bl	80076c8 <HAL_SDRAM_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <BSP_SDRAM_Init+0xb8>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	e002      	b.n	80022be <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <BSP_SDRAM_Init+0xb8>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80022be:	f240 6003 	movw	r0, #1539	; 0x603
 80022c2:	f000 f80d 	bl	80022e0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <BSP_SDRAM_Init+0xb8>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000528 	.word	0x20000528
 80022d4:	a0000140 	.word	0xa0000140
 80022d8:	20000250 	.word	0x20000250
 80022dc:	20000054 	.word	0x20000054

080022e0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022f2:	4b29      	ldr	r3, [pc, #164]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f4:	2210      	movs	r2, #16
 80022f6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80022f8:	4b27      	ldr	r3, [pc, #156]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002300:	2200      	movs	r2, #0
 8002302:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002308:	4923      	ldr	r1, [pc, #140]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800230a:	4824      	ldr	r0, [pc, #144]	; (800239c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800230c:	f005 fa10 	bl	8007730 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002310:	2001      	movs	r0, #1
 8002312:	f000 fb79 	bl	8002a08 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002316:	4b20      	ldr	r3, [pc, #128]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002318:	2202      	movs	r2, #2
 800231a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800231c:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800231e:	2210      	movs	r2, #16
 8002320:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002324:	2201      	movs	r2, #1
 8002326:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800232a:	2200      	movs	r2, #0
 800232c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800232e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002332:	4919      	ldr	r1, [pc, #100]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002334:	4819      	ldr	r0, [pc, #100]	; (800239c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002336:	f005 f9fb 	bl	8007730 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800233a:	4b17      	ldr	r3, [pc, #92]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800233c:	2203      	movs	r2, #3
 800233e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002342:	2210      	movs	r2, #16
 8002344:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002348:	2208      	movs	r2, #8
 800234a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002356:	4910      	ldr	r1, [pc, #64]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002358:	4810      	ldr	r0, [pc, #64]	; (800239c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800235a:	f005 f9e9 	bl	8007730 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800235e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002362:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002366:	2204      	movs	r2, #4
 8002368:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800236c:	2210      	movs	r2, #16
 800236e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002372:	2201      	movs	r2, #1
 8002374:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4a07      	ldr	r2, [pc, #28]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800237a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800237c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002380:	4905      	ldr	r1, [pc, #20]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002382:	4806      	ldr	r0, [pc, #24]	; (800239c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002384:	f005 f9d4 	bl	8007730 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4804      	ldr	r0, [pc, #16]	; (800239c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800238c:	f005 f9fb 	bl	8007786 <HAL_SDRAM_ProgramRefreshRate>
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	2000026c 	.word	0x2000026c
 800239c:	20000528 	.word	0x20000528

080023a0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b090      	sub	sp, #64	; 0x40
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80023aa:	4b71      	ldr	r3, [pc, #452]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	4a70      	ldr	r2, [pc, #448]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6393      	str	r3, [r2, #56]	; 0x38
 80023b6:	4b6e      	ldr	r3, [pc, #440]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 80023b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80023c2:	4b6b      	ldr	r3, [pc, #428]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a6a      	ldr	r2, [pc, #424]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 80023c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b68      	ldr	r3, [pc, #416]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023da:	4b65      	ldr	r3, [pc, #404]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a64      	ldr	r2, [pc, #400]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 80023e0:	f043 0308 	orr.w	r3, r3, #8
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b62      	ldr	r3, [pc, #392]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	623b      	str	r3, [r7, #32]
 80023f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023f2:	4b5f      	ldr	r3, [pc, #380]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a5e      	ldr	r2, [pc, #376]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 80023f8:	f043 0310 	orr.w	r3, r3, #16
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b5c      	ldr	r3, [pc, #368]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800240a:	4b59      	ldr	r3, [pc, #356]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a58      	ldr	r2, [pc, #352]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 8002410:	f043 0320 	orr.w	r3, r3, #32
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b56      	ldr	r3, [pc, #344]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	61bb      	str	r3, [r7, #24]
 8002420:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002422:	4b53      	ldr	r3, [pc, #332]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a52      	ldr	r2, [pc, #328]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 8002428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b50      	ldr	r3, [pc, #320]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800243a:	4b4d      	ldr	r3, [pc, #308]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a4c      	ldr	r2, [pc, #304]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 8002440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b4a      	ldr	r3, [pc, #296]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002452:	4b47      	ldr	r3, [pc, #284]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a46      	ldr	r2, [pc, #280]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 8002458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b44      	ldr	r3, [pc, #272]	; (8002570 <BSP_SDRAM_MspInit+0x1d0>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800246e:	2301      	movs	r3, #1
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002476:	230c      	movs	r3, #12
 8002478:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800247a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002484:	4619      	mov	r1, r3
 8002486:	483b      	ldr	r0, [pc, #236]	; (8002574 <BSP_SDRAM_MspInit+0x1d4>)
 8002488:	f002 fd78 	bl	8004f7c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800248c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002496:	4619      	mov	r1, r3
 8002498:	4837      	ldr	r0, [pc, #220]	; (8002578 <BSP_SDRAM_MspInit+0x1d8>)
 800249a:	f002 fd6f 	bl	8004f7c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800249e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80024a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a8:	4619      	mov	r1, r3
 80024aa:	4834      	ldr	r0, [pc, #208]	; (800257c <BSP_SDRAM_MspInit+0x1dc>)
 80024ac:	f002 fd66 	bl	8004f7c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 80024b0:	f248 1337 	movw	r3, #33079	; 0x8137
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80024b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ba:	4619      	mov	r1, r3
 80024bc:	4830      	ldr	r0, [pc, #192]	; (8002580 <BSP_SDRAM_MspInit+0x1e0>)
 80024be:	f002 fd5d 	bl	8004f7c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80024c2:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80024c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024cc:	4619      	mov	r1, r3
 80024ce:	482d      	ldr	r0, [pc, #180]	; (8002584 <BSP_SDRAM_MspInit+0x1e4>)
 80024d0:	f002 fd54 	bl	8004f7c <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80024d4:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 80024da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024de:	4619      	mov	r1, r3
 80024e0:	4829      	ldr	r0, [pc, #164]	; (8002588 <BSP_SDRAM_MspInit+0x1e8>)
 80024e2:	f002 fd4b 	bl	8004f7c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80024e6:	4b29      	ldr	r3, [pc, #164]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80024ec:	4b27      	ldr	r3, [pc, #156]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 80024ee:	2280      	movs	r2, #128	; 0x80
 80024f0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 80024f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80024fa:	4b24      	ldr	r3, [pc, #144]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 80024fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002500:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002502:	4b22      	ldr	r3, [pc, #136]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 8002504:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002508:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800250a:	4b20      	ldr	r3, [pc, #128]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 800250c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002510:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 8002514:	2200      	movs	r2, #0
 8002516:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002518:	4b1c      	ldr	r3, [pc, #112]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 800251a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800251e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 8002522:	2200      	movs	r2, #0
 8002524:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002526:	4b19      	ldr	r3, [pc, #100]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 8002528:	2203      	movs	r2, #3
 800252a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800252c:	4b17      	ldr	r3, [pc, #92]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 800252e:	2200      	movs	r2, #0
 8002530:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002532:	4b16      	ldr	r3, [pc, #88]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 800253a:	4a15      	ldr	r2, [pc, #84]	; (8002590 <BSP_SDRAM_MspInit+0x1f0>)
 800253c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a12      	ldr	r2, [pc, #72]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
 8002544:	4a11      	ldr	r2, [pc, #68]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800254a:	4810      	ldr	r0, [pc, #64]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 800254c:	f001 f8f0 	bl	8003730 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002550:	480e      	ldr	r0, [pc, #56]	; (800258c <BSP_SDRAM_MspInit+0x1ec>)
 8002552:	f001 f83f 	bl	80035d4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	210f      	movs	r1, #15
 800255a:	2038      	movs	r0, #56	; 0x38
 800255c:	f001 f803 	bl	8003566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002560:	2038      	movs	r0, #56	; 0x38
 8002562:	f001 f81c 	bl	800359e <HAL_NVIC_EnableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3740      	adds	r7, #64	; 0x40
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	40020c00 	.word	0x40020c00
 8002578:	40021000 	.word	0x40021000
 800257c:	40021400 	.word	0x40021400
 8002580:	40021800 	.word	0x40021800
 8002584:	40021c00 	.word	0x40021c00
 8002588:	40022000 	.word	0x40022000
 800258c:	2000027c 	.word	0x2000027c
 8002590:	40026410 	.word	0x40026410

08002594 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	460a      	mov	r2, r1
 800259e:	80fb      	strh	r3, [r7, #6]
 80025a0:	4613      	mov	r3, r2
 80025a2:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <BSP_TS_Init+0xb0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a25      	ldr	r2, [pc, #148]	; (8002648 <BSP_TS_Init+0xb4>)
 80025b2:	7812      	ldrb	r2, [r2, #0]
 80025b4:	b292      	uxth	r2, r2
 80025b6:	4610      	mov	r0, r2
 80025b8:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <BSP_TS_Init+0xb0>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2054      	movs	r0, #84	; 0x54
 80025c0:	4798      	blx	r3
 80025c2:	4603      	mov	r3, r0
 80025c4:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 80025c6:	7b7b      	ldrb	r3, [r7, #13]
 80025c8:	2b11      	cmp	r3, #17
 80025ca:	d009      	beq.n	80025e0 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <BSP_TS_Init+0xb0>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2070      	movs	r0, #112	; 0x70
 80025d2:	4798      	blx	r3
 80025d4:	4603      	mov	r3, r0
 80025d6:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <BSP_TS_Init+0xb4>)
 80025da:	2270      	movs	r2, #112	; 0x70
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	e002      	b.n	80025e6 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <BSP_TS_Init+0xb4>)
 80025e2:	2254      	movs	r2, #84	; 0x54
 80025e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 80025e6:	7b7b      	ldrb	r3, [r7, #13]
 80025e8:	2b11      	cmp	r3, #17
 80025ea:	d002      	beq.n	80025f2 <BSP_TS_Init+0x5e>
 80025ec:	7bbb      	ldrb	r3, [r7, #14]
 80025ee:	2b11      	cmp	r3, #17
 80025f0:	d121      	bne.n	8002636 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 80025f2:	4b16      	ldr	r3, [pc, #88]	; (800264c <BSP_TS_Init+0xb8>)
 80025f4:	4a13      	ldr	r2, [pc, #76]	; (8002644 <BSP_TS_Init+0xb0>)
 80025f6:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 80025f8:	88fa      	ldrh	r2, [r7, #6]
 80025fa:	88bb      	ldrh	r3, [r7, #4]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d203      	bcs.n	8002608 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <BSP_TS_Init+0xbc>)
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
 8002606:	e002      	b.n	800260e <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <BSP_TS_Init+0xbc>)
 800260a:	220c      	movs	r2, #12
 800260c:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d112      	bne.n	800263a <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8002614:	4b0d      	ldr	r3, [pc, #52]	; (800264c <BSP_TS_Init+0xb8>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <BSP_TS_Init+0xb4>)
 800261c:	7812      	ldrb	r2, [r2, #0]
 800261e:	b292      	uxth	r2, r2
 8002620:	4610      	mov	r0, r2
 8002622:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <BSP_TS_Init+0xb8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	4a07      	ldr	r2, [pc, #28]	; (8002648 <BSP_TS_Init+0xb4>)
 800262c:	7812      	ldrb	r2, [r2, #0]
 800262e:	b292      	uxth	r2, r2
 8002630:	4610      	mov	r0, r2
 8002632:	4798      	blx	r3
    if(ts_status == TS_OK)
 8002634:	e001      	b.n	800263a <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8002636:	2303      	movs	r3, #3
 8002638:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 800263a:	7bfb      	ldrb	r3, [r7, #15]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000000 	.word	0x20000000
 8002648:	200002e1 	.word	0x200002e1
 800264c:	200002dc 	.word	0x200002dc
 8002650:	200002e0 	.word	0x200002e0

08002654 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 800265e:	f000 f94f 	bl	8002900 <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 8002662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002666:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002668:	2301      	movs	r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800266c:	2302      	movs	r3, #2
 800266e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002670:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <BSP_TS_ITConfig+0x54>)
 8002672:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002674:	463b      	mov	r3, r7
 8002676:	4619      	mov	r1, r3
 8002678:	480c      	ldr	r0, [pc, #48]	; (80026ac <BSP_TS_ITConfig+0x58>)
 800267a:	f002 fc7f 	bl	8004f7c <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 800267e:	2200      	movs	r2, #0
 8002680:	210f      	movs	r1, #15
 8002682:	2028      	movs	r0, #40	; 0x28
 8002684:	f000 ff6f 	bl	8003566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8002688:	2028      	movs	r0, #40	; 0x28
 800268a:	f000 ff88 	bl	800359e <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <BSP_TS_ITConfig+0x5c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <BSP_TS_ITConfig+0x60>)
 8002696:	7812      	ldrb	r2, [r2, #0]
 8002698:	b292      	uxth	r2, r2
 800269a:	4610      	mov	r0, r2
 800269c:	4798      	blx	r3

  return (ts_status);
 800269e:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	10210000 	.word	0x10210000
 80026ac:	40022000 	.word	0x40022000
 80026b0:	200002dc 	.word	0x200002dc
 80026b4:	200002e1 	.word	0x200002e1

080026b8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b089      	sub	sp, #36	; 0x24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 80026c4:	4b89      	ldr	r3, [pc, #548]	; (80028ec <BSP_TS_GetState+0x234>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	4a89      	ldr	r2, [pc, #548]	; (80028f0 <BSP_TS_GetState+0x238>)
 80026cc:	7812      	ldrb	r2, [r2, #0]
 80026ce:	b292      	uxth	r2, r2
 80026d0:	4610      	mov	r0, r2
 80026d2:	4798      	blx	r3
 80026d4:	4603      	mov	r3, r0
 80026d6:	461a      	mov	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80fe 	beq.w	80028e2 <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e0f3      	b.n	80028d4 <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80026ec:	4b7f      	ldr	r3, [pc, #508]	; (80028ec <BSP_TS_GetState+0x234>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	4a7f      	ldr	r2, [pc, #508]	; (80028f0 <BSP_TS_GetState+0x238>)
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	b290      	uxth	r0, r2
 80026f8:	f107 0110 	add.w	r1, r7, #16
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	0052      	lsls	r2, r2, #1
 8002700:	188c      	adds	r4, r1, r2
 8002702:	f107 010c 	add.w	r1, r7, #12
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	0052      	lsls	r2, r2, #1
 800270a:	440a      	add	r2, r1
 800270c:	4621      	mov	r1, r4
 800270e:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8002710:	4b78      	ldr	r3, [pc, #480]	; (80028f4 <BSP_TS_GetState+0x23c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d01d      	beq.n	8002758 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	f107 0220 	add.w	r2, r7, #32
 8002724:	4413      	add	r3, r2
 8002726:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800272a:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	f107 0220 	add.w	r2, r7, #32
 8002734:	4413      	add	r3, r2
 8002736:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	f107 0120 	add.w	r1, r7, #32
 8002742:	440b      	add	r3, r1
 8002744:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	f107 0220 	add.w	r2, r7, #32
 8002750:	4413      	add	r3, r2
 8002752:	8b3a      	ldrh	r2, [r7, #24]
 8002754:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8002758:	4b66      	ldr	r3, [pc, #408]	; (80028f4 <BSP_TS_GetState+0x23c>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d011      	beq.n	8002788 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	f107 0220 	add.w	r2, r7, #32
 800276c:	4413      	add	r3, r2
 800276e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8002772:	f240 331f 	movw	r3, #799	; 0x31f
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	b29a      	uxth	r2, r3
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	f107 0120 	add.w	r1, r7, #32
 8002782:	440b      	add	r3, r1
 8002784:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8002788:	4b5a      	ldr	r3, [pc, #360]	; (80028f4 <BSP_TS_GetState+0x23c>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d011      	beq.n	80027b8 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	f107 0220 	add.w	r2, r7, #32
 800279c:	4413      	add	r3, r2
 800279e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80027a2:	f240 13df 	movw	r3, #479	; 0x1df
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	f107 0120 	add.w	r1, r7, #32
 80027b2:	440b      	add	r3, r1
 80027b4:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	f107 0220 	add.w	r2, r7, #32
 80027c0:	4413      	add	r3, r2
 80027c2:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80027c6:	4619      	mov	r1, r3
 80027c8:	4a4b      	ldr	r2, [pc, #300]	; (80028f8 <BSP_TS_GetState+0x240>)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d0:	4299      	cmp	r1, r3
 80027d2:	d90e      	bls.n	80027f2 <BSP_TS_GetState+0x13a>
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	f107 0220 	add.w	r2, r7, #32
 80027dc:	4413      	add	r3, r2
 80027de:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80027e2:	4945      	ldr	r1, [pc, #276]	; (80028f8 <BSP_TS_GetState+0x240>)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	e00d      	b.n	800280e <BSP_TS_GetState+0x156>
 80027f2:	4a41      	ldr	r2, [pc, #260]	; (80028f8 <BSP_TS_GetState+0x240>)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	f107 0120 	add.w	r1, r7, #32
 8002804:	440b      	add	r3, r1
 8002806:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	b29b      	uxth	r3, r3
 800280e:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	f107 0220 	add.w	r2, r7, #32
 8002818:	4413      	add	r3, r2
 800281a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800281e:	4619      	mov	r1, r3
 8002820:	4a36      	ldr	r2, [pc, #216]	; (80028fc <BSP_TS_GetState+0x244>)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002828:	4299      	cmp	r1, r3
 800282a:	d90e      	bls.n	800284a <BSP_TS_GetState+0x192>
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	f107 0220 	add.w	r2, r7, #32
 8002834:	4413      	add	r3, r2
 8002836:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800283a:	4930      	ldr	r1, [pc, #192]	; (80028fc <BSP_TS_GetState+0x244>)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002842:	b29b      	uxth	r3, r3
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	b29b      	uxth	r3, r3
 8002848:	e00d      	b.n	8002866 <BSP_TS_GetState+0x1ae>
 800284a:	4a2c      	ldr	r2, [pc, #176]	; (80028fc <BSP_TS_GetState+0x244>)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002852:	b29a      	uxth	r2, r3
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	f107 0120 	add.w	r1, r7, #32
 800285c:	440b      	add	r3, r1
 800285e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	b29b      	uxth	r3, r3
 8002866:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8002868:	8afa      	ldrh	r2, [r7, #22]
 800286a:	8abb      	ldrh	r3, [r7, #20]
 800286c:	4413      	add	r3, r2
 800286e:	2b05      	cmp	r3, #5
 8002870:	dd17      	ble.n	80028a2 <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	f107 0220 	add.w	r2, r7, #32
 800287a:	4413      	add	r3, r2
 800287c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002880:	4619      	mov	r1, r3
 8002882:	4a1d      	ldr	r2, [pc, #116]	; (80028f8 <BSP_TS_GetState+0x240>)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	f107 0220 	add.w	r2, r7, #32
 8002892:	4413      	add	r3, r2
 8002894:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002898:	4619      	mov	r1, r3
 800289a:	4a18      	ldr	r2, [pc, #96]	; (80028fc <BSP_TS_GetState+0x244>)
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 80028a2:	4a15      	ldr	r2, [pc, #84]	; (80028f8 <BSP_TS_GetState+0x240>)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028aa:	b299      	uxth	r1, r3
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	460a      	mov	r2, r1
 80028b6:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 80028b8:	4a10      	ldr	r2, [pc, #64]	; (80028fc <BSP_TS_GetState+0x244>)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c0:	b299      	uxth	r1, r3
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	460a      	mov	r2, r1
 80028cc:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3301      	adds	r3, #1
 80028d2:	61fb      	str	r3, [r7, #28]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	4293      	cmp	r3, r2
 80028de:	f4ff af05 	bcc.w	80026ec <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80028e2:	7efb      	ldrb	r3, [r7, #27]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3724      	adds	r7, #36	; 0x24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd90      	pop	{r4, r7, pc}
 80028ec:	200002dc 	.word	0x200002dc
 80028f0:	200002e1 	.word	0x200002e1
 80028f4:	200002e0 	.word	0x200002e0
 80028f8:	200002e4 	.word	0x200002e4
 80028fc:	200002ec 	.word	0x200002ec

08002900 <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <BSP_TS_INT_MspInit+0x44>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a0e      	ldr	r2, [pc, #56]	; (8002944 <BSP_TS_INT_MspInit+0x44>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <BSP_TS_INT_MspInit+0x44>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800291e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002922:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002924:	2300      	movs	r3, #0
 8002926:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002928:	2301      	movs	r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800292c:	2303      	movs	r3, #3
 800292e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	4619      	mov	r1, r3
 8002934:	4804      	ldr	r0, [pc, #16]	; (8002948 <BSP_TS_INT_MspInit+0x48>)
 8002936:	f002 fb21 	bl	8004f7c <HAL_GPIO_Init>
}
 800293a:	bf00      	nop
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	40022000 	.word	0x40022000

0800294c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002950:	2003      	movs	r0, #3
 8002952:	f000 fdfd 	bl	8003550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002956:	2000      	movs	r0, #0
 8002958:	f000 f806 	bl	8002968 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800295c:	f006 fbcc 	bl	80090f8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_InitTick+0x54>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_InitTick+0x58>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4619      	mov	r1, r3
 800297a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800297e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fe17 	bl	80035ba <HAL_SYSTICK_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e00e      	b.n	80029b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d80a      	bhi.n	80029b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800299c:	2200      	movs	r2, #0
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	f000 fddf 	bl	8003566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a8:	4a06      	ldr	r2, [pc, #24]	; (80029c4 <HAL_InitTick+0x5c>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000060 	.word	0x20000060
 80029c0:	2000005c 	.word	0x2000005c
 80029c4:	20000058 	.word	0x20000058

080029c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_IncTick+0x20>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_IncTick+0x24>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	4a04      	ldr	r2, [pc, #16]	; (80029ec <HAL_IncTick+0x24>)
 80029da:	6013      	str	r3, [r2, #0]
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	2000005c 	.word	0x2000005c
 80029ec:	2000055c 	.word	0x2000055c

080029f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return uwTick;
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_GetTick+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	2000055c 	.word	0x2000055c

08002a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a10:	f7ff ffee 	bl	80029f0 <HAL_GetTick>
 8002a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d005      	beq.n	8002a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_Delay+0x40>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a2e:	bf00      	nop
 8002a30:	f7ff ffde 	bl	80029f0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d8f7      	bhi.n	8002a30 <HAL_Delay+0x28>
  {
  }
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	2000005c 	.word	0x2000005c

08002a4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e031      	b.n	8002ac6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f006 fb68 	bl	8009140 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d116      	bne.n	8002ab8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <HAL_ADC_Init+0x84>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	f043 0202 	orr.w	r2, r3, #2
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fb84 	bl	80031a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f023 0303 	bic.w	r3, r3, #3
 8002aae:	f043 0201 	orr.w	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ab6:	e001      	b.n	8002abc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	ffffeefd 	.word	0xffffeefd

08002ad4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_Start_IT+0x1a>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e0a8      	b.n	8002c40 <HAL_ADC_Start_IT+0x16c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d018      	beq.n	8002b36 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002b14:	4b4d      	ldr	r3, [pc, #308]	; (8002c4c <HAL_ADC_Start_IT+0x178>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a4d      	ldr	r2, [pc, #308]	; (8002c50 <HAL_ADC_Start_IT+0x17c>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	0c9a      	lsrs	r2, r3, #18
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002b28:	e002      	b.n	8002b30 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f9      	bne.n	8002b2a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d17c      	bne.n	8002c3e <HAL_ADC_Start_IT+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b48:	4b42      	ldr	r3, [pc, #264]	; (8002c54 <HAL_ADC_Start_IT+0x180>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d007      	beq.n	8002b72 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7e:	d106      	bne.n	8002b8e <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b84:	f023 0206 	bic.w	r2, r3, #6
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	645a      	str	r2, [r3, #68]	; 0x44
 8002b8c:	e002      	b.n	8002b94 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ba4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <HAL_ADC_Start_IT+0x184>)
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002bb6:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <HAL_ADC_Start_IT+0x188>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10f      	bne.n	8002be2 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d136      	bne.n	8002c3e <HAL_ADC_Start_IT+0x16a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	e02d      	b.n	8002c3e <HAL_ADC_Start_IT+0x16a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <HAL_ADC_Start_IT+0x18c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d10e      	bne.n	8002c0a <HAL_ADC_Start_IT+0x136>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d107      	bne.n	8002c0a <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c08:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002c0a:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <HAL_ADC_Start_IT+0x188>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d113      	bne.n	8002c3e <HAL_ADC_Start_IT+0x16a>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <HAL_ADC_Start_IT+0x190>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d10e      	bne.n	8002c3e <HAL_ADC_Start_IT+0x16a>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d107      	bne.n	8002c3e <HAL_ADC_Start_IT+0x16a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c3c:	609a      	str	r2, [r3, #8]
      } 
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	20000060 	.word	0x20000060
 8002c50:	431bde83 	.word	0x431bde83
 8002c54:	fffff8fe 	.word	0xfffff8fe
 8002c58:	04000020 	.word	0x04000020
 8002c5c:	40012300 	.word	0x40012300
 8002c60:	40012000 	.word	0x40012000
 8002c64:	40012200 	.word	0x40012200

08002c68 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	2300      	movs	r3, #0
 8002c76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	bf0c      	ite	eq
 8002c86:	2301      	moveq	r3, #1
 8002c88:	2300      	movne	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d049      	beq.n	8002d3e <HAL_ADC_IRQHandler+0xd6>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d046      	beq.n	8002d3e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d105      	bne.n	8002cc8 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d12b      	bne.n	8002d2e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d127      	bne.n	8002d2e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d006      	beq.n	8002cfa <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d119      	bne.n	8002d2e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0220 	bic.w	r2, r2, #32
 8002d08:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d105      	bne.n	8002d2e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0201 	orr.w	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f8e8 	bl	8002f04 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0212 	mvn.w	r2, #18
 8002d3c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	bf0c      	ite	eq
 8002d4c:	2301      	moveq	r3, #1
 8002d4e:	2300      	movne	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5e:	2b80      	cmp	r3, #128	; 0x80
 8002d60:	bf0c      	ite	eq
 8002d62:	2301      	moveq	r3, #1
 8002d64:	2300      	movne	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d057      	beq.n	8002e20 <HAL_ADC_IRQHandler+0x1b8>
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d054      	beq.n	8002e20 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d105      	bne.n	8002d8e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d139      	bne.n	8002e10 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d12b      	bne.n	8002e10 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d124      	bne.n	8002e10 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d11d      	bne.n	8002e10 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d119      	bne.n	8002e10 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d105      	bne.n	8002e10 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	f043 0201 	orr.w	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fac3 	bl	800339c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f06f 020c 	mvn.w	r2, #12
 8002e1e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2301      	moveq	r3, #1
 8002e30:	2300      	movne	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d017      	beq.n	8002e82 <HAL_ADC_IRQHandler+0x21a>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d014      	beq.n	8002e82 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d10d      	bne.n	8002e82 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f850 	bl	8002f18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0201 	mvn.w	r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ea2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d015      	beq.n	8002ee2 <HAL_ADC_IRQHandler+0x27a>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d012      	beq.n	8002ee2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	f043 0202 	orr.w	r2, r3, #2
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0220 	mvn.w	r2, #32
 8002ed0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f82a 	bl	8002f2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0220 	mvn.w	r2, #32
 8002ee0:	601a      	str	r2, [r3, #0]
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x1c>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e115      	b.n	8003188 <HAL_ADC_ConfigChannel+0x248>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b09      	cmp	r3, #9
 8002f6a:	d935      	bls.n	8002fd8 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68d9      	ldr	r1, [r3, #12]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	3b1e      	subs	r3, #30
 8002f82:	2207      	movs	r2, #7
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	400a      	ands	r2, r1
 8002f90:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a7f      	ldr	r2, [pc, #508]	; (8003194 <HAL_ADC_ConfigChannel+0x254>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d10a      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68d9      	ldr	r1, [r3, #12]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	061a      	lsls	r2, r3, #24
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	60da      	str	r2, [r3, #12]
 8002fb0:	e035      	b.n	800301e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68d9      	ldr	r1, [r3, #12]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	4403      	add	r3, r0
 8002fca:	3b1e      	subs	r3, #30
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	e022      	b.n	800301e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6919      	ldr	r1, [r3, #16]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	4413      	add	r3, r2
 8002fec:	2207      	movs	r2, #7
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	400a      	ands	r2, r1
 8002ffa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6919      	ldr	r1, [r3, #16]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	b29b      	uxth	r3, r3
 800300c:	4618      	mov	r0, r3
 800300e:	4603      	mov	r3, r0
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	4403      	add	r3, r0
 8003014:	409a      	lsls	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b06      	cmp	r3, #6
 8003024:	d824      	bhi.n	8003070 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	3b05      	subs	r3, #5
 8003038:	221f      	movs	r2, #31
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43da      	mvns	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	400a      	ands	r2, r1
 8003046:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	b29b      	uxth	r3, r3
 8003054:	4618      	mov	r0, r3
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	3b05      	subs	r3, #5
 8003062:	fa00 f203 	lsl.w	r2, r0, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	635a      	str	r2, [r3, #52]	; 0x34
 800306e:	e04c      	b.n	800310a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b0c      	cmp	r3, #12
 8003076:	d824      	bhi.n	80030c2 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	3b23      	subs	r3, #35	; 0x23
 800308a:	221f      	movs	r2, #31
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43da      	mvns	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	400a      	ands	r2, r1
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	4618      	mov	r0, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	3b23      	subs	r3, #35	; 0x23
 80030b4:	fa00 f203 	lsl.w	r2, r0, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
 80030c0:	e023      	b.n	800310a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	3b41      	subs	r3, #65	; 0x41
 80030d4:	221f      	movs	r2, #31
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	400a      	ands	r2, r1
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	4618      	mov	r0, r3
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	3b41      	subs	r3, #65	; 0x41
 80030fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a22      	ldr	r2, [pc, #136]	; (8003198 <HAL_ADC_ConfigChannel+0x258>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d109      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x1e8>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b12      	cmp	r3, #18
 800311a:	d105      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800311c:	4b1f      	ldr	r3, [pc, #124]	; (800319c <HAL_ADC_ConfigChannel+0x25c>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4a1e      	ldr	r2, [pc, #120]	; (800319c <HAL_ADC_ConfigChannel+0x25c>)
 8003122:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003126:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1a      	ldr	r2, [pc, #104]	; (8003198 <HAL_ADC_ConfigChannel+0x258>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d125      	bne.n	800317e <HAL_ADC_ConfigChannel+0x23e>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a17      	ldr	r2, [pc, #92]	; (8003194 <HAL_ADC_ConfigChannel+0x254>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <HAL_ADC_ConfigChannel+0x204>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b11      	cmp	r3, #17
 8003142:	d11c      	bne.n	800317e <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003144:	4b15      	ldr	r3, [pc, #84]	; (800319c <HAL_ADC_ConfigChannel+0x25c>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a14      	ldr	r2, [pc, #80]	; (800319c <HAL_ADC_ConfigChannel+0x25c>)
 800314a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800314e:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0f      	ldr	r2, [pc, #60]	; (8003194 <HAL_ADC_ConfigChannel+0x254>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d111      	bne.n	800317e <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <HAL_ADC_ConfigChannel+0x260>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a11      	ldr	r2, [pc, #68]	; (80031a4 <HAL_ADC_ConfigChannel+0x264>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	0c9a      	lsrs	r2, r3, #18
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003170:	e002      	b.n	8003178 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3b01      	subs	r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f9      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	10000012 	.word	0x10000012
 8003198:	40012000 	.word	0x40012000
 800319c:	40012300 	.word	0x40012300
 80031a0:	20000060 	.word	0x20000060
 80031a4:	431bde83 	.word	0x431bde83

080031a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80031b0:	4b78      	ldr	r3, [pc, #480]	; (8003394 <ADC_Init+0x1ec>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4a77      	ldr	r2, [pc, #476]	; (8003394 <ADC_Init+0x1ec>)
 80031b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80031ba:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80031bc:	4b75      	ldr	r3, [pc, #468]	; (8003394 <ADC_Init+0x1ec>)
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4973      	ldr	r1, [pc, #460]	; (8003394 <ADC_Init+0x1ec>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	021a      	lsls	r2, r3, #8
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800321e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6899      	ldr	r1, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	4a58      	ldr	r2, [pc, #352]	; (8003398 <ADC_Init+0x1f0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d022      	beq.n	8003282 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800324a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6899      	ldr	r1, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800326c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6899      	ldr	r1, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	e00f      	b.n	80032a2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003290:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0202 	bic.w	r2, r2, #2
 80032b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6899      	ldr	r1, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	005a      	lsls	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01b      	beq.n	8003308 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	3b01      	subs	r3, #1
 80032fc:	035a      	lsls	r2, r3, #13
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	e007      	b.n	8003318 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003316:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003326:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	3b01      	subs	r3, #1
 8003334:	051a      	lsls	r2, r3, #20
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800334c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6899      	ldr	r1, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800335a:	025a      	lsls	r2, r3, #9
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003372:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6899      	ldr	r1, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	029a      	lsls	r2, r3, #10
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	609a      	str	r2, [r3, #8]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	40012300 	.word	0x40012300
 8003398:	0f000001 	.word	0x0f000001

0800339c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <__NVIC_SetPriorityGrouping+0x40>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033cc:	4013      	ands	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033de:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <__NVIC_SetPriorityGrouping+0x40>)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	60d3      	str	r3, [r2, #12]
}
 80033e4:	bf00      	nop
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000ed00 	.word	0xe000ed00
 80033f4:	05fa0000 	.word	0x05fa0000

080033f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <__NVIC_GetPriorityGrouping+0x18>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	f003 0307 	and.w	r3, r3, #7
}
 8003406:	4618      	mov	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	2b00      	cmp	r3, #0
 8003424:	db0b      	blt.n	800343e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	f003 021f 	and.w	r2, r3, #31
 800342c:	4907      	ldr	r1, [pc, #28]	; (800344c <__NVIC_EnableIRQ+0x38>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	2001      	movs	r0, #1
 8003436:	fa00 f202 	lsl.w	r2, r0, r2
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000e100 	.word	0xe000e100

08003450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	6039      	str	r1, [r7, #0]
 800345a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003460:	2b00      	cmp	r3, #0
 8003462:	db0a      	blt.n	800347a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	b2da      	uxtb	r2, r3
 8003468:	490c      	ldr	r1, [pc, #48]	; (800349c <__NVIC_SetPriority+0x4c>)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	0112      	lsls	r2, r2, #4
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	440b      	add	r3, r1
 8003474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003478:	e00a      	b.n	8003490 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4908      	ldr	r1, [pc, #32]	; (80034a0 <__NVIC_SetPriority+0x50>)
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	3b04      	subs	r3, #4
 8003488:	0112      	lsls	r2, r2, #4
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	440b      	add	r3, r1
 800348e:	761a      	strb	r2, [r3, #24]
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000e100 	.word	0xe000e100
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b089      	sub	sp, #36	; 0x24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f1c3 0307 	rsb	r3, r3, #7
 80034be:	2b04      	cmp	r3, #4
 80034c0:	bf28      	it	cs
 80034c2:	2304      	movcs	r3, #4
 80034c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3304      	adds	r3, #4
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d902      	bls.n	80034d4 <NVIC_EncodePriority+0x30>
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3b03      	subs	r3, #3
 80034d2:	e000      	b.n	80034d6 <NVIC_EncodePriority+0x32>
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d8:	f04f 32ff 	mov.w	r2, #4294967295
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	401a      	ands	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ec:	f04f 31ff 	mov.w	r1, #4294967295
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	43d9      	mvns	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034fc:	4313      	orrs	r3, r2
         );
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3724      	adds	r7, #36	; 0x24
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3b01      	subs	r3, #1
 8003518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800351c:	d301      	bcc.n	8003522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800351e:	2301      	movs	r3, #1
 8003520:	e00f      	b.n	8003542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003522:	4a0a      	ldr	r2, [pc, #40]	; (800354c <SysTick_Config+0x40>)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800352a:	210f      	movs	r1, #15
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	f7ff ff8e 	bl	8003450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <SysTick_Config+0x40>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800353a:	4b04      	ldr	r3, [pc, #16]	; (800354c <SysTick_Config+0x40>)
 800353c:	2207      	movs	r2, #7
 800353e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	e000e010 	.word	0xe000e010

08003550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ff29 	bl	80033b0 <__NVIC_SetPriorityGrouping>
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003566:	b580      	push	{r7, lr}
 8003568:	b086      	sub	sp, #24
 800356a:	af00      	add	r7, sp, #0
 800356c:	4603      	mov	r3, r0
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003578:	f7ff ff3e 	bl	80033f8 <__NVIC_GetPriorityGrouping>
 800357c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	6978      	ldr	r0, [r7, #20]
 8003584:	f7ff ff8e 	bl	80034a4 <NVIC_EncodePriority>
 8003588:	4602      	mov	r2, r0
 800358a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358e:	4611      	mov	r1, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff ff5d 	bl	8003450 <__NVIC_SetPriority>
}
 8003596:	bf00      	nop
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	4603      	mov	r3, r0
 80035a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff31 	bl	8003414 <__NVIC_EnableIRQ>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ffa2 	bl	800350c <SysTick_Config>
 80035c8:	4603      	mov	r3, r0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035e0:	f7ff fa06 	bl	80029f0 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e099      	b.n	8003724 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003610:	e00f      	b.n	8003632 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003612:	f7ff f9ed 	bl	80029f0 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b05      	cmp	r3, #5
 800361e:	d908      	bls.n	8003632 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2203      	movs	r2, #3
 800362a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e078      	b.n	8003724 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e8      	bne.n	8003612 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4b38      	ldr	r3, [pc, #224]	; (800372c <HAL_DMA_Init+0x158>)
 800364c:	4013      	ands	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800365e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800366a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	2b04      	cmp	r3, #4
 800368a:	d107      	bne.n	800369c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	4313      	orrs	r3, r2
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0307 	bic.w	r3, r3, #7
 80036b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d117      	bne.n	80036f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00e      	beq.n	80036f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f8bd 	bl	8003858 <DMA_CheckFifoParam>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2240      	movs	r2, #64	; 0x40
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036f2:	2301      	movs	r3, #1
 80036f4:	e016      	b.n	8003724 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f874 	bl	80037ec <DMA_CalcBaseAndBitshift>
 8003704:	4603      	mov	r3, r0
 8003706:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370c:	223f      	movs	r2, #63	; 0x3f
 800370e:	409a      	lsls	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	e010803f 	.word	0xe010803f

08003730 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e050      	b.n	80037e4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d101      	bne.n	8003752 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800374e:	2302      	movs	r3, #2
 8003750:	e048      	b.n	80037e4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2200      	movs	r2, #0
 8003770:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2200      	movs	r2, #0
 8003780:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2221      	movs	r2, #33	; 0x21
 8003790:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f82a 	bl	80037ec <DMA_CalcBaseAndBitshift>
 8003798:	4603      	mov	r3, r0
 800379a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a0:	223f      	movs	r2, #63	; 0x3f
 80037a2:	409a      	lsls	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	3b10      	subs	r3, #16
 80037fc:	4a13      	ldr	r2, [pc, #76]	; (800384c <DMA_CalcBaseAndBitshift+0x60>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003806:	4a12      	ldr	r2, [pc, #72]	; (8003850 <DMA_CalcBaseAndBitshift+0x64>)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4413      	add	r3, r2
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b03      	cmp	r3, #3
 8003818:	d908      	bls.n	800382c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <DMA_CalcBaseAndBitshift+0x68>)
 8003822:	4013      	ands	r3, r2
 8003824:	1d1a      	adds	r2, r3, #4
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	659a      	str	r2, [r3, #88]	; 0x58
 800382a:	e006      	b.n	800383a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	4b08      	ldr	r3, [pc, #32]	; (8003854 <DMA_CalcBaseAndBitshift+0x68>)
 8003834:	4013      	ands	r3, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	aaaaaaab 	.word	0xaaaaaaab
 8003850:	0800c82c 	.word	0x0800c82c
 8003854:	fffffc00 	.word	0xfffffc00

08003858 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d11f      	bne.n	80038b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d855      	bhi.n	8003924 <DMA_CheckFifoParam+0xcc>
 8003878:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <DMA_CheckFifoParam+0x28>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	08003891 	.word	0x08003891
 8003884:	080038a3 	.word	0x080038a3
 8003888:	08003891 	.word	0x08003891
 800388c:	08003925 	.word	0x08003925
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d045      	beq.n	8003928 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a0:	e042      	b.n	8003928 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038aa:	d13f      	bne.n	800392c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b0:	e03c      	b.n	800392c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ba:	d121      	bne.n	8003900 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d836      	bhi.n	8003930 <DMA_CheckFifoParam+0xd8>
 80038c2:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <DMA_CheckFifoParam+0x70>)
 80038c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038df 	.word	0x080038df
 80038d0:	080038d9 	.word	0x080038d9
 80038d4:	080038f1 	.word	0x080038f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      break;
 80038dc:	e02f      	b.n	800393e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d024      	beq.n	8003934 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ee:	e021      	b.n	8003934 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038f8:	d11e      	bne.n	8003938 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038fe:	e01b      	b.n	8003938 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d902      	bls.n	800390c <DMA_CheckFifoParam+0xb4>
 8003906:	2b03      	cmp	r3, #3
 8003908:	d003      	beq.n	8003912 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800390a:	e018      	b.n	800393e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
      break;
 8003910:	e015      	b.n	800393e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00e      	beq.n	800393c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
      break;
 8003922:	e00b      	b.n	800393c <DMA_CheckFifoParam+0xe4>
      break;
 8003924:	bf00      	nop
 8003926:	e00a      	b.n	800393e <DMA_CheckFifoParam+0xe6>
      break;
 8003928:	bf00      	nop
 800392a:	e008      	b.n	800393e <DMA_CheckFifoParam+0xe6>
      break;
 800392c:	bf00      	nop
 800392e:	e006      	b.n	800393e <DMA_CheckFifoParam+0xe6>
      break;
 8003930:	bf00      	nop
 8003932:	e004      	b.n	800393e <DMA_CheckFifoParam+0xe6>
      break;
 8003934:	bf00      	nop
 8003936:	e002      	b.n	800393e <DMA_CheckFifoParam+0xe6>
      break;   
 8003938:	bf00      	nop
 800393a:	e000      	b.n	800393e <DMA_CheckFifoParam+0xe6>
      break;
 800393c:	bf00      	nop
    }
  } 
  
  return status; 
 800393e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e049      	b.n	80039f2 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f005 fc0a 	bl	800918c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399c:	f023 0107 	bic.w	r1, r3, #7
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <HAL_DMA2D_Init+0xb0>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68d1      	ldr	r1, [r2, #12]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	430b      	orrs	r3, r1
 80039c0:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	051a      	lsls	r2, r3, #20
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	055b      	lsls	r3, r3, #21
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	ffffc000 	.word	0xffffc000

08003a00 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_DMA2D_Start+0x1c>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e018      	b.n	8003a4e <HAL_DMA2D_Start+0x4e>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f994 	bl	8003d64 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b086      	sub	sp, #24
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d056      	beq.n	8003b20 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003a72:	f7fe ffbd 	bl	80029f0 <HAL_GetTick>
 8003a76:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003a78:	e04b      	b.n	8003b12 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d023      	beq.n	8003ad4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	f043 0202 	orr.w	r2, r3, #2
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab0:	f043 0201 	orr.w	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2221      	movs	r2, #33	; 0x21
 8003abe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0a5      	b.n	8003c20 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d01a      	beq.n	8003b12 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003adc:	f7fe ff88 	bl	80029f0 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d302      	bcc.n	8003af2 <HAL_DMA2D_PollForTransfer+0x9c>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10f      	bne.n	8003b12 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af6:	f043 0220 	orr.w	r2, r3, #32
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2203      	movs	r2, #3
 8003b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e086      	b.n	8003c20 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ac      	beq.n	8003a7a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d061      	beq.n	8003c06 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b42:	f7fe ff55 	bl	80029f0 <HAL_GetTick>
 8003b46:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003b48:	e056      	b.n	8003bf8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d02e      	beq.n	8003bba <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6a:	f043 0204 	orr.w	r2, r3, #4
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	f043 0202 	orr.w	r2, r3, #2
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	f043 0201 	orr.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2229      	movs	r2, #41	; 0x29
 8003ba4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2204      	movs	r2, #4
 8003baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e032      	b.n	8003c20 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc0:	d01a      	beq.n	8003bf8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003bc2:	f7fe ff15 	bl	80029f0 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <HAL_DMA2D_PollForTransfer+0x182>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10f      	bne.n	8003bf8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	f043 0220 	orr.w	r2, r3, #32
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2203      	movs	r2, #3
 8003be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e013      	b.n	8003c20 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0a1      	beq.n	8003b4a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2212      	movs	r2, #18
 8003c0c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_DMA2D_ConfigLayer+0x20>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e084      	b.n	8003d52 <HAL_DMA2D_ConfigLayer+0x12a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	4413      	add	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	3320      	adds	r3, #32
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4413      	add	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003c7c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003c88:	4b35      	ldr	r3, [pc, #212]	; (8003d60 <HAL_DMA2D_ConfigLayer+0x138>)
 8003c8a:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b0a      	cmp	r3, #10
 8003c92:	d003      	beq.n	8003c9c <HAL_DMA2D_ConfigLayer+0x74>
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b09      	cmp	r3, #9
 8003c9a:	d107      	bne.n	8003cac <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	e005      	b.n	8003cb8 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	061b      	lsls	r3, r3, #24
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d120      	bne.n	8003d00 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	ea02 0103 	and.w	r1, r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b0a      	cmp	r3, #10
 8003ce6:	d003      	beq.n	8003cf0 <HAL_DMA2D_ConfigLayer+0xc8>
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b09      	cmp	r3, #9
 8003cee:	d127      	bne.n	8003d40 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003cfc:	629a      	str	r2, [r3, #40]	; 0x28
 8003cfe:	e01f      	b.n	8003d40 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69da      	ldr	r2, [r3, #28]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	ea02 0103 	and.w	r1, r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b0a      	cmp	r3, #10
 8003d28:	d003      	beq.n	8003d32 <HAL_DMA2D_ConfigLayer+0x10a>
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b09      	cmp	r3, #9
 8003d30:	d106      	bne.n	8003d40 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d3e:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	ff33000f 	.word	0xff33000f

08003d64 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b08b      	sub	sp, #44	; 0x2c
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d78:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	041a      	lsls	r2, r3, #16
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	431a      	orrs	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d9c:	d174      	bne.n	8003e88 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003da4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003dac:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003db4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d108      	bne.n	8003dd6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd4:	e053      	b.n	8003e7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d106      	bne.n	8003dec <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dea:	e048      	b.n	8003e7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d111      	bne.n	8003e18 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	0cdb      	lsrs	r3, r3, #19
 8003df8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	0a9b      	lsrs	r3, r3, #10
 8003dfe:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	08db      	lsrs	r3, r3, #3
 8003e04:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	02db      	lsls	r3, r3, #11
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	e032      	b.n	8003e7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d117      	bne.n	8003e50 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	0fdb      	lsrs	r3, r3, #31
 8003e24:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	0cdb      	lsrs	r3, r3, #19
 8003e2a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	0adb      	lsrs	r3, r3, #11
 8003e30:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	08db      	lsrs	r3, r3, #3
 8003e36:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	029b      	lsls	r3, r3, #10
 8003e40:	431a      	orrs	r2, r3
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	03db      	lsls	r3, r3, #15
 8003e46:	4313      	orrs	r3, r2
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4e:	e016      	b.n	8003e7e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	0f1b      	lsrs	r3, r3, #28
 8003e54:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	0d1b      	lsrs	r3, r3, #20
 8003e5a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	0b1b      	lsrs	r3, r3, #12
 8003e60:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	011a      	lsls	r2, r3, #4
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	431a      	orrs	r2, r3
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	031b      	lsls	r3, r3, #12
 8003e76:	4313      	orrs	r3, r2
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003e86:	e003      	b.n	8003e90 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	60da      	str	r2, [r3, #12]
}
 8003e90:	bf00      	nop
 8003e92:	372c      	adds	r7, #44	; 0x2c
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	019a      	lsls	r2, r3, #6
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	041b      	lsls	r3, r3, #16
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b086      	sub	sp, #24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003edc:	f7fe fd88 	bl	80029f0 <HAL_GetTick>
 8003ee0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003ee2:	e009      	b.n	8003ef8 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003ee4:	f7fe fd84 	bl	80029f0 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ef2:	d901      	bls.n	8003ef8 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e015      	b.n	8003f24 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0ee      	beq.n	8003ee4 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	019a      	lsls	r2, r3, #6
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	ea42 0103 	orr.w	r1, r2, r3
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	041a      	lsls	r2, r3, #16
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e106      	b.n	800414e <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	7c5b      	ldrb	r3, [r3, #17]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d102      	bne.n	8003f50 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f005 f93e 	bl	80091cc <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2203      	movs	r2, #3
 8003f54:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003f6a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f7e:	f7fe fd37 	bl	80029f0 <HAL_GetTick>
 8003f82:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003f84:	e009      	b.n	8003f9a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003f86:	f7fe fd33 	bl	80029f0 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f94:	d901      	bls.n	8003f9a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e0d9      	b.n	800414e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0ed      	beq.n	8003f86 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4b68      	ldr	r3, [pc, #416]	; (8004158 <HAL_DSI_Init+0x22c>)
 8003fb8:	400b      	ands	r3, r1
 8003fba:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	009a      	lsls	r2, r3, #2
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	02db      	lsls	r3, r3, #11
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	041b      	lsls	r3, r3, #16
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800400e:	f7fe fcef 	bl	80029f0 <HAL_GetTick>
 8004012:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004014:	e009      	b.n	800402a <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004016:	f7fe fceb 	bl	80029f0 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004024:	d901      	bls.n	800402a <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e091      	b.n	800414e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0ed      	beq.n	8004016 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0206 	orr.w	r2, r2, #6
 800404a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0203 	bic.w	r2, r2, #3
 800405e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0201 	orr.w	r2, r2, #1
 8004078:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0203 	bic.w	r2, r2, #3
 800408c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040b4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6899      	ldr	r1, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <HAL_DSI_Init+0x1aa>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	e000      	b.n	80040d8 <HAL_DSI_Init+0x1ac>
 80040d6:	2301      	movs	r3, #1
 80040d8:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	4a1f      	ldr	r2, [pc, #124]	; (800415c <HAL_DSI_Init+0x230>)
 80040de:	fb02 f203 	mul.w	r2, r2, r3
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	409a      	lsls	r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800410e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	430a      	orrs	r2, r1
 8004122:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2200      	movs	r2, #0
 800412c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2200      	movs	r2, #0
 8004136:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	fffc8603 	.word	0xfffc8603
 800415c:	003d0900 	.word	0x003d0900

08004160 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e066      	b.n	8004240 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2203      	movs	r2, #3
 8004176:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0208 	bic.w	r2, r2, #8
 800418c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80041a0:	2300      	movs	r3, #0
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0201 	bic.w	r2, r2, #1
 80041b2:	605a      	str	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0206 	bic.w	r2, r2, #6
 80041d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80041fe:	2300      	movs	r3, #0
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004212:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800421e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f005 f814 	bl	8009254 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	7c1b      	ldrb	r3, [r3, #16]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_DSI_ConfigErrorMonitor+0x16>
 800425a:	2302      	movs	r3, #2
 800425c:	e0aa      	b.n	80043b4 <HAL_DSI_ConfigErrorMonitor+0x16c>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2200      	movs	r2, #0
 800426a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2200      	movs	r2, #0
 8004274:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004298:	430b      	orrs	r3, r1
 800429a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d009      	beq.n	80042bc <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80042b8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d009      	beq.n	80042da <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0201 	orr.w	r2, r2, #1
 80042d6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0202 	orr.w	r2, r2, #2
 80042f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 020c 	orr.w	r2, r2, #12
 8004312:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b00      	cmp	r3, #0
 800431e:	d009      	beq.n	8004334 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0210 	orr.w	r2, r2, #16
 8004330:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0220 	orr.w	r2, r2, #32
 800434e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004358:	2b00      	cmp	r3, #0
 800435a:	d009      	beq.n	8004370 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800436c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800438a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004394:	2b00      	cmp	r3, #0
 8004396:	d009      	beq.n	80043ac <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80043a8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	7c1b      	ldrb	r3, [r3, #16]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_DSI_SetGenericVCID+0x16>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e016      	b.n	8004404 <HAL_DSI_SetGenericVCID+0x44>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0203 	bic.w	r2, r2, #3
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	7c1b      	ldrb	r3, [r3, #16]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_DSI_ConfigVideoMode+0x16>
 8004422:	2302      	movs	r3, #2
 8004424:	e1ee      	b.n	8004804 <HAL_DSI_ConfigVideoMode+0x3f4>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0201 	bic.w	r2, r2, #1
 800444c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0203 	bic.w	r2, r2, #3
 800445e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	4b8b      	ldr	r3, [pc, #556]	; (80046ac <HAL_DSI_ConfigVideoMode+0x29c>)
 800447e:	400b      	ands	r3, r1
 8004480:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b84      	ldr	r3, [pc, #528]	; (80046b0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80044a0:	400b      	ands	r3, r1
 80044a2:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4b7b      	ldr	r3, [pc, #492]	; (80046b0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80044c2:	400b      	ands	r3, r1
 80044c4:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	699a      	ldr	r2, [r3, #24]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0203 	bic.w	r2, r2, #3
 80044e6:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68d9      	ldr	r1, [r3, #12]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0207 	bic.w	r2, r2, #7
 8004508:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6959      	ldr	r1, [r3, #20]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	431a      	orrs	r2, r3
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 020f 	bic.w	r2, r2, #15
 8004536:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6919      	ldr	r1, [r3, #16]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 020e 	bic.w	r2, r2, #14
 800455a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	005a      	lsls	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b03      	cmp	r3, #3
 800457c:	d110      	bne.n	80045a0 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800458c:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6919      	ldr	r1, [r3, #16]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b42      	ldr	r3, [pc, #264]	; (80046b4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80045ac:	400b      	ands	r3, r1
 80045ae:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4b39      	ldr	r3, [pc, #228]	; (80046b4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80045ce:	400b      	ands	r3, r1
 80045d0:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4b32      	ldr	r3, [pc, #200]	; (80046b8 <HAL_DSI_ConfigVideoMode+0x2a8>)
 80045f0:	400b      	ands	r3, r1
 80045f2:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b2a      	ldr	r3, [pc, #168]	; (80046bc <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004612:	400b      	ands	r3, r1
 8004614:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4b22      	ldr	r3, [pc, #136]	; (80046bc <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004634:	400b      	ands	r3, r1
 8004636:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b19      	ldr	r3, [pc, #100]	; (80046bc <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004656:	400b      	ands	r3, r1
 8004658:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <HAL_DSI_ConfigVideoMode+0x29c>)
 8004678:	400b      	ands	r3, r1
 800467a:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a8:	e00a      	b.n	80046c0 <HAL_DSI_ConfigVideoMode+0x2b0>
 80046aa:	bf00      	nop
 80046ac:	ffffc000 	.word	0xffffc000
 80046b0:	ffffe000 	.word	0xffffe000
 80046b4:	fffff000 	.word	0xfffff000
 80046b8:	ffff8000 	.word	0xffff8000
 80046bc:	fffffc00 	.word	0xfffffc00
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80046d6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6999      	ldr	r1, [r3, #24]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e2:	041a      	lsls	r2, r3, #16
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046fa:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6999      	ldr	r1, [r3, #24]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800471c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800473e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004760:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004782:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047a4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047c6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047e8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	7c1b      	ldrb	r3, [r3, #16]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004822:	2302      	movs	r3, #2
 8004824:	e0c5      	b.n	80049b2 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0201 	orr.w	r2, r2, #1
 8004860:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0203 	bic.w	r2, r2, #3
 8004872:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68d9      	ldr	r1, [r3, #12]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695a      	ldr	r2, [r3, #20]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0207 	bic.w	r2, r2, #7
 8004894:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6959      	ldr	r1, [r3, #20]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	431a      	orrs	r2, r3
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 020f 	bic.w	r2, r2, #15
 80048c2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6919      	ldr	r1, [r3, #16]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 020e 	bic.w	r2, r2, #14
 80048e6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	005a      	lsls	r2, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	4b2c      	ldr	r3, [pc, #176]	; (80049c0 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800490e:	400b      	ands	r3, r1
 8004910:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004934:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	431a      	orrs	r2, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0202 	orr.w	r2, r2, #2
 80049a6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	ffff0000 	.word	0xffff0000

080049c4 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	7c1b      	ldrb	r3, [r3, #16]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_DSI_ConfigCommand+0x16>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e049      	b.n	8004a6e <HAL_DSI_ConfigCommand+0xaa>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b24      	ldr	r3, [pc, #144]	; (8004a7c <HAL_DSI_ConfigCommand+0xb8>)
 80049ec:	400b      	ands	r3, r1
 80049ee:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80049fe:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004a04:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004a0a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004a10:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004a16:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004a1c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004a22:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004a28:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004a2e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004a34:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004a3a:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0202 	bic.w	r2, r2, #2
 8004a52:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	fef080ff 	.word	0xfef080ff

08004a80 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	7c1b      	ldrb	r3, [r3, #16]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_DSI_ConfigFlowControl+0x16>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e016      	b.n	8004ac4 <HAL_DSI_ConfigFlowControl+0x44>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 021f 	bic.w	r2, r2, #31
 8004aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	7c1b      	ldrb	r3, [r3, #16]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_DSI_ConfigPhyTimer+0x16>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e058      	b.n	8004b98 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	4293      	cmp	r3, r2
 8004af6:	bf38      	it	cc
 8004af8:	4613      	movcc	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004b0c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	041a      	lsls	r2, r3, #16
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004b3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	041b      	lsls	r3, r3, #16
 8004b50:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004b74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	021a      	lsls	r2, r3, #8
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	7c1b      	ldrb	r3, [r3, #16]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <HAL_DSI_ConfigHostTimeouts+0x16>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e0b4      	b.n	8004d24 <HAL_DSI_ConfigHostTimeouts+0x180>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004bce:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6899      	ldr	r1, [r3, #8]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	021a      	lsls	r2, r3, #8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	b292      	uxth	r2, r2
 8004bf0:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	041a      	lsls	r2, r3, #16
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4b47      	ldr	r3, [pc, #284]	; (8004d30 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c12:	400b      	ands	r3, r1
 8004c14:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	4b3f      	ldr	r3, [pc, #252]	; (8004d30 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c34:	400b      	ands	r3, r1
 8004c36:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	4b36      	ldr	r3, [pc, #216]	; (8004d30 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c58:	400b      	ands	r3, r1
 8004c5a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4b2b      	ldr	r3, [pc, #172]	; (8004d30 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c82:	400b      	ands	r3, r1
 8004c84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	695a      	ldr	r2, [r3, #20]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	4b16      	ldr	r3, [pc, #88]	; (8004d30 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004cd6:	400b      	ands	r3, r1
 8004cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	69da      	ldr	r2, [r3, #28]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004d00:	400b      	ands	r3, r1
 8004d02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6a1a      	ldr	r2, [r3, #32]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	ffff0000 	.word	0xffff0000

08004d34 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7c1b      	ldrb	r3, [r3, #16]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_DSI_Start+0x14>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e02b      	b.n	8004da0 <HAL_DSI_Start+0x6c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0201 	orr.w	r2, r2, #1
 8004d60:	605a      	str	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004d70:	2300      	movs	r3, #0
 8004d72:	60bb      	str	r3, [r7, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0208 	orr.w	r2, r2, #8
 8004d84:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	7c1b      	ldrb	r3, [r3, #16]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_DSI_ShortWrite+0x1a>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e010      	b.n	8004de8 <HAL_DSI_ShortWrite+0x3c>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7ff f879 	bl	8003ece <DSI_ShortWrite>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	741a      	strb	r2, [r3, #16]

  return status;
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08c      	sub	sp, #48	; 0x30
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e00:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	7c1b      	ldrb	r3, [r3, #16]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_DSI_LongWrite+0x1e>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e084      	b.n	8004f18 <HAL_DSI_LongWrite+0x128>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e14:	f7fd fdec 	bl	80029f0 <HAL_GetTick>
 8004e18:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004e1a:	e00c      	b.n	8004e36 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004e1c:	f7fd fde8 	bl	80029f0 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e2a:	d904      	bls.n	8004e36 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e070      	b.n	8004f18 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0eb      	beq.n	8004e1c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	bf28      	it	cs
 8004e4e:	2303      	movcs	r3, #3
 8004e50:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004e52:	2300      	movs	r3, #0
 8004e54:	623b      	str	r3, [r7, #32]
 8004e56:	e00f      	b.n	8004e78 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	3301      	adds	r3, #1
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	3301      	adds	r3, #1
 8004e76:	623b      	str	r3, [r7, #32]
 8004e78:	6a3a      	ldr	r2, [r7, #32]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d3eb      	bcc.n	8004e58 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4413      	add	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004e98:	e028      	b.n	8004eec <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	bf28      	it	cs
 8004ea0:	2304      	movcs	r3, #4
 8004ea2:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	623b      	str	r3, [r7, #32]
 8004eac:	e00e      	b.n	8004ecc <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	623b      	str	r3, [r7, #32]
 8004ecc:	6a3a      	ldr	r2, [r7, #32]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d3ec      	bcc.n	8004eae <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4413      	add	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1d3      	bne.n	8004e9a <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004efa:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	3301      	adds	r3, #1
 8004f00:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	4613      	mov	r3, r2
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	f7fe ffc6 	bl	8003e9c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3728      	adds	r7, #40	; 0x28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	7c1b      	ldrb	r3, [r3, #16]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e01b      	b.n	8004f6e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004f4c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	065a      	lsls	r2, r3, #25
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b089      	sub	sp, #36	; 0x24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	e175      	b.n	8005288 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4013      	ands	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	f040 8164 	bne.w	8005282 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d003      	beq.n	8004fca <HAL_GPIO_Init+0x4e>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b12      	cmp	r3, #18
 8004fc8:	d123      	bne.n	8005012 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	08da      	lsrs	r2, r3, #3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3208      	adds	r2, #8
 8004fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	220f      	movs	r2, #15
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4013      	ands	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4313      	orrs	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	08da      	lsrs	r2, r3, #3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3208      	adds	r2, #8
 800500c:	69b9      	ldr	r1, [r7, #24]
 800500e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	2203      	movs	r2, #3
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f003 0203 	and.w	r2, r3, #3
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	4313      	orrs	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d00b      	beq.n	8005066 <HAL_GPIO_Init+0xea>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d007      	beq.n	8005066 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800505a:	2b11      	cmp	r3, #17
 800505c:	d003      	beq.n	8005066 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b12      	cmp	r3, #18
 8005064:	d130      	bne.n	80050c8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	2203      	movs	r2, #3
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4313      	orrs	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800509c:	2201      	movs	r2, #1
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	43db      	mvns	r3, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	4013      	ands	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	091b      	lsrs	r3, r3, #4
 80050b2:	f003 0201 	and.w	r2, r3, #1
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4313      	orrs	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	2203      	movs	r2, #3
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	43db      	mvns	r3, r3
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4013      	ands	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 80be 	beq.w	8005282 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005106:	4b65      	ldr	r3, [pc, #404]	; (800529c <HAL_GPIO_Init+0x320>)
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	4a64      	ldr	r2, [pc, #400]	; (800529c <HAL_GPIO_Init+0x320>)
 800510c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005110:	6453      	str	r3, [r2, #68]	; 0x44
 8005112:	4b62      	ldr	r3, [pc, #392]	; (800529c <HAL_GPIO_Init+0x320>)
 8005114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800511e:	4a60      	ldr	r2, [pc, #384]	; (80052a0 <HAL_GPIO_Init+0x324>)
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	089b      	lsrs	r3, r3, #2
 8005124:	3302      	adds	r3, #2
 8005126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800512a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	220f      	movs	r2, #15
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	43db      	mvns	r3, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4013      	ands	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a57      	ldr	r2, [pc, #348]	; (80052a4 <HAL_GPIO_Init+0x328>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d037      	beq.n	80051ba <HAL_GPIO_Init+0x23e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a56      	ldr	r2, [pc, #344]	; (80052a8 <HAL_GPIO_Init+0x32c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d031      	beq.n	80051b6 <HAL_GPIO_Init+0x23a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a55      	ldr	r2, [pc, #340]	; (80052ac <HAL_GPIO_Init+0x330>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d02b      	beq.n	80051b2 <HAL_GPIO_Init+0x236>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a54      	ldr	r2, [pc, #336]	; (80052b0 <HAL_GPIO_Init+0x334>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d025      	beq.n	80051ae <HAL_GPIO_Init+0x232>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a53      	ldr	r2, [pc, #332]	; (80052b4 <HAL_GPIO_Init+0x338>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d01f      	beq.n	80051aa <HAL_GPIO_Init+0x22e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a52      	ldr	r2, [pc, #328]	; (80052b8 <HAL_GPIO_Init+0x33c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d019      	beq.n	80051a6 <HAL_GPIO_Init+0x22a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a51      	ldr	r2, [pc, #324]	; (80052bc <HAL_GPIO_Init+0x340>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d013      	beq.n	80051a2 <HAL_GPIO_Init+0x226>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a50      	ldr	r2, [pc, #320]	; (80052c0 <HAL_GPIO_Init+0x344>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00d      	beq.n	800519e <HAL_GPIO_Init+0x222>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a4f      	ldr	r2, [pc, #316]	; (80052c4 <HAL_GPIO_Init+0x348>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d007      	beq.n	800519a <HAL_GPIO_Init+0x21e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a4e      	ldr	r2, [pc, #312]	; (80052c8 <HAL_GPIO_Init+0x34c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d101      	bne.n	8005196 <HAL_GPIO_Init+0x21a>
 8005192:	2309      	movs	r3, #9
 8005194:	e012      	b.n	80051bc <HAL_GPIO_Init+0x240>
 8005196:	230a      	movs	r3, #10
 8005198:	e010      	b.n	80051bc <HAL_GPIO_Init+0x240>
 800519a:	2308      	movs	r3, #8
 800519c:	e00e      	b.n	80051bc <HAL_GPIO_Init+0x240>
 800519e:	2307      	movs	r3, #7
 80051a0:	e00c      	b.n	80051bc <HAL_GPIO_Init+0x240>
 80051a2:	2306      	movs	r3, #6
 80051a4:	e00a      	b.n	80051bc <HAL_GPIO_Init+0x240>
 80051a6:	2305      	movs	r3, #5
 80051a8:	e008      	b.n	80051bc <HAL_GPIO_Init+0x240>
 80051aa:	2304      	movs	r3, #4
 80051ac:	e006      	b.n	80051bc <HAL_GPIO_Init+0x240>
 80051ae:	2303      	movs	r3, #3
 80051b0:	e004      	b.n	80051bc <HAL_GPIO_Init+0x240>
 80051b2:	2302      	movs	r3, #2
 80051b4:	e002      	b.n	80051bc <HAL_GPIO_Init+0x240>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e000      	b.n	80051bc <HAL_GPIO_Init+0x240>
 80051ba:	2300      	movs	r3, #0
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	f002 0203 	and.w	r2, r2, #3
 80051c2:	0092      	lsls	r2, r2, #2
 80051c4:	4093      	lsls	r3, r2
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80051cc:	4934      	ldr	r1, [pc, #208]	; (80052a0 <HAL_GPIO_Init+0x324>)
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	089b      	lsrs	r3, r3, #2
 80051d2:	3302      	adds	r3, #2
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051da:	4b3c      	ldr	r3, [pc, #240]	; (80052cc <HAL_GPIO_Init+0x350>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	43db      	mvns	r3, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4013      	ands	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051fe:	4a33      	ldr	r2, [pc, #204]	; (80052cc <HAL_GPIO_Init+0x350>)
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005204:	4b31      	ldr	r3, [pc, #196]	; (80052cc <HAL_GPIO_Init+0x350>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	43db      	mvns	r3, r3
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	4013      	ands	r3, r2
 8005212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005228:	4a28      	ldr	r2, [pc, #160]	; (80052cc <HAL_GPIO_Init+0x350>)
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800522e:	4b27      	ldr	r3, [pc, #156]	; (80052cc <HAL_GPIO_Init+0x350>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	43db      	mvns	r3, r3
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	4013      	ands	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005252:	4a1e      	ldr	r2, [pc, #120]	; (80052cc <HAL_GPIO_Init+0x350>)
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005258:	4b1c      	ldr	r3, [pc, #112]	; (80052cc <HAL_GPIO_Init+0x350>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	43db      	mvns	r3, r3
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	4013      	ands	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800527c:	4a13      	ldr	r2, [pc, #76]	; (80052cc <HAL_GPIO_Init+0x350>)
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	3301      	adds	r3, #1
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	2b0f      	cmp	r3, #15
 800528c:	f67f ae86 	bls.w	8004f9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005290:	bf00      	nop
 8005292:	3724      	adds	r7, #36	; 0x24
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	40023800 	.word	0x40023800
 80052a0:	40013800 	.word	0x40013800
 80052a4:	40020000 	.word	0x40020000
 80052a8:	40020400 	.word	0x40020400
 80052ac:	40020800 	.word	0x40020800
 80052b0:	40020c00 	.word	0x40020c00
 80052b4:	40021000 	.word	0x40021000
 80052b8:	40021400 	.word	0x40021400
 80052bc:	40021800 	.word	0x40021800
 80052c0:	40021c00 	.word	0x40021c00
 80052c4:	40022000 	.word	0x40022000
 80052c8:	40022400 	.word	0x40022400
 80052cc:	40013c00 	.word	0x40013c00

080052d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80052da:	2300      	movs	r3, #0
 80052dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	e0d9      	b.n	80054a0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80052ec:	2201      	movs	r2, #1
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	4013      	ands	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	429a      	cmp	r2, r3
 8005304:	f040 80c9 	bne.w	800549a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005308:	4a6a      	ldr	r2, [pc, #424]	; (80054b4 <HAL_GPIO_DeInit+0x1e4>)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	089b      	lsrs	r3, r3, #2
 800530e:	3302      	adds	r3, #2
 8005310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005314:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	220f      	movs	r2, #15
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	4013      	ands	r3, r2
 8005328:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a62      	ldr	r2, [pc, #392]	; (80054b8 <HAL_GPIO_DeInit+0x1e8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d037      	beq.n	80053a2 <HAL_GPIO_DeInit+0xd2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a61      	ldr	r2, [pc, #388]	; (80054bc <HAL_GPIO_DeInit+0x1ec>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d031      	beq.n	800539e <HAL_GPIO_DeInit+0xce>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a60      	ldr	r2, [pc, #384]	; (80054c0 <HAL_GPIO_DeInit+0x1f0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d02b      	beq.n	800539a <HAL_GPIO_DeInit+0xca>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a5f      	ldr	r2, [pc, #380]	; (80054c4 <HAL_GPIO_DeInit+0x1f4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d025      	beq.n	8005396 <HAL_GPIO_DeInit+0xc6>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a5e      	ldr	r2, [pc, #376]	; (80054c8 <HAL_GPIO_DeInit+0x1f8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d01f      	beq.n	8005392 <HAL_GPIO_DeInit+0xc2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a5d      	ldr	r2, [pc, #372]	; (80054cc <HAL_GPIO_DeInit+0x1fc>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d019      	beq.n	800538e <HAL_GPIO_DeInit+0xbe>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a5c      	ldr	r2, [pc, #368]	; (80054d0 <HAL_GPIO_DeInit+0x200>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d013      	beq.n	800538a <HAL_GPIO_DeInit+0xba>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a5b      	ldr	r2, [pc, #364]	; (80054d4 <HAL_GPIO_DeInit+0x204>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00d      	beq.n	8005386 <HAL_GPIO_DeInit+0xb6>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a5a      	ldr	r2, [pc, #360]	; (80054d8 <HAL_GPIO_DeInit+0x208>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d007      	beq.n	8005382 <HAL_GPIO_DeInit+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a59      	ldr	r2, [pc, #356]	; (80054dc <HAL_GPIO_DeInit+0x20c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d101      	bne.n	800537e <HAL_GPIO_DeInit+0xae>
 800537a:	2309      	movs	r3, #9
 800537c:	e012      	b.n	80053a4 <HAL_GPIO_DeInit+0xd4>
 800537e:	230a      	movs	r3, #10
 8005380:	e010      	b.n	80053a4 <HAL_GPIO_DeInit+0xd4>
 8005382:	2308      	movs	r3, #8
 8005384:	e00e      	b.n	80053a4 <HAL_GPIO_DeInit+0xd4>
 8005386:	2307      	movs	r3, #7
 8005388:	e00c      	b.n	80053a4 <HAL_GPIO_DeInit+0xd4>
 800538a:	2306      	movs	r3, #6
 800538c:	e00a      	b.n	80053a4 <HAL_GPIO_DeInit+0xd4>
 800538e:	2305      	movs	r3, #5
 8005390:	e008      	b.n	80053a4 <HAL_GPIO_DeInit+0xd4>
 8005392:	2304      	movs	r3, #4
 8005394:	e006      	b.n	80053a4 <HAL_GPIO_DeInit+0xd4>
 8005396:	2303      	movs	r3, #3
 8005398:	e004      	b.n	80053a4 <HAL_GPIO_DeInit+0xd4>
 800539a:	2302      	movs	r3, #2
 800539c:	e002      	b.n	80053a4 <HAL_GPIO_DeInit+0xd4>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <HAL_GPIO_DeInit+0xd4>
 80053a2:	2300      	movs	r3, #0
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	f002 0203 	and.w	r2, r2, #3
 80053aa:	0092      	lsls	r2, r2, #2
 80053ac:	4093      	lsls	r3, r2
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d132      	bne.n	800541a <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	220f      	movs	r2, #15
 80053be:	fa02 f303 	lsl.w	r3, r2, r3
 80053c2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80053c4:	4a3b      	ldr	r2, [pc, #236]	; (80054b4 <HAL_GPIO_DeInit+0x1e4>)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	089b      	lsrs	r3, r3, #2
 80053ca:	3302      	adds	r3, #2
 80053cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	43da      	mvns	r2, r3
 80053d4:	4837      	ldr	r0, [pc, #220]	; (80054b4 <HAL_GPIO_DeInit+0x1e4>)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	089b      	lsrs	r3, r3, #2
 80053da:	400a      	ands	r2, r1
 80053dc:	3302      	adds	r3, #2
 80053de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80053e2:	4b3f      	ldr	r3, [pc, #252]	; (80054e0 <HAL_GPIO_DeInit+0x210>)
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	43db      	mvns	r3, r3
 80053ea:	493d      	ldr	r1, [pc, #244]	; (80054e0 <HAL_GPIO_DeInit+0x210>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80053f0:	4b3b      	ldr	r3, [pc, #236]	; (80054e0 <HAL_GPIO_DeInit+0x210>)
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	43db      	mvns	r3, r3
 80053f8:	4939      	ldr	r1, [pc, #228]	; (80054e0 <HAL_GPIO_DeInit+0x210>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80053fe:	4b38      	ldr	r3, [pc, #224]	; (80054e0 <HAL_GPIO_DeInit+0x210>)
 8005400:	689a      	ldr	r2, [r3, #8]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	43db      	mvns	r3, r3
 8005406:	4936      	ldr	r1, [pc, #216]	; (80054e0 <HAL_GPIO_DeInit+0x210>)
 8005408:	4013      	ands	r3, r2
 800540a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800540c:	4b34      	ldr	r3, [pc, #208]	; (80054e0 <HAL_GPIO_DeInit+0x210>)
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	43db      	mvns	r3, r3
 8005414:	4932      	ldr	r1, [pc, #200]	; (80054e0 <HAL_GPIO_DeInit+0x210>)
 8005416:	4013      	ands	r3, r2
 8005418:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	2103      	movs	r1, #3
 8005424:	fa01 f303 	lsl.w	r3, r1, r3
 8005428:	43db      	mvns	r3, r3
 800542a:	401a      	ands	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	08da      	lsrs	r2, r3, #3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3208      	adds	r2, #8
 8005438:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	220f      	movs	r2, #15
 8005446:	fa02 f303 	lsl.w	r3, r2, r3
 800544a:	43db      	mvns	r3, r3
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	08d2      	lsrs	r2, r2, #3
 8005450:	4019      	ands	r1, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3208      	adds	r2, #8
 8005456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	2103      	movs	r1, #3
 8005464:	fa01 f303 	lsl.w	r3, r1, r3
 8005468:	43db      	mvns	r3, r3
 800546a:	401a      	ands	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	2101      	movs	r1, #1
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	fa01 f303 	lsl.w	r3, r1, r3
 800547c:	43db      	mvns	r3, r3
 800547e:	401a      	ands	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	2103      	movs	r1, #3
 800548e:	fa01 f303 	lsl.w	r3, r1, r3
 8005492:	43db      	mvns	r3, r3
 8005494:	401a      	ands	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	3301      	adds	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2b0f      	cmp	r3, #15
 80054a4:	f67f af22 	bls.w	80052ec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80054a8:	bf00      	nop
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	40013800 	.word	0x40013800
 80054b8:	40020000 	.word	0x40020000
 80054bc:	40020400 	.word	0x40020400
 80054c0:	40020800 	.word	0x40020800
 80054c4:	40020c00 	.word	0x40020c00
 80054c8:	40021000 	.word	0x40021000
 80054cc:	40021400 	.word	0x40021400
 80054d0:	40021800 	.word	0x40021800
 80054d4:	40021c00 	.word	0x40021c00
 80054d8:	40022000 	.word	0x40022000
 80054dc:	40022400 	.word	0x40022400
 80054e0:	40013c00 	.word	0x40013c00

080054e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	807b      	strh	r3, [r7, #2]
 80054f0:	4613      	mov	r3, r2
 80054f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054f4:	787b      	ldrb	r3, [r7, #1]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054fa:	887a      	ldrh	r2, [r7, #2]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005500:	e003      	b.n	800550a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005502:	887b      	ldrh	r3, [r7, #2]
 8005504:	041a      	lsls	r2, r3, #16
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	619a      	str	r2, [r3, #24]
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	460b      	mov	r3, r1
 8005520:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695a      	ldr	r2, [r3, #20]
 8005526:	887b      	ldrh	r3, [r7, #2]
 8005528:	401a      	ands	r2, r3
 800552a:	887b      	ldrh	r3, [r7, #2]
 800552c:	429a      	cmp	r2, r3
 800552e:	d104      	bne.n	800553a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005530:	887b      	ldrh	r3, [r7, #2]
 8005532:	041a      	lsls	r2, r3, #16
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005538:	e002      	b.n	8005540 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800553a:	887a      	ldrh	r2, [r7, #2]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	619a      	str	r2, [r3, #24]
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005556:	4b08      	ldr	r3, [pc, #32]	; (8005578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005558:	695a      	ldr	r2, [r3, #20]
 800555a:	88fb      	ldrh	r3, [r7, #6]
 800555c:	4013      	ands	r3, r2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d006      	beq.n	8005570 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005562:	4a05      	ldr	r2, [pc, #20]	; (8005578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005564:	88fb      	ldrh	r3, [r7, #6]
 8005566:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	4618      	mov	r0, r3
 800556c:	f003 fb4e 	bl	8008c0c <HAL_GPIO_EXTI_Callback>
  }
}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40013c00 	.word	0x40013c00

0800557c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e07f      	b.n	800568e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f8a9 	bl	80056fa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2224      	movs	r2, #36	; 0x24
 80055ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d107      	bne.n	80055f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055f2:	609a      	str	r2, [r3, #8]
 80055f4:	e006      	b.n	8005604 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005602:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d104      	bne.n	8005616 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005614:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6859      	ldr	r1, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	4b1d      	ldr	r3, [pc, #116]	; (8005698 <HAL_I2C_Init+0x11c>)
 8005622:	430b      	orrs	r3, r1
 8005624:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005634:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	ea42 0103 	orr.w	r1, r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	021a      	lsls	r2, r3, #8
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69d9      	ldr	r1, [r3, #28]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a1a      	ldr	r2, [r3, #32]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	02008000 	.word	0x02008000

0800569c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e021      	b.n	80056f2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2224      	movs	r2, #36	; 0x24
 80056b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0201 	bic.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f821 	bl	800570e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af02      	add	r7, sp, #8
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	4608      	mov	r0, r1
 800572e:	4611      	mov	r1, r2
 8005730:	461a      	mov	r2, r3
 8005732:	4603      	mov	r3, r0
 8005734:	817b      	strh	r3, [r7, #10]
 8005736:	460b      	mov	r3, r1
 8005738:	813b      	strh	r3, [r7, #8]
 800573a:	4613      	mov	r3, r2
 800573c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b20      	cmp	r3, #32
 8005748:	f040 80f9 	bne.w	800593e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <HAL_I2C_Mem_Write+0x34>
 8005752:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005754:	2b00      	cmp	r3, #0
 8005756:	d105      	bne.n	8005764 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800575e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e0ed      	b.n	8005940 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_I2C_Mem_Write+0x4e>
 800576e:	2302      	movs	r3, #2
 8005770:	e0e6      	b.n	8005940 <HAL_I2C_Mem_Write+0x21c>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800577a:	f7fd f939 	bl	80029f0 <HAL_GetTick>
 800577e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	2319      	movs	r3, #25
 8005786:	2201      	movs	r2, #1
 8005788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 fad1 	bl	8005d34 <I2C_WaitOnFlagUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0d1      	b.n	8005940 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2221      	movs	r2, #33	; 0x21
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2240      	movs	r2, #64	; 0x40
 80057a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a3a      	ldr	r2, [r7, #32]
 80057b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057c4:	88f8      	ldrh	r0, [r7, #6]
 80057c6:	893a      	ldrh	r2, [r7, #8]
 80057c8:	8979      	ldrh	r1, [r7, #10]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	9301      	str	r3, [sp, #4]
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	4603      	mov	r3, r0
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f9e1 	bl	8005b9c <I2C_RequestMemoryWrite>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d005      	beq.n	80057ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0a9      	b.n	8005940 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2bff      	cmp	r3, #255	; 0xff
 80057f4:	d90e      	bls.n	8005814 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	22ff      	movs	r2, #255	; 0xff
 80057fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005800:	b2da      	uxtb	r2, r3
 8005802:	8979      	ldrh	r1, [r7, #10]
 8005804:	2300      	movs	r3, #0
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fbb3 	bl	8005f78 <I2C_TransferConfig>
 8005812:	e00f      	b.n	8005834 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005822:	b2da      	uxtb	r2, r3
 8005824:	8979      	ldrh	r1, [r7, #10]
 8005826:	2300      	movs	r3, #0
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 fba2 	bl	8005f78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 fabb 	bl	8005db4 <I2C_WaitOnTXISFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e07b      	b.n	8005940 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	781a      	ldrb	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d034      	beq.n	80058ec <HAL_I2C_Mem_Write+0x1c8>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005886:	2b00      	cmp	r3, #0
 8005888:	d130      	bne.n	80058ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	2200      	movs	r2, #0
 8005892:	2180      	movs	r1, #128	; 0x80
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 fa4d 	bl	8005d34 <I2C_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e04d      	b.n	8005940 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2bff      	cmp	r3, #255	; 0xff
 80058ac:	d90e      	bls.n	80058cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	22ff      	movs	r2, #255	; 0xff
 80058b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	8979      	ldrh	r1, [r7, #10]
 80058bc:	2300      	movs	r3, #0
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 fb57 	bl	8005f78 <I2C_TransferConfig>
 80058ca:	e00f      	b.n	80058ec <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	8979      	ldrh	r1, [r7, #10]
 80058de:	2300      	movs	r3, #0
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 fb46 	bl	8005f78 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d19e      	bne.n	8005834 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 fa9a 	bl	8005e34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e01a      	b.n	8005940 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2220      	movs	r2, #32
 8005910:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6859      	ldr	r1, [r3, #4]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <HAL_I2C_Mem_Write+0x224>)
 800591e:	400b      	ands	r3, r1
 8005920:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2220      	movs	r2, #32
 8005926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	e000      	b.n	8005940 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800593e:	2302      	movs	r3, #2
  }
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	fe00e800 	.word	0xfe00e800

0800594c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b088      	sub	sp, #32
 8005950:	af02      	add	r7, sp, #8
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	4608      	mov	r0, r1
 8005956:	4611      	mov	r1, r2
 8005958:	461a      	mov	r2, r3
 800595a:	4603      	mov	r3, r0
 800595c:	817b      	strh	r3, [r7, #10]
 800595e:	460b      	mov	r3, r1
 8005960:	813b      	strh	r3, [r7, #8]
 8005962:	4613      	mov	r3, r2
 8005964:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b20      	cmp	r3, #32
 8005970:	f040 80fd 	bne.w	8005b6e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <HAL_I2C_Mem_Read+0x34>
 800597a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800597c:	2b00      	cmp	r3, #0
 800597e:	d105      	bne.n	800598c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005986:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e0f1      	b.n	8005b70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005992:	2b01      	cmp	r3, #1
 8005994:	d101      	bne.n	800599a <HAL_I2C_Mem_Read+0x4e>
 8005996:	2302      	movs	r3, #2
 8005998:	e0ea      	b.n	8005b70 <HAL_I2C_Mem_Read+0x224>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059a2:	f7fd f825 	bl	80029f0 <HAL_GetTick>
 80059a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	2319      	movs	r3, #25
 80059ae:	2201      	movs	r2, #1
 80059b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f9bd 	bl	8005d34 <I2C_WaitOnFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e0d5      	b.n	8005b70 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2222      	movs	r2, #34	; 0x22
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2240      	movs	r2, #64	; 0x40
 80059d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a3a      	ldr	r2, [r7, #32]
 80059de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80059e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059ec:	88f8      	ldrh	r0, [r7, #6]
 80059ee:	893a      	ldrh	r2, [r7, #8]
 80059f0:	8979      	ldrh	r1, [r7, #10]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	9301      	str	r3, [sp, #4]
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	4603      	mov	r3, r0
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f921 	bl	8005c44 <I2C_RequestMemoryRead>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e0ad      	b.n	8005b70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2bff      	cmp	r3, #255	; 0xff
 8005a1c:	d90e      	bls.n	8005a3c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	22ff      	movs	r2, #255	; 0xff
 8005a22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	8979      	ldrh	r1, [r7, #10]
 8005a2c:	4b52      	ldr	r3, [pc, #328]	; (8005b78 <HAL_I2C_Mem_Read+0x22c>)
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 fa9f 	bl	8005f78 <I2C_TransferConfig>
 8005a3a:	e00f      	b.n	8005a5c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	8979      	ldrh	r1, [r7, #10]
 8005a4e:	4b4a      	ldr	r3, [pc, #296]	; (8005b78 <HAL_I2C_Mem_Read+0x22c>)
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 fa8e 	bl	8005f78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	2200      	movs	r2, #0
 8005a64:	2104      	movs	r1, #4
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f964 	bl	8005d34 <I2C_WaitOnFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e07c      	b.n	8005b70 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a92:	3b01      	subs	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d034      	beq.n	8005b1c <HAL_I2C_Mem_Read+0x1d0>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d130      	bne.n	8005b1c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2180      	movs	r1, #128	; 0x80
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 f935 	bl	8005d34 <I2C_WaitOnFlagUntilTimeout>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e04d      	b.n	8005b70 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2bff      	cmp	r3, #255	; 0xff
 8005adc:	d90e      	bls.n	8005afc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	22ff      	movs	r2, #255	; 0xff
 8005ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	8979      	ldrh	r1, [r7, #10]
 8005aec:	2300      	movs	r3, #0
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 fa3f 	bl	8005f78 <I2C_TransferConfig>
 8005afa:	e00f      	b.n	8005b1c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	8979      	ldrh	r1, [r7, #10]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fa2e 	bl	8005f78 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d19a      	bne.n	8005a5c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f982 	bl	8005e34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e01a      	b.n	8005b70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6859      	ldr	r1, [r3, #4]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <HAL_I2C_Mem_Read+0x230>)
 8005b4e:	400b      	ands	r3, r1
 8005b50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e000      	b.n	8005b70 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005b6e:	2302      	movs	r3, #2
  }
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	80002400 	.word	0x80002400
 8005b7c:	fe00e800 	.word	0xfe00e800

08005b80 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b8e:	b2db      	uxtb	r3, r3
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	4608      	mov	r0, r1
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	461a      	mov	r2, r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	817b      	strh	r3, [r7, #10]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	813b      	strh	r3, [r7, #8]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	8979      	ldrh	r1, [r7, #10]
 8005bbc:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <I2C_RequestMemoryWrite+0xa4>)
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f9d7 	bl	8005f78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	69b9      	ldr	r1, [r7, #24]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 f8f0 	bl	8005db4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e02c      	b.n	8005c38 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d105      	bne.n	8005bf0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005be4:	893b      	ldrh	r3, [r7, #8]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	629a      	str	r2, [r3, #40]	; 0x28
 8005bee:	e015      	b.n	8005c1c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bf0:	893b      	ldrh	r3, [r7, #8]
 8005bf2:	0a1b      	lsrs	r3, r3, #8
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	69b9      	ldr	r1, [r7, #24]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 f8d6 	bl	8005db4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e012      	b.n	8005c38 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c12:	893b      	ldrh	r3, [r7, #8]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	2200      	movs	r2, #0
 8005c24:	2180      	movs	r1, #128	; 0x80
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 f884 	bl	8005d34 <I2C_WaitOnFlagUntilTimeout>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	80002000 	.word	0x80002000

08005c44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	4611      	mov	r1, r2
 8005c50:	461a      	mov	r2, r3
 8005c52:	4603      	mov	r3, r0
 8005c54:	817b      	strh	r3, [r7, #10]
 8005c56:	460b      	mov	r3, r1
 8005c58:	813b      	strh	r3, [r7, #8]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	8979      	ldrh	r1, [r7, #10]
 8005c64:	4b20      	ldr	r3, [pc, #128]	; (8005ce8 <I2C_RequestMemoryRead+0xa4>)
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 f984 	bl	8005f78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	69b9      	ldr	r1, [r7, #24]
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f89d 	bl	8005db4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e02c      	b.n	8005cde <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c84:	88fb      	ldrh	r3, [r7, #6]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d105      	bne.n	8005c96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c8a:	893b      	ldrh	r3, [r7, #8]
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	629a      	str	r2, [r3, #40]	; 0x28
 8005c94:	e015      	b.n	8005cc2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c96:	893b      	ldrh	r3, [r7, #8]
 8005c98:	0a1b      	lsrs	r3, r3, #8
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	69b9      	ldr	r1, [r7, #24]
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f883 	bl	8005db4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e012      	b.n	8005cde <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cb8:	893b      	ldrh	r3, [r7, #8]
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2140      	movs	r1, #64	; 0x40
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f831 	bl	8005d34 <I2C_WaitOnFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e000      	b.n	8005cde <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	80002000 	.word	0x80002000

08005cec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d103      	bne.n	8005d0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2200      	movs	r2, #0
 8005d08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d007      	beq.n	8005d28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699a      	ldr	r2, [r3, #24]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	619a      	str	r2, [r3, #24]
  }
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	4613      	mov	r3, r2
 8005d42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d44:	e022      	b.n	8005d8c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d01e      	beq.n	8005d8c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4e:	f7fc fe4f 	bl	80029f0 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d302      	bcc.n	8005d64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d113      	bne.n	8005d8c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d68:	f043 0220 	orr.w	r2, r3, #32
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e00f      	b.n	8005dac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	4013      	ands	r3, r2
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	bf0c      	ite	eq
 8005d9c:	2301      	moveq	r3, #1
 8005d9e:	2300      	movne	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	461a      	mov	r2, r3
 8005da4:	79fb      	ldrb	r3, [r7, #7]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d0cd      	beq.n	8005d46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005dc0:	e02c      	b.n	8005e1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f870 	bl	8005eac <I2C_IsAcknowledgeFailed>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e02a      	b.n	8005e2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ddc:	d01e      	beq.n	8005e1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dde:	f7fc fe07 	bl	80029f0 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d302      	bcc.n	8005df4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d113      	bne.n	8005e1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df8:	f043 0220 	orr.w	r2, r3, #32
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e007      	b.n	8005e2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d1cb      	bne.n	8005dc2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e40:	e028      	b.n	8005e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 f830 	bl	8005eac <I2C_IsAcknowledgeFailed>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e026      	b.n	8005ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e56:	f7fc fdcb 	bl	80029f0 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d302      	bcc.n	8005e6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d113      	bne.n	8005e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e70:	f043 0220 	orr.w	r2, r3, #32
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e007      	b.n	8005ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	d1cf      	bne.n	8005e42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	f003 0310 	and.w	r3, r3, #16
 8005ec2:	2b10      	cmp	r3, #16
 8005ec4:	d151      	bne.n	8005f6a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ec6:	e022      	b.n	8005f0e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ece:	d01e      	beq.n	8005f0e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed0:	f7fc fd8e 	bl	80029f0 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d302      	bcc.n	8005ee6 <I2C_IsAcknowledgeFailed+0x3a>
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d113      	bne.n	8005f0e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eea:	f043 0220 	orr.w	r2, r3, #32
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e02e      	b.n	8005f6c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	f003 0320 	and.w	r3, r3, #32
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d1d5      	bne.n	8005ec8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2210      	movs	r2, #16
 8005f22:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f7ff fedd 	bl	8005cec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6859      	ldr	r1, [r3, #4]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	4b0d      	ldr	r3, [pc, #52]	; (8005f74 <I2C_IsAcknowledgeFailed+0xc8>)
 8005f3e:	400b      	ands	r3, r1
 8005f40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f46:	f043 0204 	orr.w	r2, r3, #4
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	fe00e800 	.word	0xfe00e800

08005f78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	607b      	str	r3, [r7, #4]
 8005f82:	460b      	mov	r3, r1
 8005f84:	817b      	strh	r3, [r7, #10]
 8005f86:	4613      	mov	r3, r2
 8005f88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	0d5b      	lsrs	r3, r3, #21
 8005f94:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f98:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <I2C_TransferConfig+0x58>)
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	ea02 0103 	and.w	r1, r2, r3
 8005fa2:	897b      	ldrh	r3, [r7, #10]
 8005fa4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005fa8:	7a7b      	ldrb	r3, [r7, #9]
 8005faa:	041b      	lsls	r3, r3, #16
 8005fac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005fc2:	bf00      	nop
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	03ff63ff 	.word	0x03ff63ff

08005fd4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e0bf      	b.n	8006166 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f003 f948 	bl	8009290 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699a      	ldr	r2, [r3, #24]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006016:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6999      	ldr	r1, [r3, #24]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800602c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6899      	ldr	r1, [r3, #8]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b4a      	ldr	r3, [pc, #296]	; (8006170 <HAL_LTDC_Init+0x19c>)
 8006048:	400b      	ands	r3, r1
 800604a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	041b      	lsls	r3, r3, #16
 8006052:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6899      	ldr	r1, [r3, #8]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699a      	ldr	r2, [r3, #24]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68d9      	ldr	r1, [r3, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	4b3e      	ldr	r3, [pc, #248]	; (8006170 <HAL_LTDC_Init+0x19c>)
 8006076:	400b      	ands	r3, r1
 8006078:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	041b      	lsls	r3, r3, #16
 8006080:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68d9      	ldr	r1, [r3, #12]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1a      	ldr	r2, [r3, #32]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6919      	ldr	r1, [r3, #16]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	4b33      	ldr	r3, [pc, #204]	; (8006170 <HAL_LTDC_Init+0x19c>)
 80060a4:	400b      	ands	r3, r1
 80060a6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	041b      	lsls	r3, r3, #16
 80060ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6919      	ldr	r1, [r3, #16]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6959      	ldr	r1, [r3, #20]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	4b27      	ldr	r3, [pc, #156]	; (8006170 <HAL_LTDC_Init+0x19c>)
 80060d2:	400b      	ands	r3, r1
 80060d4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	041b      	lsls	r3, r3, #16
 80060dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6959      	ldr	r1, [r3, #20]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060fa:	021b      	lsls	r3, r3, #8
 80060fc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006104:	041b      	lsls	r3, r3, #16
 8006106:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006116:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4313      	orrs	r3, r2
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0206 	orr.w	r2, r2, #6
 8006142:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	f000f800 	.word	0xf000f800

08006174 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006174:	b5b0      	push	{r4, r5, r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006186:	2b01      	cmp	r3, #1
 8006188:	d101      	bne.n	800618e <HAL_LTDC_ConfigLayer+0x1a>
 800618a:	2302      	movs	r3, #2
 800618c:	e02c      	b.n	80061e8 <HAL_LTDC_ConfigLayer+0x74>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2202      	movs	r2, #2
 800619a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2134      	movs	r1, #52	; 0x34
 80061a4:	fb01 f303 	mul.w	r3, r1, r3
 80061a8:	4413      	add	r3, r2
 80061aa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4614      	mov	r4, r2
 80061b2:	461d      	mov	r5, r3
 80061b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 f811 	bl	80061f0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2201      	movs	r2, #1
 80061d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bdb0      	pop	{r4, r5, r7, pc}

080061f0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b089      	sub	sp, #36	; 0x24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	0c1b      	lsrs	r3, r3, #16
 8006208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800620c:	4413      	add	r3, r2
 800620e:	041b      	lsls	r3, r3, #16
 8006210:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	01db      	lsls	r3, r3, #7
 800621c:	4413      	add	r3, r2
 800621e:	3384      	adds	r3, #132	; 0x84
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	6812      	ldr	r2, [r2, #0]
 8006226:	4611      	mov	r1, r2
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	01d2      	lsls	r2, r2, #7
 800622c:	440a      	add	r2, r1
 800622e:	3284      	adds	r2, #132	; 0x84
 8006230:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006234:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	0c1b      	lsrs	r3, r3, #16
 8006242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006246:	4413      	add	r3, r2
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4619      	mov	r1, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	01db      	lsls	r3, r3, #7
 8006254:	440b      	add	r3, r1
 8006256:	3384      	adds	r3, #132	; 0x84
 8006258:	4619      	mov	r1, r3
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4313      	orrs	r3, r2
 800625e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800626e:	4413      	add	r3, r2
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	01db      	lsls	r3, r3, #7
 800627e:	4413      	add	r3, r2
 8006280:	3384      	adds	r3, #132	; 0x84
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	6812      	ldr	r2, [r2, #0]
 8006288:	4611      	mov	r1, r2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	01d2      	lsls	r2, r2, #7
 800628e:	440a      	add	r2, r1
 8006290:	3284      	adds	r2, #132	; 0x84
 8006292:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006296:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062a6:	4413      	add	r3, r2
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4619      	mov	r1, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	01db      	lsls	r3, r3, #7
 80062b4:	440b      	add	r3, r1
 80062b6:	3384      	adds	r3, #132	; 0x84
 80062b8:	4619      	mov	r1, r3
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	4313      	orrs	r3, r2
 80062be:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	461a      	mov	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	01db      	lsls	r3, r3, #7
 80062ca:	4413      	add	r3, r2
 80062cc:	3384      	adds	r3, #132	; 0x84
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	6812      	ldr	r2, [r2, #0]
 80062d4:	4611      	mov	r1, r2
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	01d2      	lsls	r2, r2, #7
 80062da:	440a      	add	r2, r1
 80062dc:	3284      	adds	r2, #132	; 0x84
 80062de:	f023 0307 	bic.w	r3, r3, #7
 80062e2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	461a      	mov	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	01db      	lsls	r3, r3, #7
 80062ee:	4413      	add	r3, r2
 80062f0:	3384      	adds	r3, #132	; 0x84
 80062f2:	461a      	mov	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006300:	021b      	lsls	r3, r3, #8
 8006302:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800630a:	041b      	lsls	r3, r3, #16
 800630c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	061b      	lsls	r3, r3, #24
 8006314:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	01db      	lsls	r3, r3, #7
 8006320:	4413      	add	r3, r2
 8006322:	3384      	adds	r3, #132	; 0x84
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	01db      	lsls	r3, r3, #7
 8006330:	4413      	add	r3, r2
 8006332:	3384      	adds	r3, #132	; 0x84
 8006334:	461a      	mov	r2, r3
 8006336:	2300      	movs	r3, #0
 8006338:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006340:	461a      	mov	r2, r3
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	431a      	orrs	r2, r3
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	431a      	orrs	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4619      	mov	r1, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	01db      	lsls	r3, r3, #7
 8006354:	440b      	add	r3, r1
 8006356:	3384      	adds	r3, #132	; 0x84
 8006358:	4619      	mov	r1, r3
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	461a      	mov	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	01db      	lsls	r3, r3, #7
 800636a:	4413      	add	r3, r2
 800636c:	3384      	adds	r3, #132	; 0x84
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	4611      	mov	r1, r2
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	01d2      	lsls	r2, r2, #7
 800637a:	440a      	add	r2, r1
 800637c:	3284      	adds	r2, #132	; 0x84
 800637e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006382:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	01db      	lsls	r3, r3, #7
 800638e:	4413      	add	r3, r2
 8006390:	3384      	adds	r3, #132	; 0x84
 8006392:	461a      	mov	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	01db      	lsls	r3, r3, #7
 80063a4:	4413      	add	r3, r2
 80063a6:	3384      	adds	r3, #132	; 0x84
 80063a8:	69da      	ldr	r2, [r3, #28]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4619      	mov	r1, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	01db      	lsls	r3, r3, #7
 80063b4:	440b      	add	r3, r1
 80063b6:	3384      	adds	r3, #132	; 0x84
 80063b8:	4619      	mov	r1, r3
 80063ba:	4b58      	ldr	r3, [pc, #352]	; (800651c <LTDC_SetConfig+0x32c>)
 80063bc:	4013      	ands	r3, r2
 80063be:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	69da      	ldr	r2, [r3, #28]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	68f9      	ldr	r1, [r7, #12]
 80063ca:	6809      	ldr	r1, [r1, #0]
 80063cc:	4608      	mov	r0, r1
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	01c9      	lsls	r1, r1, #7
 80063d2:	4401      	add	r1, r0
 80063d4:	3184      	adds	r1, #132	; 0x84
 80063d6:	4313      	orrs	r3, r2
 80063d8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	01db      	lsls	r3, r3, #7
 80063e4:	4413      	add	r3, r2
 80063e6:	3384      	adds	r3, #132	; 0x84
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	01db      	lsls	r3, r3, #7
 80063f4:	4413      	add	r3, r2
 80063f6:	3384      	adds	r3, #132	; 0x84
 80063f8:	461a      	mov	r2, r3
 80063fa:	2300      	movs	r3, #0
 80063fc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	01db      	lsls	r3, r3, #7
 8006408:	4413      	add	r3, r2
 800640a:	3384      	adds	r3, #132	; 0x84
 800640c:	461a      	mov	r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800641c:	2304      	movs	r3, #4
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	e01b      	b.n	800645a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d102      	bne.n	8006430 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800642a:	2303      	movs	r3, #3
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	e014      	b.n	800645a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	2b04      	cmp	r3, #4
 8006436:	d00b      	beq.n	8006450 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800643c:	2b02      	cmp	r3, #2
 800643e:	d007      	beq.n	8006450 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006444:	2b03      	cmp	r3, #3
 8006446:	d003      	beq.n	8006450 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800644c:	2b07      	cmp	r3, #7
 800644e:	d102      	bne.n	8006456 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006450:	2302      	movs	r3, #2
 8006452:	61fb      	str	r3, [r7, #28]
 8006454:	e001      	b.n	800645a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006456:	2301      	movs	r3, #1
 8006458:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	01db      	lsls	r3, r3, #7
 8006464:	4413      	add	r3, r2
 8006466:	3384      	adds	r3, #132	; 0x84
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	6812      	ldr	r2, [r2, #0]
 800646e:	4611      	mov	r1, r2
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	01d2      	lsls	r2, r2, #7
 8006474:	440a      	add	r2, r1
 8006476:	3284      	adds	r2, #132	; 0x84
 8006478:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800647c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	fb02 f303 	mul.w	r3, r2, r3
 8006488:	041a      	lsls	r2, r3, #16
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	6859      	ldr	r1, [r3, #4]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	1acb      	subs	r3, r1, r3
 8006494:	69f9      	ldr	r1, [r7, #28]
 8006496:	fb01 f303 	mul.w	r3, r1, r3
 800649a:	3303      	adds	r3, #3
 800649c:	68f9      	ldr	r1, [r7, #12]
 800649e:	6809      	ldr	r1, [r1, #0]
 80064a0:	4608      	mov	r0, r1
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	01c9      	lsls	r1, r1, #7
 80064a6:	4401      	add	r1, r0
 80064a8:	3184      	adds	r1, #132	; 0x84
 80064aa:	4313      	orrs	r3, r2
 80064ac:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	01db      	lsls	r3, r3, #7
 80064b8:	4413      	add	r3, r2
 80064ba:	3384      	adds	r3, #132	; 0x84
 80064bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4619      	mov	r1, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	01db      	lsls	r3, r3, #7
 80064c8:	440b      	add	r3, r1
 80064ca:	3384      	adds	r3, #132	; 0x84
 80064cc:	4619      	mov	r1, r3
 80064ce:	4b14      	ldr	r3, [pc, #80]	; (8006520 <LTDC_SetConfig+0x330>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	01db      	lsls	r3, r3, #7
 80064de:	4413      	add	r3, r2
 80064e0:	3384      	adds	r3, #132	; 0x84
 80064e2:	461a      	mov	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	01db      	lsls	r3, r3, #7
 80064f4:	4413      	add	r3, r2
 80064f6:	3384      	adds	r3, #132	; 0x84
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	6812      	ldr	r2, [r2, #0]
 80064fe:	4611      	mov	r1, r2
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	01d2      	lsls	r2, r2, #7
 8006504:	440a      	add	r2, r1
 8006506:	3284      	adds	r2, #132	; 0x84
 8006508:	f043 0301 	orr.w	r3, r3, #1
 800650c:	6013      	str	r3, [r2, #0]
}
 800650e:	bf00      	nop
 8006510:	3724      	adds	r7, #36	; 0x24
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	fffff8f8 	.word	0xfffff8f8
 8006520:	fffff800 	.word	0xfffff800

08006524 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8006536:	2200      	movs	r2, #0
 8006538:	e001      	b.n	800653e <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800653a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d102      	bne.n	8006550 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800654a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800654e:	e000      	b.n	8006552 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8006550:	2200      	movs	r2, #0
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800655e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006562:	e000      	b.n	8006566 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8006564:	2200      	movs	r2, #0
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656e:	1e5a      	subs	r2, r3, #1
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	4413      	add	r3, r2
 800657e:	1e5a      	subs	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	441a      	add	r2, r3
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	4413      	add	r3, r2
 8006594:	1e5a      	subs	r2, r3, #1
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a2:	441a      	add	r2, r3
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	441a      	add	r2, r3
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ae:	4413      	add	r3, r2
 80065b0:	1e5a      	subs	r2, r3, #1
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80065ce:	4b23      	ldr	r3, [pc, #140]	; (800665c <HAL_PWREx_EnableOverDrive+0x98>)
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	4a22      	ldr	r2, [pc, #136]	; (800665c <HAL_PWREx_EnableOverDrive+0x98>)
 80065d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d8:	6413      	str	r3, [r2, #64]	; 0x40
 80065da:	4b20      	ldr	r3, [pc, #128]	; (800665c <HAL_PWREx_EnableOverDrive+0x98>)
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80065e6:	4b1e      	ldr	r3, [pc, #120]	; (8006660 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a1d      	ldr	r2, [pc, #116]	; (8006660 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065f2:	f7fc f9fd 	bl	80029f0 <HAL_GetTick>
 80065f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065f8:	e009      	b.n	800660e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80065fa:	f7fc f9f9 	bl	80029f0 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006608:	d901      	bls.n	800660e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e022      	b.n	8006654 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800660e:	4b14      	ldr	r3, [pc, #80]	; (8006660 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800661a:	d1ee      	bne.n	80065fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800661c:	4b10      	ldr	r3, [pc, #64]	; (8006660 <HAL_PWREx_EnableOverDrive+0x9c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a0f      	ldr	r2, [pc, #60]	; (8006660 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006626:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006628:	f7fc f9e2 	bl	80029f0 <HAL_GetTick>
 800662c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800662e:	e009      	b.n	8006644 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006630:	f7fc f9de 	bl	80029f0 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800663e:	d901      	bls.n	8006644 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e007      	b.n	8006654 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006644:	4b06      	ldr	r3, [pc, #24]	; (8006660 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006650:	d1ee      	bne.n	8006630 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	40023800 	.word	0x40023800
 8006660:	40007000 	.word	0x40007000

08006664 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800666c:	2300      	movs	r3, #0
 800666e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e25e      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 8087 	beq.w	8006796 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006688:	4b96      	ldr	r3, [pc, #600]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f003 030c 	and.w	r3, r3, #12
 8006690:	2b04      	cmp	r3, #4
 8006692:	d00c      	beq.n	80066ae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006694:	4b93      	ldr	r3, [pc, #588]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f003 030c 	and.w	r3, r3, #12
 800669c:	2b08      	cmp	r3, #8
 800669e:	d112      	bne.n	80066c6 <HAL_RCC_OscConfig+0x62>
 80066a0:	4b90      	ldr	r3, [pc, #576]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ac:	d10b      	bne.n	80066c6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ae:	4b8d      	ldr	r3, [pc, #564]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d06c      	beq.n	8006794 <HAL_RCC_OscConfig+0x130>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d168      	bne.n	8006794 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e238      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ce:	d106      	bne.n	80066de <HAL_RCC_OscConfig+0x7a>
 80066d0:	4b84      	ldr	r3, [pc, #528]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a83      	ldr	r2, [pc, #524]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80066d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066da:	6013      	str	r3, [r2, #0]
 80066dc:	e02e      	b.n	800673c <HAL_RCC_OscConfig+0xd8>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10c      	bne.n	8006700 <HAL_RCC_OscConfig+0x9c>
 80066e6:	4b7f      	ldr	r3, [pc, #508]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a7e      	ldr	r2, [pc, #504]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80066ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	4b7c      	ldr	r3, [pc, #496]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a7b      	ldr	r2, [pc, #492]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80066f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	e01d      	b.n	800673c <HAL_RCC_OscConfig+0xd8>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006708:	d10c      	bne.n	8006724 <HAL_RCC_OscConfig+0xc0>
 800670a:	4b76      	ldr	r3, [pc, #472]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a75      	ldr	r2, [pc, #468]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 8006710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	4b73      	ldr	r3, [pc, #460]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a72      	ldr	r2, [pc, #456]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 800671c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	e00b      	b.n	800673c <HAL_RCC_OscConfig+0xd8>
 8006724:	4b6f      	ldr	r3, [pc, #444]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a6e      	ldr	r2, [pc, #440]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 800672a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	4b6c      	ldr	r3, [pc, #432]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a6b      	ldr	r2, [pc, #428]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 8006736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800673a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d013      	beq.n	800676c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006744:	f7fc f954 	bl	80029f0 <HAL_GetTick>
 8006748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800674a:	e008      	b.n	800675e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800674c:	f7fc f950 	bl	80029f0 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b64      	cmp	r3, #100	; 0x64
 8006758:	d901      	bls.n	800675e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e1ec      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800675e:	4b61      	ldr	r3, [pc, #388]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0f0      	beq.n	800674c <HAL_RCC_OscConfig+0xe8>
 800676a:	e014      	b.n	8006796 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676c:	f7fc f940 	bl	80029f0 <HAL_GetTick>
 8006770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006772:	e008      	b.n	8006786 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006774:	f7fc f93c 	bl	80029f0 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b64      	cmp	r3, #100	; 0x64
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e1d8      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006786:	4b57      	ldr	r3, [pc, #348]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1f0      	bne.n	8006774 <HAL_RCC_OscConfig+0x110>
 8006792:	e000      	b.n	8006796 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d069      	beq.n	8006876 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067a2:	4b50      	ldr	r3, [pc, #320]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f003 030c 	and.w	r3, r3, #12
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00b      	beq.n	80067c6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ae:	4b4d      	ldr	r3, [pc, #308]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f003 030c 	and.w	r3, r3, #12
 80067b6:	2b08      	cmp	r3, #8
 80067b8:	d11c      	bne.n	80067f4 <HAL_RCC_OscConfig+0x190>
 80067ba:	4b4a      	ldr	r3, [pc, #296]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d116      	bne.n	80067f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067c6:	4b47      	ldr	r3, [pc, #284]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <HAL_RCC_OscConfig+0x17a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d001      	beq.n	80067de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e1ac      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067de:	4b41      	ldr	r3, [pc, #260]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	493d      	ldr	r1, [pc, #244]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067f2:	e040      	b.n	8006876 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d023      	beq.n	8006844 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067fc:	4b39      	ldr	r3, [pc, #228]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a38      	ldr	r2, [pc, #224]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 8006802:	f043 0301 	orr.w	r3, r3, #1
 8006806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006808:	f7fc f8f2 	bl	80029f0 <HAL_GetTick>
 800680c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800680e:	e008      	b.n	8006822 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006810:	f7fc f8ee 	bl	80029f0 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b02      	cmp	r3, #2
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e18a      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006822:	4b30      	ldr	r3, [pc, #192]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0f0      	beq.n	8006810 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800682e:	4b2d      	ldr	r3, [pc, #180]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	4929      	ldr	r1, [pc, #164]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 800683e:	4313      	orrs	r3, r2
 8006840:	600b      	str	r3, [r1, #0]
 8006842:	e018      	b.n	8006876 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006844:	4b27      	ldr	r3, [pc, #156]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a26      	ldr	r2, [pc, #152]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 800684a:	f023 0301 	bic.w	r3, r3, #1
 800684e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006850:	f7fc f8ce 	bl	80029f0 <HAL_GetTick>
 8006854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006856:	e008      	b.n	800686a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006858:	f7fc f8ca 	bl	80029f0 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b02      	cmp	r3, #2
 8006864:	d901      	bls.n	800686a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e166      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800686a:	4b1e      	ldr	r3, [pc, #120]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1f0      	bne.n	8006858 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0308 	and.w	r3, r3, #8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d038      	beq.n	80068f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d019      	beq.n	80068be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800688a:	4b16      	ldr	r3, [pc, #88]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 800688c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800688e:	4a15      	ldr	r2, [pc, #84]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 8006890:	f043 0301 	orr.w	r3, r3, #1
 8006894:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006896:	f7fc f8ab 	bl	80029f0 <HAL_GetTick>
 800689a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800689c:	e008      	b.n	80068b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800689e:	f7fc f8a7 	bl	80029f0 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e143      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068b0:	4b0c      	ldr	r3, [pc, #48]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80068b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0f0      	beq.n	800689e <HAL_RCC_OscConfig+0x23a>
 80068bc:	e01a      	b.n	80068f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068be:	4b09      	ldr	r3, [pc, #36]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80068c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c2:	4a08      	ldr	r2, [pc, #32]	; (80068e4 <HAL_RCC_OscConfig+0x280>)
 80068c4:	f023 0301 	bic.w	r3, r3, #1
 80068c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ca:	f7fc f891 	bl	80029f0 <HAL_GetTick>
 80068ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068d0:	e00a      	b.n	80068e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068d2:	f7fc f88d 	bl	80029f0 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d903      	bls.n	80068e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e129      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d4>
 80068e4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068e8:	4b95      	ldr	r3, [pc, #596]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 80068ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1ee      	bne.n	80068d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 80a4 	beq.w	8006a4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006902:	4b8f      	ldr	r3, [pc, #572]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10d      	bne.n	800692a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800690e:	4b8c      	ldr	r3, [pc, #560]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	4a8b      	ldr	r2, [pc, #556]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006918:	6413      	str	r3, [r2, #64]	; 0x40
 800691a:	4b89      	ldr	r3, [pc, #548]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006926:	2301      	movs	r3, #1
 8006928:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800692a:	4b86      	ldr	r3, [pc, #536]	; (8006b44 <HAL_RCC_OscConfig+0x4e0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006932:	2b00      	cmp	r3, #0
 8006934:	d118      	bne.n	8006968 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006936:	4b83      	ldr	r3, [pc, #524]	; (8006b44 <HAL_RCC_OscConfig+0x4e0>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a82      	ldr	r2, [pc, #520]	; (8006b44 <HAL_RCC_OscConfig+0x4e0>)
 800693c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006942:	f7fc f855 	bl	80029f0 <HAL_GetTick>
 8006946:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006948:	e008      	b.n	800695c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800694a:	f7fc f851 	bl	80029f0 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b64      	cmp	r3, #100	; 0x64
 8006956:	d901      	bls.n	800695c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e0ed      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800695c:	4b79      	ldr	r3, [pc, #484]	; (8006b44 <HAL_RCC_OscConfig+0x4e0>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006964:	2b00      	cmp	r3, #0
 8006966:	d0f0      	beq.n	800694a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d106      	bne.n	800697e <HAL_RCC_OscConfig+0x31a>
 8006970:	4b73      	ldr	r3, [pc, #460]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006974:	4a72      	ldr	r2, [pc, #456]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006976:	f043 0301 	orr.w	r3, r3, #1
 800697a:	6713      	str	r3, [r2, #112]	; 0x70
 800697c:	e02d      	b.n	80069da <HAL_RCC_OscConfig+0x376>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10c      	bne.n	80069a0 <HAL_RCC_OscConfig+0x33c>
 8006986:	4b6e      	ldr	r3, [pc, #440]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698a:	4a6d      	ldr	r2, [pc, #436]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 800698c:	f023 0301 	bic.w	r3, r3, #1
 8006990:	6713      	str	r3, [r2, #112]	; 0x70
 8006992:	4b6b      	ldr	r3, [pc, #428]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006996:	4a6a      	ldr	r2, [pc, #424]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006998:	f023 0304 	bic.w	r3, r3, #4
 800699c:	6713      	str	r3, [r2, #112]	; 0x70
 800699e:	e01c      	b.n	80069da <HAL_RCC_OscConfig+0x376>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	2b05      	cmp	r3, #5
 80069a6:	d10c      	bne.n	80069c2 <HAL_RCC_OscConfig+0x35e>
 80069a8:	4b65      	ldr	r3, [pc, #404]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 80069aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ac:	4a64      	ldr	r2, [pc, #400]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 80069ae:	f043 0304 	orr.w	r3, r3, #4
 80069b2:	6713      	str	r3, [r2, #112]	; 0x70
 80069b4:	4b62      	ldr	r3, [pc, #392]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 80069b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b8:	4a61      	ldr	r2, [pc, #388]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 80069ba:	f043 0301 	orr.w	r3, r3, #1
 80069be:	6713      	str	r3, [r2, #112]	; 0x70
 80069c0:	e00b      	b.n	80069da <HAL_RCC_OscConfig+0x376>
 80069c2:	4b5f      	ldr	r3, [pc, #380]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 80069c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c6:	4a5e      	ldr	r2, [pc, #376]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 80069c8:	f023 0301 	bic.w	r3, r3, #1
 80069cc:	6713      	str	r3, [r2, #112]	; 0x70
 80069ce:	4b5c      	ldr	r3, [pc, #368]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 80069d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d2:	4a5b      	ldr	r2, [pc, #364]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 80069d4:	f023 0304 	bic.w	r3, r3, #4
 80069d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d015      	beq.n	8006a0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e2:	f7fc f805 	bl	80029f0 <HAL_GetTick>
 80069e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069e8:	e00a      	b.n	8006a00 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069ea:	f7fc f801 	bl	80029f0 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d901      	bls.n	8006a00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e09b      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a00:	4b4f      	ldr	r3, [pc, #316]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0ee      	beq.n	80069ea <HAL_RCC_OscConfig+0x386>
 8006a0c:	e014      	b.n	8006a38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a0e:	f7fb ffef 	bl	80029f0 <HAL_GetTick>
 8006a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a14:	e00a      	b.n	8006a2c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a16:	f7fb ffeb 	bl	80029f0 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e085      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a2c:	4b44      	ldr	r3, [pc, #272]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1ee      	bne.n	8006a16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d105      	bne.n	8006a4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a3e:	4b40      	ldr	r3, [pc, #256]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	4a3f      	ldr	r2, [pc, #252]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d071      	beq.n	8006b36 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a52:	4b3b      	ldr	r3, [pc, #236]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 030c 	and.w	r3, r3, #12
 8006a5a:	2b08      	cmp	r3, #8
 8006a5c:	d069      	beq.n	8006b32 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d14b      	bne.n	8006afe <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a66:	4b36      	ldr	r3, [pc, #216]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a35      	ldr	r2, [pc, #212]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006a6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a72:	f7fb ffbd 	bl	80029f0 <HAL_GetTick>
 8006a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a78:	e008      	b.n	8006a8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a7a:	f7fb ffb9 	bl	80029f0 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d901      	bls.n	8006a8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e055      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a8c:	4b2c      	ldr	r3, [pc, #176]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1f0      	bne.n	8006a7a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	69da      	ldr	r2, [r3, #28]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	019b      	lsls	r3, r3, #6
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aae:	085b      	lsrs	r3, r3, #1
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	041b      	lsls	r3, r3, #16
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	061b      	lsls	r3, r3, #24
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac2:	071b      	lsls	r3, r3, #28
 8006ac4:	491e      	ldr	r1, [pc, #120]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006aca:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a1c      	ldr	r2, [pc, #112]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006ad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad6:	f7fb ff8b 	bl	80029f0 <HAL_GetTick>
 8006ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006adc:	e008      	b.n	8006af0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ade:	f7fb ff87 	bl	80029f0 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d901      	bls.n	8006af0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e023      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af0:	4b13      	ldr	r3, [pc, #76]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0f0      	beq.n	8006ade <HAL_RCC_OscConfig+0x47a>
 8006afc:	e01b      	b.n	8006b36 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006afe:	4b10      	ldr	r3, [pc, #64]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a0f      	ldr	r2, [pc, #60]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006b04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0a:	f7fb ff71 	bl	80029f0 <HAL_GetTick>
 8006b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b10:	e008      	b.n	8006b24 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b12:	f7fb ff6d 	bl	80029f0 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d901      	bls.n	8006b24 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e009      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b24:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <HAL_RCC_OscConfig+0x4dc>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1f0      	bne.n	8006b12 <HAL_RCC_OscConfig+0x4ae>
 8006b30:	e001      	b.n	8006b36 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	40023800 	.word	0x40023800
 8006b44:	40007000 	.word	0x40007000

08006b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e0ce      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b60:	4b69      	ldr	r3, [pc, #420]	; (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 030f 	and.w	r3, r3, #15
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d910      	bls.n	8006b90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b6e:	4b66      	ldr	r3, [pc, #408]	; (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f023 020f 	bic.w	r2, r3, #15
 8006b76:	4964      	ldr	r1, [pc, #400]	; (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7e:	4b62      	ldr	r3, [pc, #392]	; (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d001      	beq.n	8006b90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e0b6      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d020      	beq.n	8006bde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d005      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ba8:	4b58      	ldr	r3, [pc, #352]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	4a57      	ldr	r2, [pc, #348]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0308 	and.w	r3, r3, #8
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bc0:	4b52      	ldr	r3, [pc, #328]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	4a51      	ldr	r2, [pc, #324]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bcc:	4b4f      	ldr	r3, [pc, #316]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	494c      	ldr	r1, [pc, #304]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d040      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d107      	bne.n	8006c02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bf2:	4b46      	ldr	r3, [pc, #280]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d115      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e07d      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d107      	bne.n	8006c1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c0a:	4b40      	ldr	r3, [pc, #256]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d109      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e071      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c1a:	4b3c      	ldr	r3, [pc, #240]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e069      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c2a:	4b38      	ldr	r3, [pc, #224]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f023 0203 	bic.w	r2, r3, #3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	4935      	ldr	r1, [pc, #212]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c3c:	f7fb fed8 	bl	80029f0 <HAL_GetTick>
 8006c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c42:	e00a      	b.n	8006c5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c44:	f7fb fed4 	bl	80029f0 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e051      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c5a:	4b2c      	ldr	r3, [pc, #176]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 020c 	and.w	r2, r3, #12
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d1eb      	bne.n	8006c44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c6c:	4b26      	ldr	r3, [pc, #152]	; (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d210      	bcs.n	8006c9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c7a:	4b23      	ldr	r3, [pc, #140]	; (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f023 020f 	bic.w	r2, r3, #15
 8006c82:	4921      	ldr	r1, [pc, #132]	; (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c8a:	4b1f      	ldr	r3, [pc, #124]	; (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d001      	beq.n	8006c9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e030      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d008      	beq.n	8006cba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ca8:	4b18      	ldr	r3, [pc, #96]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	4915      	ldr	r1, [pc, #84]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0308 	and.w	r3, r3, #8
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d009      	beq.n	8006cda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006cc6:	4b11      	ldr	r3, [pc, #68]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	490d      	ldr	r1, [pc, #52]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cda:	f000 f81d 	bl	8006d18 <HAL_RCC_GetSysClockFreq>
 8006cde:	4601      	mov	r1, r0
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	091b      	lsrs	r3, r3, #4
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <HAL_RCC_ClockConfig+0x1c8>)
 8006cec:	5cd3      	ldrb	r3, [r2, r3]
 8006cee:	fa21 f303 	lsr.w	r3, r1, r3
 8006cf2:	4a08      	ldr	r2, [pc, #32]	; (8006d14 <HAL_RCC_ClockConfig+0x1cc>)
 8006cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	f7fb fe36 	bl	8002968 <HAL_InitTick>

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	40023c00 	.word	0x40023c00
 8006d0c:	40023800 	.word	0x40023800
 8006d10:	0800c834 	.word	0x0800c834
 8006d14:	20000060 	.word	0x20000060

08006d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	607b      	str	r3, [r7, #4]
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	2300      	movs	r3, #0
 8006d28:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d2e:	4b50      	ldr	r3, [pc, #320]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 030c 	and.w	r3, r3, #12
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d007      	beq.n	8006d4a <HAL_RCC_GetSysClockFreq+0x32>
 8006d3a:	2b08      	cmp	r3, #8
 8006d3c:	d008      	beq.n	8006d50 <HAL_RCC_GetSysClockFreq+0x38>
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f040 808d 	bne.w	8006e5e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d44:	4b4b      	ldr	r3, [pc, #300]	; (8006e74 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006d46:	60bb      	str	r3, [r7, #8]
       break;
 8006d48:	e08c      	b.n	8006e64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d4a:	4b4b      	ldr	r3, [pc, #300]	; (8006e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d4c:	60bb      	str	r3, [r7, #8]
      break;
 8006d4e:	e089      	b.n	8006e64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d50:	4b47      	ldr	r3, [pc, #284]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d58:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006d5a:	4b45      	ldr	r3, [pc, #276]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d023      	beq.n	8006dae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d66:	4b42      	ldr	r3, [pc, #264]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	099b      	lsrs	r3, r3, #6
 8006d6c:	f04f 0400 	mov.w	r4, #0
 8006d70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006d74:	f04f 0200 	mov.w	r2, #0
 8006d78:	ea03 0501 	and.w	r5, r3, r1
 8006d7c:	ea04 0602 	and.w	r6, r4, r2
 8006d80:	4a3d      	ldr	r2, [pc, #244]	; (8006e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d82:	fb02 f106 	mul.w	r1, r2, r6
 8006d86:	2200      	movs	r2, #0
 8006d88:	fb02 f205 	mul.w	r2, r2, r5
 8006d8c:	440a      	add	r2, r1
 8006d8e:	493a      	ldr	r1, [pc, #232]	; (8006e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d90:	fba5 0101 	umull	r0, r1, r5, r1
 8006d94:	1853      	adds	r3, r2, r1
 8006d96:	4619      	mov	r1, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f04f 0400 	mov.w	r4, #0
 8006d9e:	461a      	mov	r2, r3
 8006da0:	4623      	mov	r3, r4
 8006da2:	f7f9 fa9d 	bl	80002e0 <__aeabi_uldivmod>
 8006da6:	4603      	mov	r3, r0
 8006da8:	460c      	mov	r4, r1
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	e049      	b.n	8006e42 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dae:	4b30      	ldr	r3, [pc, #192]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	099b      	lsrs	r3, r3, #6
 8006db4:	f04f 0400 	mov.w	r4, #0
 8006db8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006dbc:	f04f 0200 	mov.w	r2, #0
 8006dc0:	ea03 0501 	and.w	r5, r3, r1
 8006dc4:	ea04 0602 	and.w	r6, r4, r2
 8006dc8:	4629      	mov	r1, r5
 8006dca:	4632      	mov	r2, r6
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	f04f 0400 	mov.w	r4, #0
 8006dd4:	0154      	lsls	r4, r2, #5
 8006dd6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006dda:	014b      	lsls	r3, r1, #5
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4622      	mov	r2, r4
 8006de0:	1b49      	subs	r1, r1, r5
 8006de2:	eb62 0206 	sbc.w	r2, r2, r6
 8006de6:	f04f 0300 	mov.w	r3, #0
 8006dea:	f04f 0400 	mov.w	r4, #0
 8006dee:	0194      	lsls	r4, r2, #6
 8006df0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006df4:	018b      	lsls	r3, r1, #6
 8006df6:	1a5b      	subs	r3, r3, r1
 8006df8:	eb64 0402 	sbc.w	r4, r4, r2
 8006dfc:	f04f 0100 	mov.w	r1, #0
 8006e00:	f04f 0200 	mov.w	r2, #0
 8006e04:	00e2      	lsls	r2, r4, #3
 8006e06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006e0a:	00d9      	lsls	r1, r3, #3
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4614      	mov	r4, r2
 8006e10:	195b      	adds	r3, r3, r5
 8006e12:	eb44 0406 	adc.w	r4, r4, r6
 8006e16:	f04f 0100 	mov.w	r1, #0
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	02a2      	lsls	r2, r4, #10
 8006e20:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006e24:	0299      	lsls	r1, r3, #10
 8006e26:	460b      	mov	r3, r1
 8006e28:	4614      	mov	r4, r2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f04f 0400 	mov.w	r4, #0
 8006e34:	461a      	mov	r2, r3
 8006e36:	4623      	mov	r3, r4
 8006e38:	f7f9 fa52 	bl	80002e0 <__aeabi_uldivmod>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	460c      	mov	r4, r1
 8006e40:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006e42:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	0c1b      	lsrs	r3, r3, #16
 8006e48:	f003 0303 	and.w	r3, r3, #3
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5a:	60bb      	str	r3, [r7, #8]
      break;
 8006e5c:	e002      	b.n	8006e64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e5e:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006e60:	60bb      	str	r3, [r7, #8]
      break;
 8006e62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e64:	68bb      	ldr	r3, [r7, #8]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	40023800 	.word	0x40023800
 8006e74:	00f42400 	.word	0x00f42400
 8006e78:	017d7840 	.word	0x017d7840

08006e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b088      	sub	sp, #32
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d012      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ea4:	4b69      	ldr	r3, [pc, #420]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	4a68      	ldr	r2, [pc, #416]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eaa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006eae:	6093      	str	r3, [r2, #8]
 8006eb0:	4b66      	ldr	r3, [pc, #408]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb8:	4964      	ldr	r1, [pc, #400]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d017      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ed6:	4b5d      	ldr	r3, [pc, #372]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee4:	4959      	ldr	r1, [pc, #356]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ef4:	d101      	bne.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f02:	2301      	movs	r3, #1
 8006f04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d017      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f12:	4b4e      	ldr	r3, [pc, #312]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f20:	494a      	ldr	r1, [pc, #296]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f30:	d101      	bne.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006f32:	2301      	movs	r3, #1
 8006f34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 808b 	beq.w	8007076 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f60:	4b3a      	ldr	r3, [pc, #232]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	4a39      	ldr	r2, [pc, #228]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8006f6c:	4b37      	ldr	r3, [pc, #220]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f74:	60bb      	str	r3, [r7, #8]
 8006f76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f78:	4b35      	ldr	r3, [pc, #212]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a34      	ldr	r2, [pc, #208]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f84:	f7fb fd34 	bl	80029f0 <HAL_GetTick>
 8006f88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f8c:	f7fb fd30 	bl	80029f0 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b64      	cmp	r3, #100	; 0x64
 8006f98:	d901      	bls.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e38d      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f9e:	4b2c      	ldr	r3, [pc, #176]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0f0      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006faa:	4b28      	ldr	r3, [pc, #160]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fb2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d035      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d02e      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fc8:	4b20      	ldr	r3, [pc, #128]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fd2:	4b1e      	ldr	r3, [pc, #120]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd6:	4a1d      	ldr	r2, [pc, #116]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fdc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006fde:	4b1b      	ldr	r3, [pc, #108]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe2:	4a1a      	ldr	r2, [pc, #104]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fe8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006fea:	4a18      	ldr	r2, [pc, #96]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ff0:	4b16      	ldr	r3, [pc, #88]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d114      	bne.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffc:	f7fb fcf8 	bl	80029f0 <HAL_GetTick>
 8007000:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007002:	e00a      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007004:	f7fb fcf4 	bl	80029f0 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007012:	4293      	cmp	r3, r2
 8007014:	d901      	bls.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e34f      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800701a:	4b0c      	ldr	r3, [pc, #48]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800701c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0ee      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800702e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007032:	d111      	bne.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007034:	4b05      	ldr	r3, [pc, #20]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007040:	4b04      	ldr	r3, [pc, #16]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007042:	400b      	ands	r3, r1
 8007044:	4901      	ldr	r1, [pc, #4]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007046:	4313      	orrs	r3, r2
 8007048:	608b      	str	r3, [r1, #8]
 800704a:	e00b      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800704c:	40023800 	.word	0x40023800
 8007050:	40007000 	.word	0x40007000
 8007054:	0ffffcff 	.word	0x0ffffcff
 8007058:	4bb3      	ldr	r3, [pc, #716]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	4ab2      	ldr	r2, [pc, #712]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800705e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007062:	6093      	str	r3, [r2, #8]
 8007064:	4bb0      	ldr	r3, [pc, #704]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007066:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007070:	49ad      	ldr	r1, [pc, #692]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007072:	4313      	orrs	r3, r2
 8007074:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0310 	and.w	r3, r3, #16
 800707e:	2b00      	cmp	r3, #0
 8007080:	d010      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007082:	4ba9      	ldr	r3, [pc, #676]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007088:	4aa7      	ldr	r2, [pc, #668]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800708a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800708e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007092:	4ba5      	ldr	r3, [pc, #660]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007094:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	49a2      	ldr	r1, [pc, #648]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00a      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070b0:	4b9d      	ldr	r3, [pc, #628]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070be:	499a      	ldr	r1, [pc, #616]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070d2:	4b95      	ldr	r3, [pc, #596]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070e0:	4991      	ldr	r1, [pc, #580]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070f4:	4b8c      	ldr	r3, [pc, #560]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007102:	4989      	ldr	r1, [pc, #548]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007104:	4313      	orrs	r3, r2
 8007106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007116:	4b84      	ldr	r3, [pc, #528]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007124:	4980      	ldr	r1, [pc, #512]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007126:	4313      	orrs	r3, r2
 8007128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007138:	4b7b      	ldr	r3, [pc, #492]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800713a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713e:	f023 0203 	bic.w	r2, r3, #3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007146:	4978      	ldr	r1, [pc, #480]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007148:	4313      	orrs	r3, r2
 800714a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800715a:	4b73      	ldr	r3, [pc, #460]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800715c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007160:	f023 020c 	bic.w	r2, r3, #12
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007168:	496f      	ldr	r1, [pc, #444]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800716a:	4313      	orrs	r3, r2
 800716c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800717c:	4b6a      	ldr	r3, [pc, #424]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800717e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007182:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718a:	4967      	ldr	r1, [pc, #412]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800718c:	4313      	orrs	r3, r2
 800718e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800719e:	4b62      	ldr	r3, [pc, #392]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ac:	495e      	ldr	r1, [pc, #376]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80071c0:	4b59      	ldr	r3, [pc, #356]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ce:	4956      	ldr	r1, [pc, #344]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80071e2:	4b51      	ldr	r3, [pc, #324]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f0:	494d      	ldr	r1, [pc, #308]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00a      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007204:	4b48      	ldr	r3, [pc, #288]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800720a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007212:	4945      	ldr	r1, [pc, #276]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007214:	4313      	orrs	r3, r2
 8007216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007226:	4b40      	ldr	r3, [pc, #256]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007234:	493c      	ldr	r1, [pc, #240]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007236:	4313      	orrs	r3, r2
 8007238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00a      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007248:	4b37      	ldr	r3, [pc, #220]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800724a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007256:	4934      	ldr	r1, [pc, #208]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007258:	4313      	orrs	r3, r2
 800725a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d011      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800726a:	4b2f      	ldr	r3, [pc, #188]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800726c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007270:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007278:	492b      	ldr	r1, [pc, #172]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800727a:	4313      	orrs	r3, r2
 800727c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007288:	d101      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800728a:	2301      	movs	r3, #1
 800728c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0308 	and.w	r3, r3, #8
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800729a:	2301      	movs	r3, #1
 800729c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072aa:	4b1f      	ldr	r3, [pc, #124]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072b8:	491b      	ldr	r1, [pc, #108]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00b      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80072cc:	4b16      	ldr	r3, [pc, #88]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072dc:	4912      	ldr	r1, [pc, #72]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00b      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80072f0:	4b0d      	ldr	r3, [pc, #52]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007300:	4909      	ldr	r1, [pc, #36]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007302:	4313      	orrs	r3, r2
 8007304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00f      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007314:	4b04      	ldr	r3, [pc, #16]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800731a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007324:	e002      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007326:	bf00      	nop
 8007328:	40023800 	.word	0x40023800
 800732c:	4985      	ldr	r1, [pc, #532]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800732e:	4313      	orrs	r3, r2
 8007330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00b      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007340:	4b80      	ldr	r3, [pc, #512]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007346:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007350:	497c      	ldr	r1, [pc, #496]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007352:	4313      	orrs	r3, r2
 8007354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d005      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007366:	f040 80d6 	bne.w	8007516 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800736a:	4b76      	ldr	r3, [pc, #472]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a75      	ldr	r2, [pc, #468]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007370:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007376:	f7fb fb3b 	bl	80029f0 <HAL_GetTick>
 800737a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800737c:	e008      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800737e:	f7fb fb37 	bl	80029f0 <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2b64      	cmp	r3, #100	; 0x64
 800738a:	d901      	bls.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e194      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007390:	4b6c      	ldr	r3, [pc, #432]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1f0      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d021      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x570>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d11d      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80073b0:	4b64      	ldr	r3, [pc, #400]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073b6:	0c1b      	lsrs	r3, r3, #16
 80073b8:	f003 0303 	and.w	r3, r3, #3
 80073bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073be:	4b61      	ldr	r3, [pc, #388]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073c4:	0e1b      	lsrs	r3, r3, #24
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	019a      	lsls	r2, r3, #6
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	041b      	lsls	r3, r3, #16
 80073d6:	431a      	orrs	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	061b      	lsls	r3, r3, #24
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	071b      	lsls	r3, r3, #28
 80073e4:	4957      	ldr	r1, [pc, #348]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d004      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007400:	d00a      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800740a:	2b00      	cmp	r3, #0
 800740c:	d02e      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007416:	d129      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007418:	4b4a      	ldr	r3, [pc, #296]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800741a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800741e:	0c1b      	lsrs	r3, r3, #16
 8007420:	f003 0303 	and.w	r3, r3, #3
 8007424:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007426:	4b47      	ldr	r3, [pc, #284]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800742c:	0f1b      	lsrs	r3, r3, #28
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	019a      	lsls	r2, r3, #6
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	041b      	lsls	r3, r3, #16
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	061b      	lsls	r3, r3, #24
 8007446:	431a      	orrs	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	071b      	lsls	r3, r3, #28
 800744c:	493d      	ldr	r1, [pc, #244]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800744e:	4313      	orrs	r3, r2
 8007450:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007454:	4b3b      	ldr	r3, [pc, #236]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800745a:	f023 021f 	bic.w	r2, r3, #31
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007462:	3b01      	subs	r3, #1
 8007464:	4937      	ldr	r1, [pc, #220]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007466:	4313      	orrs	r3, r2
 8007468:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d01d      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007478:	4b32      	ldr	r3, [pc, #200]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800747a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800747e:	0e1b      	lsrs	r3, r3, #24
 8007480:	f003 030f 	and.w	r3, r3, #15
 8007484:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007486:	4b2f      	ldr	r3, [pc, #188]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800748c:	0f1b      	lsrs	r3, r3, #28
 800748e:	f003 0307 	and.w	r3, r3, #7
 8007492:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	019a      	lsls	r2, r3, #6
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	041b      	lsls	r3, r3, #16
 80074a0:	431a      	orrs	r2, r3
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	061b      	lsls	r3, r3, #24
 80074a6:	431a      	orrs	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	071b      	lsls	r3, r3, #28
 80074ac:	4925      	ldr	r1, [pc, #148]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d011      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	019a      	lsls	r2, r3, #6
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	041b      	lsls	r3, r3, #16
 80074cc:	431a      	orrs	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	061b      	lsls	r3, r3, #24
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	071b      	lsls	r3, r3, #28
 80074dc:	4919      	ldr	r1, [pc, #100]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074e4:	4b17      	ldr	r3, [pc, #92]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a16      	ldr	r2, [pc, #88]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f0:	f7fb fa7e 	bl	80029f0 <HAL_GetTick>
 80074f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074f6:	e008      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80074f8:	f7fb fa7a 	bl	80029f0 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b64      	cmp	r3, #100	; 0x64
 8007504:	d901      	bls.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e0d7      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800750a:	4b0e      	ldr	r3, [pc, #56]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0f0      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	2b01      	cmp	r3, #1
 800751a:	f040 80cd 	bne.w	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800751e:	4b09      	ldr	r3, [pc, #36]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a08      	ldr	r2, [pc, #32]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800752a:	f7fb fa61 	bl	80029f0 <HAL_GetTick>
 800752e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007530:	e00a      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007532:	f7fb fa5d 	bl	80029f0 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	2b64      	cmp	r3, #100	; 0x64
 800753e:	d903      	bls.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e0ba      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007544:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007548:	4b5e      	ldr	r3, [pc, #376]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007554:	d0ed      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007566:	2b00      	cmp	r3, #0
 8007568:	d009      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007572:	2b00      	cmp	r3, #0
 8007574:	d02e      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	d12a      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800757e:	4b51      	ldr	r3, [pc, #324]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007584:	0c1b      	lsrs	r3, r3, #16
 8007586:	f003 0303 	and.w	r3, r3, #3
 800758a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800758c:	4b4d      	ldr	r3, [pc, #308]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800758e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007592:	0f1b      	lsrs	r3, r3, #28
 8007594:	f003 0307 	and.w	r3, r3, #7
 8007598:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	019a      	lsls	r2, r3, #6
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	041b      	lsls	r3, r3, #16
 80075a4:	431a      	orrs	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	061b      	lsls	r3, r3, #24
 80075ac:	431a      	orrs	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	071b      	lsls	r3, r3, #28
 80075b2:	4944      	ldr	r1, [pc, #272]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80075ba:	4b42      	ldr	r3, [pc, #264]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c8:	3b01      	subs	r3, #1
 80075ca:	021b      	lsls	r3, r3, #8
 80075cc:	493d      	ldr	r1, [pc, #244]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d022      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075e8:	d11d      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075ea:	4b36      	ldr	r3, [pc, #216]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f0:	0e1b      	lsrs	r3, r3, #24
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075f8:	4b32      	ldr	r3, [pc, #200]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075fe:	0f1b      	lsrs	r3, r3, #28
 8007600:	f003 0307 	and.w	r3, r3, #7
 8007604:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	019a      	lsls	r2, r3, #6
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	041b      	lsls	r3, r3, #16
 8007612:	431a      	orrs	r2, r3
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	061b      	lsls	r3, r3, #24
 8007618:	431a      	orrs	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	071b      	lsls	r3, r3, #28
 800761e:	4929      	ldr	r1, [pc, #164]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007620:	4313      	orrs	r3, r2
 8007622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0308 	and.w	r3, r3, #8
 800762e:	2b00      	cmp	r3, #0
 8007630:	d028      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007632:	4b24      	ldr	r3, [pc, #144]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007638:	0e1b      	lsrs	r3, r3, #24
 800763a:	f003 030f 	and.w	r3, r3, #15
 800763e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007640:	4b20      	ldr	r3, [pc, #128]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007646:	0c1b      	lsrs	r3, r3, #16
 8007648:	f003 0303 	and.w	r3, r3, #3
 800764c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	019a      	lsls	r2, r3, #6
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	041b      	lsls	r3, r3, #16
 8007658:	431a      	orrs	r2, r3
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	061b      	lsls	r3, r3, #24
 800765e:	431a      	orrs	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	69db      	ldr	r3, [r3, #28]
 8007664:	071b      	lsls	r3, r3, #28
 8007666:	4917      	ldr	r1, [pc, #92]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007668:	4313      	orrs	r3, r2
 800766a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800766e:	4b15      	ldr	r3, [pc, #84]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	4911      	ldr	r1, [pc, #68]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800767e:	4313      	orrs	r3, r2
 8007680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007684:	4b0f      	ldr	r3, [pc, #60]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a0e      	ldr	r2, [pc, #56]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800768a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800768e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007690:	f7fb f9ae 	bl	80029f0 <HAL_GetTick>
 8007694:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007696:	e008      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007698:	f7fb f9aa 	bl	80029f0 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b64      	cmp	r3, #100	; 0x64
 80076a4:	d901      	bls.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e007      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076aa:	4b06      	ldr	r3, [pc, #24]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b6:	d1ef      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3720      	adds	r7, #32
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	40023800 	.word	0x40023800

080076c8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e025      	b.n	8007728 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d106      	bne.n	80076f6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 fecb 	bl	800948c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2202      	movs	r2, #2
 80076fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3304      	adds	r3, #4
 8007706:	4619      	mov	r1, r3
 8007708:	4610      	mov	r0, r2
 800770a:	f000 fc67 	bl	8007fdc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	461a      	mov	r2, r3
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	f000 fcd1 	bl	80080c0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b02      	cmp	r3, #2
 8007746:	d101      	bne.n	800774c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007748:	2302      	movs	r3, #2
 800774a:	e018      	b.n	800777e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2202      	movs	r2, #2
 8007750:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	4618      	mov	r0, r3
 800775e:	f000 fd2f 	bl	80081c0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d104      	bne.n	8007774 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2205      	movs	r2, #5
 800776e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007772:	e003      	b.n	800777c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b02      	cmp	r3, #2
 800779a:	d101      	bne.n	80077a0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800779c:	2302      	movs	r3, #2
 800779e:	e00e      	b.n	80077be <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fd27 	bl	8008202 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e01d      	b.n	8007814 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d106      	bne.n	80077f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f001 fd6f 	bl	80092d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2202      	movs	r2, #2
 80077f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	3304      	adds	r3, #4
 8007802:	4619      	mov	r1, r3
 8007804:	4610      	mov	r0, r2
 8007806:	f000 fa35 	bl	8007c74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f042 0201 	orr.w	r2, r2, #1
 8007832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689a      	ldr	r2, [r3, #8]
 800783a:	4b0c      	ldr	r3, [pc, #48]	; (800786c <HAL_TIM_Base_Start_IT+0x50>)
 800783c:	4013      	ands	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b06      	cmp	r3, #6
 8007844:	d00b      	beq.n	800785e <HAL_TIM_Base_Start_IT+0x42>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800784c:	d007      	beq.n	800785e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f042 0201 	orr.w	r2, r2, #1
 800785c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	00010007 	.word	0x00010007

08007870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b02      	cmp	r3, #2
 8007884:	d122      	bne.n	80078cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b02      	cmp	r3, #2
 8007892:	d11b      	bne.n	80078cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f06f 0202 	mvn.w	r2, #2
 800789c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f9c0 	bl	8007c38 <HAL_TIM_IC_CaptureCallback>
 80078b8:	e005      	b.n	80078c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f9b2 	bl	8007c24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f9c3 	bl	8007c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d122      	bne.n	8007920 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	d11b      	bne.n	8007920 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f06f 0204 	mvn.w	r2, #4
 80078f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2202      	movs	r2, #2
 80078f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f996 	bl	8007c38 <HAL_TIM_IC_CaptureCallback>
 800790c:	e005      	b.n	800791a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f988 	bl	8007c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f999 	bl	8007c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	2b08      	cmp	r3, #8
 800792c:	d122      	bne.n	8007974 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b08      	cmp	r3, #8
 800793a:	d11b      	bne.n	8007974 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f06f 0208 	mvn.w	r2, #8
 8007944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2204      	movs	r2, #4
 800794a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	f003 0303 	and.w	r3, r3, #3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f96c 	bl	8007c38 <HAL_TIM_IC_CaptureCallback>
 8007960:	e005      	b.n	800796e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f95e 	bl	8007c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f96f 	bl	8007c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f003 0310 	and.w	r3, r3, #16
 800797e:	2b10      	cmp	r3, #16
 8007980:	d122      	bne.n	80079c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b10      	cmp	r3, #16
 800798e:	d11b      	bne.n	80079c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f06f 0210 	mvn.w	r2, #16
 8007998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2208      	movs	r2, #8
 800799e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f942 	bl	8007c38 <HAL_TIM_IC_CaptureCallback>
 80079b4:	e005      	b.n	80079c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f934 	bl	8007c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f945 	bl	8007c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d10e      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d107      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f06f 0201 	mvn.w	r2, #1
 80079ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fc7a 	bl	80082e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fe:	2b80      	cmp	r3, #128	; 0x80
 8007a00:	d10e      	bne.n	8007a20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a0c:	2b80      	cmp	r3, #128	; 0x80
 8007a0e:	d107      	bne.n	8007a20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 faca 	bl	8007fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2e:	d10e      	bne.n	8007a4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a3a:	2b80      	cmp	r3, #128	; 0x80
 8007a3c:	d107      	bne.n	8007a4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fabd 	bl	8007fc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a58:	2b40      	cmp	r3, #64	; 0x40
 8007a5a:	d10e      	bne.n	8007a7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a66:	2b40      	cmp	r3, #64	; 0x40
 8007a68:	d107      	bne.n	8007a7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f8f3 	bl	8007c60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	d10e      	bne.n	8007aa6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	f003 0320 	and.w	r3, r3, #32
 8007a92:	2b20      	cmp	r3, #32
 8007a94:	d107      	bne.n	8007aa6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f06f 0220 	mvn.w	r2, #32
 8007a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fa7d 	bl	8007fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007aa6:	bf00      	nop
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
	...

08007ab0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <HAL_TIM_ConfigClockSource+0x18>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	e0a6      	b.n	8007c16 <HAL_TIM_ConfigClockSource+0x166>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4b4f      	ldr	r3, [pc, #316]	; (8007c20 <HAL_TIM_ConfigClockSource+0x170>)
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007aee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b40      	cmp	r3, #64	; 0x40
 8007afe:	d067      	beq.n	8007bd0 <HAL_TIM_ConfigClockSource+0x120>
 8007b00:	2b40      	cmp	r3, #64	; 0x40
 8007b02:	d80b      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x6c>
 8007b04:	2b10      	cmp	r3, #16
 8007b06:	d073      	beq.n	8007bf0 <HAL_TIM_ConfigClockSource+0x140>
 8007b08:	2b10      	cmp	r3, #16
 8007b0a:	d802      	bhi.n	8007b12 <HAL_TIM_ConfigClockSource+0x62>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d06f      	beq.n	8007bf0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007b10:	e078      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007b12:	2b20      	cmp	r3, #32
 8007b14:	d06c      	beq.n	8007bf0 <HAL_TIM_ConfigClockSource+0x140>
 8007b16:	2b30      	cmp	r3, #48	; 0x30
 8007b18:	d06a      	beq.n	8007bf0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007b1a:	e073      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007b1c:	2b70      	cmp	r3, #112	; 0x70
 8007b1e:	d00d      	beq.n	8007b3c <HAL_TIM_ConfigClockSource+0x8c>
 8007b20:	2b70      	cmp	r3, #112	; 0x70
 8007b22:	d804      	bhi.n	8007b2e <HAL_TIM_ConfigClockSource+0x7e>
 8007b24:	2b50      	cmp	r3, #80	; 0x50
 8007b26:	d033      	beq.n	8007b90 <HAL_TIM_ConfigClockSource+0xe0>
 8007b28:	2b60      	cmp	r3, #96	; 0x60
 8007b2a:	d041      	beq.n	8007bb0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007b2c:	e06a      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b32:	d066      	beq.n	8007c02 <HAL_TIM_ConfigClockSource+0x152>
 8007b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b38:	d017      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007b3a:	e063      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6818      	ldr	r0, [r3, #0]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	6899      	ldr	r1, [r3, #8]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f000 f9ac 	bl	8007ea8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b5e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	609a      	str	r2, [r3, #8]
      break;
 8007b68:	e04c      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	6899      	ldr	r1, [r3, #8]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f000 f995 	bl	8007ea8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b8c:	609a      	str	r2, [r3, #8]
      break;
 8007b8e:	e039      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6818      	ldr	r0, [r3, #0]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	6859      	ldr	r1, [r3, #4]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	f000 f909 	bl	8007db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2150      	movs	r1, #80	; 0x50
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 f962 	bl	8007e72 <TIM_ITRx_SetConfig>
      break;
 8007bae:	e029      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6818      	ldr	r0, [r3, #0]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	6859      	ldr	r1, [r3, #4]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	f000 f928 	bl	8007e12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2160      	movs	r1, #96	; 0x60
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 f952 	bl	8007e72 <TIM_ITRx_SetConfig>
      break;
 8007bce:	e019      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6818      	ldr	r0, [r3, #0]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	6859      	ldr	r1, [r3, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	f000 f8e9 	bl	8007db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2140      	movs	r1, #64	; 0x40
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 f942 	bl	8007e72 <TIM_ITRx_SetConfig>
      break;
 8007bee:	e009      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	f000 f939 	bl	8007e72 <TIM_ITRx_SetConfig>
      break;
 8007c00:	e000      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007c02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	fffeff88 	.word	0xfffeff88

08007c24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a40      	ldr	r2, [pc, #256]	; (8007d88 <TIM_Base_SetConfig+0x114>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d013      	beq.n	8007cb4 <TIM_Base_SetConfig+0x40>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c92:	d00f      	beq.n	8007cb4 <TIM_Base_SetConfig+0x40>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a3d      	ldr	r2, [pc, #244]	; (8007d8c <TIM_Base_SetConfig+0x118>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d00b      	beq.n	8007cb4 <TIM_Base_SetConfig+0x40>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a3c      	ldr	r2, [pc, #240]	; (8007d90 <TIM_Base_SetConfig+0x11c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d007      	beq.n	8007cb4 <TIM_Base_SetConfig+0x40>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a3b      	ldr	r2, [pc, #236]	; (8007d94 <TIM_Base_SetConfig+0x120>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d003      	beq.n	8007cb4 <TIM_Base_SetConfig+0x40>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a3a      	ldr	r2, [pc, #232]	; (8007d98 <TIM_Base_SetConfig+0x124>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d108      	bne.n	8007cc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a2f      	ldr	r2, [pc, #188]	; (8007d88 <TIM_Base_SetConfig+0x114>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d02b      	beq.n	8007d26 <TIM_Base_SetConfig+0xb2>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd4:	d027      	beq.n	8007d26 <TIM_Base_SetConfig+0xb2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a2c      	ldr	r2, [pc, #176]	; (8007d8c <TIM_Base_SetConfig+0x118>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d023      	beq.n	8007d26 <TIM_Base_SetConfig+0xb2>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a2b      	ldr	r2, [pc, #172]	; (8007d90 <TIM_Base_SetConfig+0x11c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d01f      	beq.n	8007d26 <TIM_Base_SetConfig+0xb2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a2a      	ldr	r2, [pc, #168]	; (8007d94 <TIM_Base_SetConfig+0x120>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d01b      	beq.n	8007d26 <TIM_Base_SetConfig+0xb2>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a29      	ldr	r2, [pc, #164]	; (8007d98 <TIM_Base_SetConfig+0x124>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d017      	beq.n	8007d26 <TIM_Base_SetConfig+0xb2>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a28      	ldr	r2, [pc, #160]	; (8007d9c <TIM_Base_SetConfig+0x128>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d013      	beq.n	8007d26 <TIM_Base_SetConfig+0xb2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a27      	ldr	r2, [pc, #156]	; (8007da0 <TIM_Base_SetConfig+0x12c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d00f      	beq.n	8007d26 <TIM_Base_SetConfig+0xb2>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a26      	ldr	r2, [pc, #152]	; (8007da4 <TIM_Base_SetConfig+0x130>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d00b      	beq.n	8007d26 <TIM_Base_SetConfig+0xb2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a25      	ldr	r2, [pc, #148]	; (8007da8 <TIM_Base_SetConfig+0x134>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d007      	beq.n	8007d26 <TIM_Base_SetConfig+0xb2>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a24      	ldr	r2, [pc, #144]	; (8007dac <TIM_Base_SetConfig+0x138>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d003      	beq.n	8007d26 <TIM_Base_SetConfig+0xb2>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a23      	ldr	r2, [pc, #140]	; (8007db0 <TIM_Base_SetConfig+0x13c>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d108      	bne.n	8007d38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a0a      	ldr	r2, [pc, #40]	; (8007d88 <TIM_Base_SetConfig+0x114>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d003      	beq.n	8007d6c <TIM_Base_SetConfig+0xf8>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a0c      	ldr	r2, [pc, #48]	; (8007d98 <TIM_Base_SetConfig+0x124>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d103      	bne.n	8007d74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	691a      	ldr	r2, [r3, #16]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	615a      	str	r2, [r3, #20]
}
 8007d7a:	bf00      	nop
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	40010000 	.word	0x40010000
 8007d8c:	40000400 	.word	0x40000400
 8007d90:	40000800 	.word	0x40000800
 8007d94:	40000c00 	.word	0x40000c00
 8007d98:	40010400 	.word	0x40010400
 8007d9c:	40014000 	.word	0x40014000
 8007da0:	40014400 	.word	0x40014400
 8007da4:	40014800 	.word	0x40014800
 8007da8:	40001800 	.word	0x40001800
 8007dac:	40001c00 	.word	0x40001c00
 8007db0:	40002000 	.word	0x40002000

08007db4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	f023 0201 	bic.w	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f023 030a 	bic.w	r3, r3, #10
 8007df0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	621a      	str	r2, [r3, #32]
}
 8007e06:	bf00      	nop
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b087      	sub	sp, #28
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	f023 0210 	bic.w	r2, r3, #16
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	031b      	lsls	r3, r3, #12
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	621a      	str	r2, [r3, #32]
}
 8007e66:	bf00      	nop
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	f043 0307 	orr.w	r3, r3, #7
 8007e94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	609a      	str	r2, [r3, #8]
}
 8007e9c:	bf00      	nop
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ec2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	021a      	lsls	r2, r3, #8
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	609a      	str	r2, [r3, #8]
}
 8007edc:	bf00      	nop
 8007ede:	371c      	adds	r7, #28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e045      	b.n	8007f8c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a1c      	ldr	r2, [pc, #112]	; (8007f98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d004      	beq.n	8007f34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a1b      	ldr	r2, [pc, #108]	; (8007f9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d108      	bne.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f5e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	40010000 	.word	0x40010000
 8007f9c:	40010400 	.word	0x40010400

08007fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d027      	beq.n	8008046 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	4b2f      	ldr	r3, [pc, #188]	; (80080bc <FMC_SDRAM_Init+0xe0>)
 8008000:	4013      	ands	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800800c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008012:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008018:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800801e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008024:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800802a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008030:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008036:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4313      	orrs	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	e032      	b.n	80080ac <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008052:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800805c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008062:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	4313      	orrs	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	4b12      	ldr	r3, [pc, #72]	; (80080bc <FMC_SDRAM_Init+0xe0>)
 8008074:	4013      	ands	r3, r2
 8008076:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008080:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008086:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800808c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008092:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008098:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	4313      	orrs	r3, r2
 800809e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	ffff8000 	.word	0xffff8000

080080c0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80080cc:	2300      	movs	r3, #0
 80080ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d02e      	beq.n	8008138 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80080e6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80080f6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008100:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	3b01      	subs	r3, #1
 8008108:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800810a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	3b01      	subs	r3, #1
 8008112:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008114:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	3b01      	subs	r3, #1
 800811c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800811e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	3b01      	subs	r3, #1
 8008126:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008128:	4313      	orrs	r3, r2
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	4313      	orrs	r3, r2
 800812e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	609a      	str	r2, [r3, #8]
 8008136:	e039      	b.n	80081ac <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	4b1e      	ldr	r3, [pc, #120]	; (80081bc <FMC_SDRAM_Timing_Init+0xfc>)
 8008142:	4013      	ands	r3, r2
 8008144:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	3b01      	subs	r3, #1
 800814c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	3b01      	subs	r3, #1
 8008154:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008156:	4313      	orrs	r3, r2
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	4313      	orrs	r3, r2
 800815c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800816a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	3b01      	subs	r3, #1
 8008178:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800817a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	3b01      	subs	r3, #1
 8008182:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008184:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	3b01      	subs	r3, #1
 800818c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800818e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	3b01      	subs	r3, #1
 8008196:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008198:	4313      	orrs	r3, r2
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	371c      	adds	r7, #28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	ff0f0fff 	.word	0xff0f0fff

080081c0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80081d8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	3b01      	subs	r3, #1
 80081e0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80081e2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80081ea:	4313      	orrs	r3, r2
 80081ec:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	371c      	adds	r7, #28
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008202:	b480      	push	{r7}
 8008204:	b083      	sub	sp, #12
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	695a      	ldr	r2, [r3, #20]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	005b      	lsls	r3, r3, #1
 8008214:	431a      	orrs	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <SCB_EnableICache>:
{
 8008228:	b480      	push	{r7}
 800822a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800822c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008230:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008234:	4b0b      	ldr	r3, [pc, #44]	; (8008264 <SCB_EnableICache+0x3c>)
 8008236:	2200      	movs	r2, #0
 8008238:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800823c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008240:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008244:	4b07      	ldr	r3, [pc, #28]	; (8008264 <SCB_EnableICache+0x3c>)
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	4a06      	ldr	r2, [pc, #24]	; (8008264 <SCB_EnableICache+0x3c>)
 800824a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800824e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008250:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008254:	f3bf 8f6f 	isb	sy
}
 8008258:	bf00      	nop
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	e000ed00 	.word	0xe000ed00

08008268 <SCB_EnableDCache>:
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800826e:	4b1d      	ldr	r3, [pc, #116]	; (80082e4 <SCB_EnableDCache+0x7c>)
 8008270:	2200      	movs	r2, #0
 8008272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008276:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800827a:	4b1a      	ldr	r3, [pc, #104]	; (80082e4 <SCB_EnableDCache+0x7c>)
 800827c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008280:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	0b5b      	lsrs	r3, r3, #13
 8008286:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800828a:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	08db      	lsrs	r3, r3, #3
 8008290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008294:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800829e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80082a4:	490f      	ldr	r1, [pc, #60]	; (80082e4 <SCB_EnableDCache+0x7c>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	1e5a      	subs	r2, r3, #1
 80082b0:	60ba      	str	r2, [r7, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1ef      	bne.n	8008296 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	1e5a      	subs	r2, r3, #1
 80082ba:	60fa      	str	r2, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e5      	bne.n	800828c <SCB_EnableDCache+0x24>
 80082c0:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80082c4:	4b07      	ldr	r3, [pc, #28]	; (80082e4 <SCB_EnableDCache+0x7c>)
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	4a06      	ldr	r2, [pc, #24]	; (80082e4 <SCB_EnableDCache+0x7c>)
 80082ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082ce:	6153      	str	r3, [r2, #20]
 80082d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80082d4:	f3bf 8f6f 	isb	sy
}
 80082d8:	bf00      	nop
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	e000ed00 	.word	0xe000ed00

080082e8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a05      	ldr	r2, [pc, #20]	; (800830c <HAL_TIM_PeriodElapsedCallback+0x24>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d102      	bne.n	8008300 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		flagTimer=1;
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80082fc:	2201      	movs	r2, #1
 80082fe:	701a      	strb	r2, [r3, #0]
	}
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	40001000 	.word	0x40001000
 8008310:	200002f4 	.word	0x200002f4

08008314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008314:	b598      	push	{r3, r4, r7, lr}
 8008316:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8008318:	f7ff ff86 	bl	8008228 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800831c:	f7ff ffa4 	bl	8008268 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008320:	f7fa fb14 	bl	800294c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008324:	f000 f842 	bl	80083ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008328:	f000 fbe6 	bl	8008af8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800832c:	f000 f8d8 	bl	80084e0 <MX_ADC1_Init>
  MX_DMA2D_Init();
 8008330:	f000 f92a 	bl	8008588 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8008334:	f000 f960 	bl	80085f8 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8008338:	f000 fb90 	bl	8008a5c <MX_FMC_Init>
  MX_LTDC_Init();
 800833c:	f000 fa50 	bl	80087e0 <MX_LTDC_Init>
  MX_TIM1_Init();
 8008340:	f000 fb00 	bl	8008944 <MX_TIM1_Init>
  MX_TIM6_Init();
 8008344:	f000 fb52 	bl	80089ec <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //Inicializaçãoo dos LEDS e USER BUTTON
  BSP_LED_Init(LED_GREEN);
 8008348:	2001      	movs	r0, #1
 800834a:	f7f8 fcd7 	bl	8000cfc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800834e:	2000      	movs	r0, #0
 8008350:	f7f8 fcd4 	bl	8000cfc <BSP_LED_Init>
  BSP_PB_Init(BUTTON_WAKEUP,BUTTON_MODE_GPIO);
 8008354:	2100      	movs	r1, #0
 8008356:	2000      	movs	r0, #0
 8008358:	f7f8 fd1a 	bl	8000d90 <BSP_PB_Init>

  //Inicialização do LCD e Touch Sensor
  LCD_Config();
 800835c:	f000 fc6e 	bl	8008c3c <LCD_Config>
  BSP_TS_Init(BSP_LCD_GetXSize(),BSP_LCD_GetYSize());
 8008360:	f7f9 f8be 	bl	80014e0 <BSP_LCD_GetXSize>
 8008364:	4603      	mov	r3, r0
 8008366:	b29c      	uxth	r4, r3
 8008368:	f7f9 f8c6 	bl	80014f8 <BSP_LCD_GetYSize>
 800836c:	4603      	mov	r3, r0
 800836e:	b29b      	uxth	r3, r3
 8008370:	4619      	mov	r1, r3
 8008372:	4620      	mov	r0, r4
 8008374:	f7fa f90e 	bl	8002594 <BSP_TS_Init>
  BSP_TS_ITConfig();
 8008378:	f7fa f96c 	bl	8002654 <BSP_TS_ITConfig>

  //Inicialização do ADC1
  HAL_ADC_Start_IT(&hadc1);
 800837c:	4808      	ldr	r0, [pc, #32]	; (80083a0 <main+0x8c>)
 800837e:	f7fa fba9 	bl	8002ad4 <HAL_ADC_Start_IT>

  //Inicialização dos Timer 6
  HAL_TIM_Base_Start_IT(&htim6);
 8008382:	4808      	ldr	r0, [pc, #32]	; (80083a4 <main+0x90>)
 8008384:	f7ff fa4a 	bl	800781c <HAL_TIM_Base_Start_IT>



  displayGame();
 8008388:	f000 fc72 	bl	8008c70 <displayGame>
  jogador=1;
 800838c:	4b06      	ldr	r3, [pc, #24]	; (80083a8 <main+0x94>)
 800838e:	2201      	movs	r2, #1
 8008390:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  displayTemperature();
 8008392:	f000 fd93 	bl	8008ebc <displayTemperature>


	  //jogo();

	  detectBoardTouch(&jogador);
 8008396:	4804      	ldr	r0, [pc, #16]	; (80083a8 <main+0x94>)
 8008398:	f000 fdf0 	bl	8008f7c <detectBoardTouch>
	  displayTemperature();
 800839c:	e7f9      	b.n	8008392 <main+0x7e>
 800839e:	bf00      	nop
 80083a0:	20000628 	.word	0x20000628
 80083a4:	20000674 	.word	0x20000674
 80083a8:	200006f4 	.word	0x200006f4

080083ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b0b8      	sub	sp, #224	; 0xe0
 80083b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80083b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80083b6:	2234      	movs	r2, #52	; 0x34
 80083b8:	2100      	movs	r1, #0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f001 f970 	bl	80096a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80083c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80083c4:	2200      	movs	r2, #0
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	605a      	str	r2, [r3, #4]
 80083ca:	609a      	str	r2, [r3, #8]
 80083cc:	60da      	str	r2, [r3, #12]
 80083ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80083d0:	f107 0308 	add.w	r3, r7, #8
 80083d4:	2290      	movs	r2, #144	; 0x90
 80083d6:	2100      	movs	r1, #0
 80083d8:	4618      	mov	r0, r3
 80083da:	f001 f961 	bl	80096a0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80083de:	4b3e      	ldr	r3, [pc, #248]	; (80084d8 <SystemClock_Config+0x12c>)
 80083e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e2:	4a3d      	ldr	r2, [pc, #244]	; (80084d8 <SystemClock_Config+0x12c>)
 80083e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083e8:	6413      	str	r3, [r2, #64]	; 0x40
 80083ea:	4b3b      	ldr	r3, [pc, #236]	; (80084d8 <SystemClock_Config+0x12c>)
 80083ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083f2:	607b      	str	r3, [r7, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80083f6:	4b39      	ldr	r3, [pc, #228]	; (80084dc <SystemClock_Config+0x130>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a38      	ldr	r2, [pc, #224]	; (80084dc <SystemClock_Config+0x130>)
 80083fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	4b36      	ldr	r3, [pc, #216]	; (80084dc <SystemClock_Config+0x130>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800840a:	603b      	str	r3, [r7, #0]
 800840c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800840e:	2301      	movs	r3, #1
 8008410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800841c:	2302      	movs	r3, #2
 800841e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008422:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008426:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800842a:	2319      	movs	r3, #25
 800842c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 8008430:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008438:	2302      	movs	r3, #2
 800843a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800843e:	2302      	movs	r3, #2
 8008440:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008444:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008448:	4618      	mov	r0, r3
 800844a:	f7fe f90b 	bl	8006664 <HAL_RCC_OscConfig>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8008454:	f000 fe48 	bl	80090e8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008458:	f7fe f8b4 	bl	80065c4 <HAL_PWREx_EnableOverDrive>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8008462:	f000 fe41 	bl	80090e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008466:	230f      	movs	r3, #15
 8008468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800846c:	2302      	movs	r3, #2
 800846e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008472:	2300      	movs	r3, #0
 8008474:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008478:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800847c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008484:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8008488:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800848c:	2106      	movs	r1, #6
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe fb5a 	bl	8006b48 <HAL_RCC_ClockConfig>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800849a:	f000 fe25 	bl	80090e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800849e:	2308      	movs	r3, #8
 80084a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 196;
 80084a2:	23c4      	movs	r3, #196	; 0xc4
 80084a4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80084a6:	2302      	movs	r3, #2
 80084a8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80084aa:	2302      	movs	r3, #2
 80084ac:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80084ae:	2300      	movs	r3, #0
 80084b0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80084b2:	2301      	movs	r3, #1
 80084b4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80084b6:	2300      	movs	r3, #0
 80084b8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80084ba:	f107 0308 	add.w	r3, r7, #8
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fe fcdc 	bl	8006e7c <HAL_RCCEx_PeriphCLKConfig>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <SystemClock_Config+0x122>
  {
    Error_Handler();
 80084ca:	f000 fe0d 	bl	80090e8 <Error_Handler>
  }
}
 80084ce:	bf00      	nop
 80084d0:	37e0      	adds	r7, #224	; 0xe0
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	40023800 	.word	0x40023800
 80084dc:	40007000 	.word	0x40007000

080084e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80084e6:	463b      	mov	r3, r7
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	605a      	str	r2, [r3, #4]
 80084ee:	609a      	str	r2, [r3, #8]
 80084f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80084f2:	4b21      	ldr	r3, [pc, #132]	; (8008578 <MX_ADC1_Init+0x98>)
 80084f4:	4a21      	ldr	r2, [pc, #132]	; (800857c <MX_ADC1_Init+0x9c>)
 80084f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80084f8:	4b1f      	ldr	r3, [pc, #124]	; (8008578 <MX_ADC1_Init+0x98>)
 80084fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80084fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008500:	4b1d      	ldr	r3, [pc, #116]	; (8008578 <MX_ADC1_Init+0x98>)
 8008502:	2200      	movs	r2, #0
 8008504:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008506:	4b1c      	ldr	r3, [pc, #112]	; (8008578 <MX_ADC1_Init+0x98>)
 8008508:	2200      	movs	r2, #0
 800850a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800850c:	4b1a      	ldr	r3, [pc, #104]	; (8008578 <MX_ADC1_Init+0x98>)
 800850e:	2200      	movs	r2, #0
 8008510:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008512:	4b19      	ldr	r3, [pc, #100]	; (8008578 <MX_ADC1_Init+0x98>)
 8008514:	2200      	movs	r2, #0
 8008516:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800851a:	4b17      	ldr	r3, [pc, #92]	; (8008578 <MX_ADC1_Init+0x98>)
 800851c:	2200      	movs	r2, #0
 800851e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008520:	4b15      	ldr	r3, [pc, #84]	; (8008578 <MX_ADC1_Init+0x98>)
 8008522:	4a17      	ldr	r2, [pc, #92]	; (8008580 <MX_ADC1_Init+0xa0>)
 8008524:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008526:	4b14      	ldr	r3, [pc, #80]	; (8008578 <MX_ADC1_Init+0x98>)
 8008528:	2200      	movs	r2, #0
 800852a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800852c:	4b12      	ldr	r3, [pc, #72]	; (8008578 <MX_ADC1_Init+0x98>)
 800852e:	2201      	movs	r2, #1
 8008530:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008532:	4b11      	ldr	r3, [pc, #68]	; (8008578 <MX_ADC1_Init+0x98>)
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800853a:	4b0f      	ldr	r3, [pc, #60]	; (8008578 <MX_ADC1_Init+0x98>)
 800853c:	2201      	movs	r2, #1
 800853e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008540:	480d      	ldr	r0, [pc, #52]	; (8008578 <MX_ADC1_Init+0x98>)
 8008542:	f7fa fa83 	bl	8002a4c <HAL_ADC_Init>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800854c:	f000 fdcc 	bl	80090e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008550:	4b0c      	ldr	r3, [pc, #48]	; (8008584 <MX_ADC1_Init+0xa4>)
 8008552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008554:	2301      	movs	r3, #1
 8008556:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8008558:	2300      	movs	r3, #0
 800855a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800855c:	463b      	mov	r3, r7
 800855e:	4619      	mov	r1, r3
 8008560:	4805      	ldr	r0, [pc, #20]	; (8008578 <MX_ADC1_Init+0x98>)
 8008562:	f7fa fced 	bl	8002f40 <HAL_ADC_ConfigChannel>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800856c:	f000 fdbc 	bl	80090e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008570:	bf00      	nop
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	20000628 	.word	0x20000628
 800857c:	40012000 	.word	0x40012000
 8008580:	0f000001 	.word	0x0f000001
 8008584:	10000012 	.word	0x10000012

08008588 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800858c:	4b18      	ldr	r3, [pc, #96]	; (80085f0 <MX_DMA2D_Init+0x68>)
 800858e:	4a19      	ldr	r2, [pc, #100]	; (80085f4 <MX_DMA2D_Init+0x6c>)
 8008590:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8008592:	4b17      	ldr	r3, [pc, #92]	; (80085f0 <MX_DMA2D_Init+0x68>)
 8008594:	2200      	movs	r2, #0
 8008596:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8008598:	4b15      	ldr	r3, [pc, #84]	; (80085f0 <MX_DMA2D_Init+0x68>)
 800859a:	2200      	movs	r2, #0
 800859c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800859e:	4b14      	ldr	r3, [pc, #80]	; (80085f0 <MX_DMA2D_Init+0x68>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80085a4:	4b12      	ldr	r3, [pc, #72]	; (80085f0 <MX_DMA2D_Init+0x68>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80085aa:	4b11      	ldr	r3, [pc, #68]	; (80085f0 <MX_DMA2D_Init+0x68>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80085b0:	4b0f      	ldr	r3, [pc, #60]	; (80085f0 <MX_DMA2D_Init+0x68>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80085b6:	4b0e      	ldr	r3, [pc, #56]	; (80085f0 <MX_DMA2D_Init+0x68>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80085bc:	4b0c      	ldr	r3, [pc, #48]	; (80085f0 <MX_DMA2D_Init+0x68>)
 80085be:	2200      	movs	r2, #0
 80085c0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80085c2:	4b0b      	ldr	r3, [pc, #44]	; (80085f0 <MX_DMA2D_Init+0x68>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80085c8:	4809      	ldr	r0, [pc, #36]	; (80085f0 <MX_DMA2D_Init+0x68>)
 80085ca:	f7fb f9bf 	bl	800394c <HAL_DMA2D_Init>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 80085d4:	f000 fd88 	bl	80090e8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80085d8:	2101      	movs	r1, #1
 80085da:	4805      	ldr	r0, [pc, #20]	; (80085f0 <MX_DMA2D_Init+0x68>)
 80085dc:	f7fb fb24 	bl	8003c28 <HAL_DMA2D_ConfigLayer>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 80085e6:	f000 fd7f 	bl	80090e8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80085ea:	bf00      	nop
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	200006f8 	.word	0x200006f8
 80085f4:	4002b000 	.word	0x4002b000

080085f8 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b0aa      	sub	sp, #168	; 0xa8
 80085fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80085fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	605a      	str	r2, [r3, #4]
 8008608:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800860a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800860e:	2224      	movs	r2, #36	; 0x24
 8008610:	2100      	movs	r1, #0
 8008612:	4618      	mov	r0, r3
 8008614:	f001 f844 	bl	80096a0 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8008618:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800861c:	2200      	movs	r2, #0
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	605a      	str	r2, [r3, #4]
 8008622:	609a      	str	r2, [r3, #8]
 8008624:	60da      	str	r2, [r3, #12]
 8008626:	611a      	str	r2, [r3, #16]
 8008628:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800862a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800862e:	2234      	movs	r2, #52	; 0x34
 8008630:	2100      	movs	r1, #0
 8008632:	4618      	mov	r0, r3
 8008634:	f001 f834 	bl	80096a0 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8008638:	463b      	mov	r3, r7
 800863a:	222c      	movs	r2, #44	; 0x2c
 800863c:	2100      	movs	r1, #0
 800863e:	4618      	mov	r0, r3
 8008640:	f001 f82e 	bl	80096a0 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8008644:	4b64      	ldr	r3, [pc, #400]	; (80087d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008646:	4a65      	ldr	r2, [pc, #404]	; (80087dc <MX_DSIHOST_DSI_Init+0x1e4>)
 8008648:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800864a:	4b63      	ldr	r3, [pc, #396]	; (80087d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800864c:	2200      	movs	r2, #0
 800864e:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8008650:	4b61      	ldr	r3, [pc, #388]	; (80087d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008652:	2204      	movs	r2, #4
 8008654:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8008656:	4b60      	ldr	r3, [pc, #384]	; (80087d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008658:	2200      	movs	r2, #0
 800865a:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 800865c:	2314      	movs	r3, #20
 800865e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8008662:	2301      	movs	r3, #1
 8008664:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8008668:	2300      	movs	r3, #0
 800866a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800866e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008672:	4619      	mov	r1, r3
 8008674:	4858      	ldr	r0, [pc, #352]	; (80087d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008676:	f7fb fc59 	bl	8003f2c <HAL_DSI_Init>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8008680:	f000 fd32 	bl	80090e8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8008684:	2301      	movs	r3, #1
 8008686:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8008688:	2300      	movs	r3, #0
 800868a:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800868c:	2300      	movs	r3, #0
 800868e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8008692:	2300      	movs	r3, #0
 8008694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80086a4:	2300      	movs	r3, #0
 80086a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80086b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80086ba:	4619      	mov	r1, r3
 80086bc:	4846      	ldr	r0, [pc, #280]	; (80087d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 80086be:	f7fc fa71 	bl	8004ba4 <HAL_DSI_ConfigHostTimeouts>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 80086c8:	f000 fd0e 	bl	80090e8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80086cc:	231c      	movs	r3, #28
 80086ce:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 80086d0:	2321      	movs	r3, #33	; 0x21
 80086d2:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 80086d4:	230f      	movs	r3, #15
 80086d6:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 80086d8:	2319      	movs	r3, #25
 80086da:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80086dc:	2300      	movs	r3, #0
 80086de:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 80086e0:	2300      	movs	r3, #0
 80086e2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80086e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80086e8:	4619      	mov	r1, r3
 80086ea:	483b      	ldr	r0, [pc, #236]	; (80087d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 80086ec:	f7fc f9f0 	bl	8004ad0 <HAL_DSI_ConfigPhyTimer>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d001      	beq.n	80086fa <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 80086f6:	f000 fcf7 	bl	80090e8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80086fa:	2104      	movs	r1, #4
 80086fc:	4836      	ldr	r0, [pc, #216]	; (80087d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 80086fe:	f7fc f9bf 	bl	8004a80 <HAL_DSI_ConfigFlowControl>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8008708:	f000 fcee 	bl	80090e8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800870c:	f242 7110 	movw	r1, #10000	; 0x2710
 8008710:	4831      	ldr	r0, [pc, #196]	; (80087d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008712:	f7fc fc05 	bl	8004f20 <HAL_DSI_SetLowPowerRXFilter>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 800871c:	f000 fce4 	bl	80090e8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8008720:	2100      	movs	r1, #0
 8008722:	482d      	ldr	r0, [pc, #180]	; (80087d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008724:	f7fb fd90 	bl	8004248 <HAL_DSI_ConfigErrorMonitor>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800872e:	f000 fcdb 	bl	80090e8 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8008732:	2300      	movs	r3, #0
 8008734:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8008736:	2300      	movs	r3, #0
 8008738:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 800873a:	2300      	movs	r3, #0
 800873c:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800873e:	2300      	movs	r3, #0
 8008740:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8008742:	2300      	movs	r3, #0
 8008744:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8008746:	2300      	movs	r3, #0
 8008748:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 800874a:	2300      	movs	r3, #0
 800874c:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 800874e:	2300      	movs	r3, #0
 8008750:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8008752:	2300      	movs	r3, #0
 8008754:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8008756:	2300      	movs	r3, #0
 8008758:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800875a:	2300      	movs	r3, #0
 800875c:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 800875e:	2300      	movs	r3, #0
 8008760:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8008762:	2300      	movs	r3, #0
 8008764:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8008766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800876a:	4619      	mov	r1, r3
 800876c:	481a      	ldr	r0, [pc, #104]	; (80087d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800876e:	f7fc f929 	bl	80049c4 <HAL_DSI_ConfigCommand>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 8008778:	f000 fcb6 	bl	80090e8 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8008780:	2305      	movs	r3, #5
 8008782:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 8008784:	f44f 7320 	mov.w	r3, #640	; 0x280
 8008788:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800878a:	2310      	movs	r3, #16
 800878c:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800878e:	2300      	movs	r3, #0
 8008790:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8008792:	2304      	movs	r3, #4
 8008794:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8008796:	2302      	movs	r3, #2
 8008798:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800879a:	2300      	movs	r3, #0
 800879c:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800879e:	2300      	movs	r3, #0
 80087a0:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 80087a2:	2340      	movs	r3, #64	; 0x40
 80087a4:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 80087a6:	2300      	movs	r3, #0
 80087a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80087aa:	463b      	mov	r3, r7
 80087ac:	4619      	mov	r1, r3
 80087ae:	480a      	ldr	r0, [pc, #40]	; (80087d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 80087b0:	f7fc f82e 	bl	8004810 <HAL_DSI_ConfigAdaptedCommandMode>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 80087ba:	f000 fc95 	bl	80090e8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80087be:	2100      	movs	r1, #0
 80087c0:	4805      	ldr	r0, [pc, #20]	; (80087d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 80087c2:	f7fb fdfd 	bl	80043c0 <HAL_DSI_SetGenericVCID>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d001      	beq.n	80087d0 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 80087cc:	f000 fc8c 	bl	80090e8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 80087d0:	bf00      	nop
 80087d2:	37a8      	adds	r7, #168	; 0xa8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	20000560 	.word	0x20000560
 80087dc:	40016c00 	.word	0x40016c00

080087e0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b09a      	sub	sp, #104	; 0x68
 80087e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80087e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80087ea:	2234      	movs	r2, #52	; 0x34
 80087ec:	2100      	movs	r1, #0
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 ff56 	bl	80096a0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80087f4:	463b      	mov	r3, r7
 80087f6:	2234      	movs	r2, #52	; 0x34
 80087f8:	2100      	movs	r1, #0
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 ff50 	bl	80096a0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8008800:	4b4e      	ldr	r3, [pc, #312]	; (800893c <MX_LTDC_Init+0x15c>)
 8008802:	4a4f      	ldr	r2, [pc, #316]	; (8008940 <MX_LTDC_Init+0x160>)
 8008804:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8008806:	4b4d      	ldr	r3, [pc, #308]	; (800893c <MX_LTDC_Init+0x15c>)
 8008808:	2200      	movs	r2, #0
 800880a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800880c:	4b4b      	ldr	r3, [pc, #300]	; (800893c <MX_LTDC_Init+0x15c>)
 800880e:	2200      	movs	r2, #0
 8008810:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8008812:	4b4a      	ldr	r3, [pc, #296]	; (800893c <MX_LTDC_Init+0x15c>)
 8008814:	2200      	movs	r2, #0
 8008816:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8008818:	4b48      	ldr	r3, [pc, #288]	; (800893c <MX_LTDC_Init+0x15c>)
 800881a:	2200      	movs	r2, #0
 800881c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800881e:	4b47      	ldr	r3, [pc, #284]	; (800893c <MX_LTDC_Init+0x15c>)
 8008820:	2207      	movs	r2, #7
 8008822:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8008824:	4b45      	ldr	r3, [pc, #276]	; (800893c <MX_LTDC_Init+0x15c>)
 8008826:	2203      	movs	r2, #3
 8008828:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800882a:	4b44      	ldr	r3, [pc, #272]	; (800893c <MX_LTDC_Init+0x15c>)
 800882c:	220e      	movs	r2, #14
 800882e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8008830:	4b42      	ldr	r3, [pc, #264]	; (800893c <MX_LTDC_Init+0x15c>)
 8008832:	2205      	movs	r2, #5
 8008834:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8008836:	4b41      	ldr	r3, [pc, #260]	; (800893c <MX_LTDC_Init+0x15c>)
 8008838:	f240 228e 	movw	r2, #654	; 0x28e
 800883c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800883e:	4b3f      	ldr	r3, [pc, #252]	; (800893c <MX_LTDC_Init+0x15c>)
 8008840:	f240 12e5 	movw	r2, #485	; 0x1e5
 8008844:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8008846:	4b3d      	ldr	r3, [pc, #244]	; (800893c <MX_LTDC_Init+0x15c>)
 8008848:	f44f 7225 	mov.w	r2, #660	; 0x294
 800884c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800884e:	4b3b      	ldr	r3, [pc, #236]	; (800893c <MX_LTDC_Init+0x15c>)
 8008850:	f240 12e7 	movw	r2, #487	; 0x1e7
 8008854:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8008856:	4b39      	ldr	r3, [pc, #228]	; (800893c <MX_LTDC_Init+0x15c>)
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800885e:	4b37      	ldr	r3, [pc, #220]	; (800893c <MX_LTDC_Init+0x15c>)
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8008866:	4b35      	ldr	r3, [pc, #212]	; (800893c <MX_LTDC_Init+0x15c>)
 8008868:	2200      	movs	r2, #0
 800886a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800886e:	4833      	ldr	r0, [pc, #204]	; (800893c <MX_LTDC_Init+0x15c>)
 8008870:	f7fd fbb0 	bl	8005fd4 <HAL_LTDC_Init>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800887a:	f000 fc35 	bl	80090e8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8008882:	2300      	movs	r3, #0
 8008884:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800888e:	2300      	movs	r3, #0
 8008890:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8008892:	2300      	movs	r3, #0
 8008894:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800889a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800889e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80088a0:	2305      	movs	r3, #5
 80088a2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80088c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80088c6:	2200      	movs	r2, #0
 80088c8:	4619      	mov	r1, r3
 80088ca:	481c      	ldr	r0, [pc, #112]	; (800893c <MX_LTDC_Init+0x15c>)
 80088cc:	f7fd fc52 	bl	8006174 <HAL_LTDC_ConfigLayer>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80088d6:	f000 fc07 	bl	80090e8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80088ea:	2300      	movs	r3, #0
 80088ec:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80088ee:	2300      	movs	r3, #0
 80088f0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80088f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088fa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80088fc:	2305      	movs	r3, #5
 80088fe:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8008908:	2300      	movs	r3, #0
 800890a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800890c:	2300      	movs	r3, #0
 800890e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800891e:	463b      	mov	r3, r7
 8008920:	2201      	movs	r2, #1
 8008922:	4619      	mov	r1, r3
 8008924:	4805      	ldr	r0, [pc, #20]	; (800893c <MX_LTDC_Init+0x15c>)
 8008926:	f7fd fc25 	bl	8006174 <HAL_LTDC_ConfigLayer>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8008930:	f000 fbda 	bl	80090e8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8008934:	bf00      	nop
 8008936:	3768      	adds	r7, #104	; 0x68
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	20000580 	.word	0x20000580
 8008940:	40016800 	.word	0x40016800

08008944 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800894a:	f107 0310 	add.w	r3, r7, #16
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
 8008952:	605a      	str	r2, [r3, #4]
 8008954:	609a      	str	r2, [r3, #8]
 8008956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008958:	1d3b      	adds	r3, r7, #4
 800895a:	2200      	movs	r2, #0
 800895c:	601a      	str	r2, [r3, #0]
 800895e:	605a      	str	r2, [r3, #4]
 8008960:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008962:	4b20      	ldr	r3, [pc, #128]	; (80089e4 <MX_TIM1_Init+0xa0>)
 8008964:	4a20      	ldr	r2, [pc, #128]	; (80089e8 <MX_TIM1_Init+0xa4>)
 8008966:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008968:	4b1e      	ldr	r3, [pc, #120]	; (80089e4 <MX_TIM1_Init+0xa0>)
 800896a:	2200      	movs	r2, #0
 800896c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800896e:	4b1d      	ldr	r3, [pc, #116]	; (80089e4 <MX_TIM1_Init+0xa0>)
 8008970:	2210      	movs	r2, #16
 8008972:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8008974:	4b1b      	ldr	r3, [pc, #108]	; (80089e4 <MX_TIM1_Init+0xa0>)
 8008976:	f242 720f 	movw	r2, #9999	; 0x270f
 800897a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800897c:	4b19      	ldr	r3, [pc, #100]	; (80089e4 <MX_TIM1_Init+0xa0>)
 800897e:	2200      	movs	r2, #0
 8008980:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008982:	4b18      	ldr	r3, [pc, #96]	; (80089e4 <MX_TIM1_Init+0xa0>)
 8008984:	2200      	movs	r2, #0
 8008986:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008988:	4b16      	ldr	r3, [pc, #88]	; (80089e4 <MX_TIM1_Init+0xa0>)
 800898a:	2200      	movs	r2, #0
 800898c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800898e:	4815      	ldr	r0, [pc, #84]	; (80089e4 <MX_TIM1_Init+0xa0>)
 8008990:	f7fe ff19 	bl	80077c6 <HAL_TIM_Base_Init>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800899a:	f000 fba5 	bl	80090e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800899e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80089a4:	f107 0310 	add.w	r3, r7, #16
 80089a8:	4619      	mov	r1, r3
 80089aa:	480e      	ldr	r0, [pc, #56]	; (80089e4 <MX_TIM1_Init+0xa0>)
 80089ac:	f7ff f880 	bl	8007ab0 <HAL_TIM_ConfigClockSource>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80089b6:	f000 fb97 	bl	80090e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80089ba:	2300      	movs	r3, #0
 80089bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80089be:	2300      	movs	r3, #0
 80089c0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80089c2:	2300      	movs	r3, #0
 80089c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80089c6:	1d3b      	adds	r3, r7, #4
 80089c8:	4619      	mov	r1, r3
 80089ca:	4806      	ldr	r0, [pc, #24]	; (80089e4 <MX_TIM1_Init+0xa0>)
 80089cc:	f7ff fa8c 	bl	8007ee8 <HAL_TIMEx_MasterConfigSynchronization>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80089d6:	f000 fb87 	bl	80090e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80089da:	bf00      	nop
 80089dc:	3720      	adds	r7, #32
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	200006b4 	.word	0x200006b4
 80089e8:	40010000 	.word	0x40010000

080089ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80089f2:	1d3b      	adds	r3, r7, #4
 80089f4:	2200      	movs	r2, #0
 80089f6:	601a      	str	r2, [r3, #0]
 80089f8:	605a      	str	r2, [r3, #4]
 80089fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80089fc:	4b15      	ldr	r3, [pc, #84]	; (8008a54 <MX_TIM6_Init+0x68>)
 80089fe:	4a16      	ldr	r2, [pc, #88]	; (8008a58 <MX_TIM6_Init+0x6c>)
 8008a00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8008a02:	4b14      	ldr	r3, [pc, #80]	; (8008a54 <MX_TIM6_Init+0x68>)
 8008a04:	f242 720f 	movw	r2, #9999	; 0x270f
 8008a08:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a0a:	4b12      	ldr	r3, [pc, #72]	; (8008a54 <MX_TIM6_Init+0x68>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8008a10:	4b10      	ldr	r3, [pc, #64]	; (8008a54 <MX_TIM6_Init+0x68>)
 8008a12:	f242 720f 	movw	r2, #9999	; 0x270f
 8008a16:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a18:	4b0e      	ldr	r3, [pc, #56]	; (8008a54 <MX_TIM6_Init+0x68>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008a1e:	480d      	ldr	r0, [pc, #52]	; (8008a54 <MX_TIM6_Init+0x68>)
 8008a20:	f7fe fed1 	bl	80077c6 <HAL_TIM_Base_Init>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d001      	beq.n	8008a2e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8008a2a:	f000 fb5d 	bl	80090e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008a36:	1d3b      	adds	r3, r7, #4
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4806      	ldr	r0, [pc, #24]	; (8008a54 <MX_TIM6_Init+0x68>)
 8008a3c:	f7ff fa54 	bl	8007ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8008a46:	f000 fb4f 	bl	80090e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8008a4a:	bf00      	nop
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20000674 	.word	0x20000674
 8008a58:	40001000 	.word	0x40001000

08008a5c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b088      	sub	sp, #32
 8008a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8008a62:	1d3b      	adds	r3, r7, #4
 8008a64:	2200      	movs	r2, #0
 8008a66:	601a      	str	r2, [r3, #0]
 8008a68:	605a      	str	r2, [r3, #4]
 8008a6a:	609a      	str	r2, [r3, #8]
 8008a6c:	60da      	str	r2, [r3, #12]
 8008a6e:	611a      	str	r2, [r3, #16]
 8008a70:	615a      	str	r2, [r3, #20]
 8008a72:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8008a74:	4b1e      	ldr	r3, [pc, #120]	; (8008af0 <MX_FMC_Init+0x94>)
 8008a76:	4a1f      	ldr	r2, [pc, #124]	; (8008af4 <MX_FMC_Init+0x98>)
 8008a78:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8008a7a:	4b1d      	ldr	r3, [pc, #116]	; (8008af0 <MX_FMC_Init+0x94>)
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8008a80:	4b1b      	ldr	r3, [pc, #108]	; (8008af0 <MX_FMC_Init+0x94>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8008a86:	4b1a      	ldr	r3, [pc, #104]	; (8008af0 <MX_FMC_Init+0x94>)
 8008a88:	2208      	movs	r2, #8
 8008a8a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8008a8c:	4b18      	ldr	r3, [pc, #96]	; (8008af0 <MX_FMC_Init+0x94>)
 8008a8e:	2220      	movs	r2, #32
 8008a90:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008a92:	4b17      	ldr	r3, [pc, #92]	; (8008af0 <MX_FMC_Init+0x94>)
 8008a94:	2240      	movs	r2, #64	; 0x40
 8008a96:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8008a98:	4b15      	ldr	r3, [pc, #84]	; (8008af0 <MX_FMC_Init+0x94>)
 8008a9a:	2280      	movs	r2, #128	; 0x80
 8008a9c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008a9e:	4b14      	ldr	r3, [pc, #80]	; (8008af0 <MX_FMC_Init+0x94>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8008aa4:	4b12      	ldr	r3, [pc, #72]	; (8008af0 <MX_FMC_Init+0x94>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8008aaa:	4b11      	ldr	r3, [pc, #68]	; (8008af0 <MX_FMC_Init+0x94>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8008ab0:	4b0f      	ldr	r3, [pc, #60]	; (8008af0 <MX_FMC_Init+0x94>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8008ab6:	2310      	movs	r3, #16
 8008ab8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8008aba:	2310      	movs	r3, #16
 8008abc:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8008abe:	2310      	movs	r3, #16
 8008ac0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8008ac2:	2310      	movs	r3, #16
 8008ac4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8008ac6:	2310      	movs	r3, #16
 8008ac8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8008aca:	2310      	movs	r3, #16
 8008acc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8008ace:	2310      	movs	r3, #16
 8008ad0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8008ad2:	1d3b      	adds	r3, r7, #4
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	4806      	ldr	r0, [pc, #24]	; (8008af0 <MX_FMC_Init+0x94>)
 8008ad8:	f7fe fdf6 	bl	80076c8 <HAL_SDRAM_Init>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8008ae2:	f000 fb01 	bl	80090e8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8008ae6:	bf00      	nop
 8008ae8:	3720      	adds	r7, #32
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	2000075c 	.word	0x2000075c
 8008af4:	a0000140 	.word	0xa0000140

08008af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b08e      	sub	sp, #56	; 0x38
 8008afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	605a      	str	r2, [r3, #4]
 8008b08:	609a      	str	r2, [r3, #8]
 8008b0a:	60da      	str	r2, [r3, #12]
 8008b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008b0e:	4b3c      	ldr	r3, [pc, #240]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b12:	4a3b      	ldr	r2, [pc, #236]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b14:	f043 0310 	orr.w	r3, r3, #16
 8008b18:	6313      	str	r3, [r2, #48]	; 0x30
 8008b1a:	4b39      	ldr	r3, [pc, #228]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1e:	f003 0310 	and.w	r3, r3, #16
 8008b22:	623b      	str	r3, [r7, #32]
 8008b24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b26:	4b36      	ldr	r3, [pc, #216]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2a:	4a35      	ldr	r2, [pc, #212]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b2c:	f043 0302 	orr.w	r3, r3, #2
 8008b30:	6313      	str	r3, [r2, #48]	; 0x30
 8008b32:	4b33      	ldr	r3, [pc, #204]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	61fb      	str	r3, [r7, #28]
 8008b3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008b3e:	4b30      	ldr	r3, [pc, #192]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b42:	4a2f      	ldr	r2, [pc, #188]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b48:	6313      	str	r3, [r2, #48]	; 0x30
 8008b4a:	4b2d      	ldr	r3, [pc, #180]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b52:	61bb      	str	r3, [r7, #24]
 8008b54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008b56:	4b2a      	ldr	r3, [pc, #168]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b5a:	4a29      	ldr	r2, [pc, #164]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b5c:	f043 0308 	orr.w	r3, r3, #8
 8008b60:	6313      	str	r3, [r2, #48]	; 0x30
 8008b62:	4b27      	ldr	r3, [pc, #156]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b66:	f003 0308 	and.w	r3, r3, #8
 8008b6a:	617b      	str	r3, [r7, #20]
 8008b6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008b6e:	4b24      	ldr	r3, [pc, #144]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b72:	4a23      	ldr	r2, [pc, #140]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b78:	6313      	str	r3, [r2, #48]	; 0x30
 8008b7a:	4b21      	ldr	r3, [pc, #132]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b82:	613b      	str	r3, [r7, #16]
 8008b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008b86:	4b1e      	ldr	r3, [pc, #120]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8a:	4a1d      	ldr	r2, [pc, #116]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b8c:	f043 0320 	orr.w	r3, r3, #32
 8008b90:	6313      	str	r3, [r2, #48]	; 0x30
 8008b92:	4b1b      	ldr	r3, [pc, #108]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b96:	f003 0320 	and.w	r3, r3, #32
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008b9e:	4b18      	ldr	r3, [pc, #96]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba2:	4a17      	ldr	r2, [pc, #92]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8008baa:	4b15      	ldr	r3, [pc, #84]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb2:	60bb      	str	r3, [r7, #8]
 8008bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008bb6:	4b12      	ldr	r3, [pc, #72]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bba:	4a11      	ldr	r2, [pc, #68]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8008bc2:	4b0f      	ldr	r3, [pc, #60]	; (8008c00 <MX_GPIO_Init+0x108>)
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bca:	607b      	str	r3, [r7, #4]
 8008bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008bd4:	4b0b      	ldr	r3, [pc, #44]	; (8008c04 <MX_GPIO_Init+0x10c>)
 8008bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008be0:	4619      	mov	r1, r3
 8008be2:	4809      	ldr	r0, [pc, #36]	; (8008c08 <MX_GPIO_Init+0x110>)
 8008be4:	f7fc f9ca 	bl	8004f7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008be8:	2200      	movs	r2, #0
 8008bea:	2100      	movs	r1, #0
 8008bec:	2028      	movs	r0, #40	; 0x28
 8008bee:	f7fa fcba 	bl	8003566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008bf2:	2028      	movs	r0, #40	; 0x28
 8008bf4:	f7fa fcd3 	bl	800359e <HAL_NVIC_EnableIRQ>

}
 8008bf8:	bf00      	nop
 8008bfa:	3738      	adds	r7, #56	; 0x38
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	40023800 	.word	0x40023800
 8008c04:	10110000 	.word	0x10110000
 8008c08:	40022000 	.word	0x40022000

08008c0c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8008c16:	88fb      	ldrh	r3, [r7, #6]
 8008c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c1c:	d105      	bne.n	8008c2a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		//HAL_Delay(100);
		touchScreenFlag=1;
 8008c1e:	4b05      	ldr	r3, [pc, #20]	; (8008c34 <HAL_GPIO_EXTI_Callback+0x28>)
 8008c20:	2201      	movs	r2, #1
 8008c22:	701a      	strb	r2, [r3, #0]
		BSP_TS_GetState(&TS_State);
 8008c24:	4804      	ldr	r0, [pc, #16]	; (8008c38 <HAL_GPIO_EXTI_Callback+0x2c>)
 8008c26:	f7f9 fd47 	bl	80026b8 <BSP_TS_GetState>
	}
}
 8008c2a:	bf00      	nop
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	200002f5 	.word	0x200002f5
 8008c38:	20000750 	.word	0x20000750

08008c3c <LCD_Config>:

static void LCD_Config(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
	uint32_t lcd_status = LCD_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	607b      	str	r3, [r7, #4]

	lcd_status = BSP_LCD_Init();
 8008c46:	f7f8 fac6 	bl	80011d6 <BSP_LCD_Init>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	607b      	str	r3, [r7, #4]
	while(lcd_status != LCD_OK);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1fc      	bne.n	8008c4e <LCD_Config+0x12>

	BSP_LCD_LayerDefaultInit(0,LAYER0_ADDRESS);
 8008c54:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8008c58:	2000      	movs	r0, #0
 8008c5a:	f7f8 fc59 	bl	8001510 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c62:	f7f8 fcfd 	bl	8001660 <BSP_LCD_Clear>
}
 8008c66:	bf00      	nop
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
	...

08008c70 <displayGame>:

static void displayGame()
{
 8008c70:	b5b0      	push	{r4, r5, r7, lr}
 8008c72:	b090      	sub	sp, #64	; 0x40
 8008c74:	af00      	add	r7, sp, #0
	char string[50];
	int i,j;

	 BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8008c76:	4884      	ldr	r0, [pc, #528]	; (8008e88 <displayGame+0x218>)
 8008c78:	f7f8 fcaa 	bl	80015d0 <BSP_LCD_SetTextColor>
	 BSP_LCD_SetFont(&Font24);
 8008c7c:	4883      	ldr	r0, [pc, #524]	; (8008e8c <displayGame+0x21c>)
 8008c7e:	f7f8 fcbf 	bl	8001600 <BSP_LCD_SetFont>
	 sprintf(string, "PLAY REVERSI WITH YOUR ARM");
 8008c82:	1d3b      	adds	r3, r7, #4
 8008c84:	4a82      	ldr	r2, [pc, #520]	; (8008e90 <displayGame+0x220>)
 8008c86:	461c      	mov	r4, r3
 8008c88:	4615      	mov	r5, r2
 8008c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008c92:	c403      	stmia	r4!, {r0, r1}
 8008c94:	8022      	strh	r2, [r4, #0]
 8008c96:	3402      	adds	r4, #2
 8008c98:	0c13      	lsrs	r3, r2, #16
 8008c9a:	7023      	strb	r3, [r4, #0]
	 BSP_LCD_DisplayStringAt(0,LINE(0), (uint8_t *)string, CENTER_MODE);
 8008c9c:	f7f8 fcca 	bl	8001634 <BSP_LCD_GetFont>
 8008ca0:	1d3a      	adds	r2, r7, #4
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	f7f8 fdaa 	bl	8001800 <BSP_LCD_DisplayStringAt>

	 sprintf(string, "MENU");
 8008cac:	1d3b      	adds	r3, r7, #4
 8008cae:	4a79      	ldr	r2, [pc, #484]	; (8008e94 <displayGame+0x224>)
 8008cb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008cb4:	6018      	str	r0, [r3, #0]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	7019      	strb	r1, [r3, #0]
	 BSP_LCD_DisplayStringAt(200,LINE(9), (uint8_t *)string, CENTER_MODE);
 8008cba:	f7f8 fcbb 	bl	8001634 <BSP_LCD_GetFont>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	88db      	ldrh	r3, [r3, #6]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	00d2      	lsls	r2, r2, #3
 8008cc6:	4413      	add	r3, r2
 8008cc8:	b299      	uxth	r1, r3
 8008cca:	1d3a      	adds	r2, r7, #4
 8008ccc:	2301      	movs	r3, #1
 8008cce:	20c8      	movs	r0, #200	; 0xc8
 8008cd0:	f7f8 fd96 	bl	8001800 <BSP_LCD_DisplayStringAt>
	 BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008cd4:	4870      	ldr	r0, [pc, #448]	; (8008e98 <displayGame+0x228>)
 8008cd6:	f7f8 fc7b 	bl	80015d0 <BSP_LCD_SetTextColor>
	 BSP_LCD_DrawRect(420,205,370,245);
 8008cda:	23f5      	movs	r3, #245	; 0xf5
 8008cdc:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8008ce0:	21cd      	movs	r1, #205	; 0xcd
 8008ce2:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8008ce6:	f7f8 fecf 	bl	8001a88 <BSP_LCD_DrawRect>

	 BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8008cea:	4867      	ldr	r0, [pc, #412]	; (8008e88 <displayGame+0x218>)
 8008cec:	f7f8 fc70 	bl	80015d0 <BSP_LCD_SetTextColor>
	 sprintf(string, "Game Information");
 8008cf0:	1d3b      	adds	r3, r7, #4
 8008cf2:	4a6a      	ldr	r2, [pc, #424]	; (8008e9c <displayGame+0x22c>)
 8008cf4:	461c      	mov	r4, r3
 8008cf6:	4615      	mov	r5, r2
 8008cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	7023      	strb	r3, [r4, #0]
	 BSP_LCD_DisplayStringAt(200,LINE(3), (uint8_t *)string, CENTER_MODE);
 8008d00:	f7f8 fc98 	bl	8001634 <BSP_LCD_GetFont>
 8008d04:	4603      	mov	r3, r0
 8008d06:	88db      	ldrh	r3, [r3, #6]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	0052      	lsls	r2, r2, #1
 8008d0c:	4413      	add	r3, r2
 8008d0e:	b299      	uxth	r1, r3
 8008d10:	1d3a      	adds	r2, r7, #4
 8008d12:	2301      	movs	r3, #1
 8008d14:	20c8      	movs	r0, #200	; 0xc8
 8008d16:	f7f8 fd73 	bl	8001800 <BSP_LCD_DisplayStringAt>
	 BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008d1a:	485f      	ldr	r0, [pc, #380]	; (8008e98 <displayGame+0x228>)
 8008d1c:	f7f8 fc58 	bl	80015d0 <BSP_LCD_SetTextColor>
	 BSP_LCD_DrawRect(420,50,370,145);
 8008d20:	2391      	movs	r3, #145	; 0x91
 8008d22:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8008d26:	2132      	movs	r1, #50	; 0x32
 8008d28:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8008d2c:	f7f8 feac 	bl	8001a88 <BSP_LCD_DrawRect>


	 BSP_LCD_SetFont(&Font16);
 8008d30:	485b      	ldr	r0, [pc, #364]	; (8008ea0 <displayGame+0x230>)
 8008d32:	f7f8 fc65 	bl	8001600 <BSP_LCD_SetFont>
	 sprintf(string, "Game Mode: Human vs. ARM");
 8008d36:	1d3b      	adds	r3, r7, #4
 8008d38:	4a5a      	ldr	r2, [pc, #360]	; (8008ea4 <displayGame+0x234>)
 8008d3a:	461c      	mov	r4, r3
 8008d3c:	4615      	mov	r5, r2
 8008d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008d46:	c403      	stmia	r4!, {r0, r1}
 8008d48:	7022      	strb	r2, [r4, #0]
	 BSP_LCD_DisplayStringAt(200,LINE(7), (uint8_t *)string, CENTER_MODE);
 8008d4a:	f7f8 fc73 	bl	8001634 <BSP_LCD_GetFont>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	88db      	ldrh	r3, [r3, #6]
 8008d52:	461a      	mov	r2, r3
 8008d54:	00d2      	lsls	r2, r2, #3
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	b299      	uxth	r1, r3
 8008d5a:	1d3a      	adds	r2, r7, #4
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	20c8      	movs	r0, #200	; 0xc8
 8008d60:	f7f8 fd4e 	bl	8001800 <BSP_LCD_DisplayStringAt>


	 sprintf(string, "Game Time: 1 s");
 8008d64:	1d3b      	adds	r3, r7, #4
 8008d66:	4a50      	ldr	r2, [pc, #320]	; (8008ea8 <displayGame+0x238>)
 8008d68:	461c      	mov	r4, r3
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d6e:	c407      	stmia	r4!, {r0, r1, r2}
 8008d70:	8023      	strh	r3, [r4, #0]
 8008d72:	3402      	adds	r4, #2
 8008d74:	0c1b      	lsrs	r3, r3, #16
 8008d76:	7023      	strb	r3, [r4, #0]
	 BSP_LCD_DisplayStringAt(200,LINE(8), (uint8_t *)string, CENTER_MODE);
 8008d78:	f7f8 fc5c 	bl	8001634 <BSP_LCD_GetFont>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	88db      	ldrh	r3, [r3, #6]
 8008d80:	00db      	lsls	r3, r3, #3
 8008d82:	b299      	uxth	r1, r3
 8008d84:	1d3a      	adds	r2, r7, #4
 8008d86:	2301      	movs	r3, #1
 8008d88:	20c8      	movs	r0, #200	; 0xc8
 8008d8a:	f7f8 fd39 	bl	8001800 <BSP_LCD_DisplayStringAt>


	 sprintf(string, "Realizado por: Joao Gomes");
 8008d8e:	1d3b      	adds	r3, r7, #4
 8008d90:	4a46      	ldr	r2, [pc, #280]	; (8008eac <displayGame+0x23c>)
 8008d92:	461c      	mov	r4, r3
 8008d94:	4615      	mov	r5, r2
 8008d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008d9e:	c403      	stmia	r4!, {r0, r1}
 8008da0:	8022      	strh	r2, [r4, #0]
	 BSP_LCD_DisplayStringAt(10,LINE(29), (uint8_t *)string, LEFT_MODE);
 8008da2:	f7f8 fc47 	bl	8001634 <BSP_LCD_GetFont>
 8008da6:	4603      	mov	r3, r0
 8008da8:	88db      	ldrh	r3, [r3, #6]
 8008daa:	461a      	mov	r2, r3
 8008dac:	00d2      	lsls	r2, r2, #3
 8008dae:	1ad2      	subs	r2, r2, r3
 8008db0:	0092      	lsls	r2, r2, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	b299      	uxth	r1, r3
 8008db6:	1d3a      	adds	r2, r7, #4
 8008db8:	2303      	movs	r3, #3
 8008dba:	200a      	movs	r0, #10
 8008dbc:	f7f8 fd20 	bl	8001800 <BSP_LCD_DisplayStringAt>


	 BSP_LCD_SetTextColor(LCD_COLOR_DARKRED);
 8008dc0:	483b      	ldr	r0, [pc, #236]	; (8008eb0 <displayGame+0x240>)
 8008dc2:	f7f8 fc05 	bl	80015d0 <BSP_LCD_SetTextColor>
	 sprintf(string, "Player 1 round: 20s left");
 8008dc6:	1d3b      	adds	r3, r7, #4
 8008dc8:	4a3a      	ldr	r2, [pc, #232]	; (8008eb4 <displayGame+0x244>)
 8008dca:	461c      	mov	r4, r3
 8008dcc:	4615      	mov	r5, r2
 8008dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008dd6:	c403      	stmia	r4!, {r0, r1}
 8008dd8:	7022      	strb	r2, [r4, #0]
	 BSP_LCD_DisplayStringAt(10,LINE(2), (uint8_t *)string, LEFT_MODE);
 8008dda:	f7f8 fc2b 	bl	8001634 <BSP_LCD_GetFont>
 8008dde:	4603      	mov	r3, r0
 8008de0:	88db      	ldrh	r3, [r3, #6]
 8008de2:	005b      	lsls	r3, r3, #1
 8008de4:	b299      	uxth	r1, r3
 8008de6:	1d3a      	adds	r2, r7, #4
 8008de8:	2303      	movs	r3, #3
 8008dea:	200a      	movs	r0, #10
 8008dec:	f7f8 fd08 	bl	8001800 <BSP_LCD_DisplayStringAt>





	 BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 8008df0:	4831      	ldr	r0, [pc, #196]	; (8008eb8 <displayGame+0x248>)
 8008df2:	f7f8 fbed 	bl	80015d0 <BSP_LCD_SetTextColor>
	 BSP_LCD_FillRect(10,50,400,400);
 8008df6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008dfa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008dfe:	2132      	movs	r1, #50	; 0x32
 8008e00:	200a      	movs	r0, #10
 8008e02:	f7f8 ff63 	bl	8001ccc <BSP_LCD_FillRect>



	 BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008e06:	4824      	ldr	r0, [pc, #144]	; (8008e98 <displayGame+0x228>)
 8008e08:	f7f8 fbe2 	bl	80015d0 <BSP_LCD_SetTextColor>
	 for(i=0;i<8;i++)
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e10:	e02a      	b.n	8008e68 <displayGame+0x1f8>
	 {
		 for(j=0;j<8;j++)
 8008e12:	2300      	movs	r3, #0
 8008e14:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e16:	e021      	b.n	8008e5c <displayGame+0x1ec>
		 {
			 BSP_LCD_DrawRect(10+50*j,50+50*i,50,50);
 8008e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	0092      	lsls	r2, r2, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	461a      	mov	r2, r3
 8008e24:	0091      	lsls	r1, r2, #2
 8008e26:	461a      	mov	r2, r3
 8008e28:	460b      	mov	r3, r1
 8008e2a:	4413      	add	r3, r2
 8008e2c:	005b      	lsls	r3, r3, #1
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	330a      	adds	r3, #10
 8008e32:	b298      	uxth	r0, r3
 8008e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e36:	3301      	adds	r3, #1
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	0092      	lsls	r2, r2, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	461a      	mov	r2, r3
 8008e42:	0091      	lsls	r1, r2, #2
 8008e44:	461a      	mov	r2, r3
 8008e46:	460b      	mov	r3, r1
 8008e48:	4413      	add	r3, r2
 8008e4a:	005b      	lsls	r3, r3, #1
 8008e4c:	b299      	uxth	r1, r3
 8008e4e:	2332      	movs	r3, #50	; 0x32
 8008e50:	2232      	movs	r2, #50	; 0x32
 8008e52:	f7f8 fe19 	bl	8001a88 <BSP_LCD_DrawRect>
		 for(j=0;j<8;j++)
 8008e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e58:	3301      	adds	r3, #1
 8008e5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5e:	2b07      	cmp	r3, #7
 8008e60:	ddda      	ble.n	8008e18 <displayGame+0x1a8>
	 for(i=0;i<8;i++)
 8008e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e64:	3301      	adds	r3, #1
 8008e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6a:	2b07      	cmp	r3, #7
 8008e6c:	ddd1      	ble.n	8008e12 <displayGame+0x1a2>
		 }
	 }
	 BSP_LCD_DrawRect(5,25,790,430);
 8008e6e:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 8008e72:	f240 3216 	movw	r2, #790	; 0x316
 8008e76:	2119      	movs	r1, #25
 8008e78:	2005      	movs	r0, #5
 8008e7a:	f7f8 fe05 	bl	8001a88 <BSP_LCD_DrawRect>



}
 8008e7e:	bf00      	nop
 8008e80:	3740      	adds	r7, #64	; 0x40
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bdb0      	pop	{r4, r5, r7, pc}
 8008e86:	bf00      	nop
 8008e88:	ff000080 	.word	0xff000080
 8008e8c:	2000003c 	.word	0x2000003c
 8008e90:	08009ed4 	.word	0x08009ed4
 8008e94:	08009ef0 	.word	0x08009ef0
 8008e98:	ff0000ff 	.word	0xff0000ff
 8008e9c:	08009ef8 	.word	0x08009ef8
 8008ea0:	20000044 	.word	0x20000044
 8008ea4:	08009f0c 	.word	0x08009f0c
 8008ea8:	08009f28 	.word	0x08009f28
 8008eac:	08009f38 	.word	0x08009f38
 8008eb0:	ff800000 	.word	0xff800000
 8008eb4:	08009f54 	.word	0x08009f54
 8008eb8:	ffd3d3d3 	.word	0xffd3d3d3

08008ebc <displayTemperature>:

static void displayTemperature()
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b09a      	sub	sp, #104	; 0x68
 8008ec0:	af00      	add	r7, sp, #0
	long int JTemp;
	char string[100];

	if(flagTimer==1)
 8008ec2:	4b26      	ldr	r3, [pc, #152]	; (8008f5c <displayTemperature+0xa0>)
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d044      	beq.n	8008f54 <displayTemperature+0x98>
	{
			BSP_LED_Toggle(LED_GREEN);
 8008eca:	2001      	movs	r0, #1
 8008ecc:	f7f7 ff46 	bl	8000d5c <BSP_LED_Toggle>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008ed0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008ed4:	f7f8 fb7c 	bl	80015d0 <BSP_LCD_SetTextColor>
	  		flagTimer=0;
 8008ed8:	4b20      	ldr	r3, [pc, #128]	; (8008f5c <displayTemperature+0xa0>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	701a      	strb	r2, [r3, #0]
	  		BSP_LCD_SetFont(&Font16);
 8008ede:	4820      	ldr	r0, [pc, #128]	; (8008f60 <displayTemperature+0xa4>)
 8008ee0:	f7f8 fb8e 	bl	8001600 <BSP_LCD_SetFont>
	  		ConvertedValue=HAL_ADC_GetValue(&hadc1); //get value
 8008ee4:	481f      	ldr	r0, [pc, #124]	; (8008f64 <displayTemperature+0xa8>)
 8008ee6:	f7fa f800 	bl	8002eea <HAL_ADC_GetValue>
 8008eea:	4602      	mov	r2, r0
 8008eec:	4b1e      	ldr	r3, [pc, #120]	; (8008f68 <displayTemperature+0xac>)
 8008eee:	601a      	str	r2, [r3, #0]
	  		JTemp = ((((ConvertedValue * VREF)/MAX_CONVERTED_VALUE) - VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 8008ef0:	4b1d      	ldr	r3, [pc, #116]	; (8008f68 <displayTemperature+0xac>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f640 42e4 	movw	r2, #3300	; 0xce4
 8008ef8:	fb02 f203 	mul.w	r2, r2, r3
 8008efc:	4b1b      	ldr	r3, [pc, #108]	; (8008f6c <displayTemperature+0xb0>)
 8008efe:	fba3 1302 	umull	r1, r3, r3, r2
 8008f02:	1ad2      	subs	r2, r2, r3
 8008f04:	0852      	lsrs	r2, r2, #1
 8008f06:	4413      	add	r3, r2
 8008f08:	0ada      	lsrs	r2, r3, #11
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4413      	add	r3, r2
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	461a      	mov	r2, r3
 8008f14:	4b16      	ldr	r3, [pc, #88]	; (8008f70 <displayTemperature+0xb4>)
 8008f16:	4413      	add	r3, r2
 8008f18:	4a16      	ldr	r2, [pc, #88]	; (8008f74 <displayTemperature+0xb8>)
 8008f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1e:	08db      	lsrs	r3, r3, #3
 8008f20:	3319      	adds	r3, #25
 8008f22:	667b      	str	r3, [r7, #100]	; 0x64
	  		sprintf(string, "Int. Temp:%ld'C", JTemp);
 8008f24:	463b      	mov	r3, r7
 8008f26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008f28:	4913      	ldr	r1, [pc, #76]	; (8008f78 <displayTemperature+0xbc>)
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 fbc0 	bl	80096b0 <siprintf>
	  		BSP_LCD_DisplayStringAt(0,LINE(29), (uint8_t *)string, RIGHT_MODE);
 8008f30:	f7f8 fb80 	bl	8001634 <BSP_LCD_GetFont>
 8008f34:	4603      	mov	r3, r0
 8008f36:	88db      	ldrh	r3, [r3, #6]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	00d2      	lsls	r2, r2, #3
 8008f3c:	1ad2      	subs	r2, r2, r3
 8008f3e:	0092      	lsls	r2, r2, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	b299      	uxth	r1, r3
 8008f44:	463a      	mov	r2, r7
 8008f46:	2302      	movs	r3, #2
 8008f48:	2000      	movs	r0, #0
 8008f4a:	f7f8 fc59 	bl	8001800 <BSP_LCD_DisplayStringAt>
	  		BSP_LCD_ClearStringLine(30);
 8008f4e:	201e      	movs	r0, #30
 8008f50:	f7f8 fbae 	bl	80016b0 <BSP_LCD_ClearStringLine>
	}
}
 8008f54:	bf00      	nop
 8008f56:	3768      	adds	r7, #104	; 0x68
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	200002f4 	.word	0x200002f4
 8008f60:	20000044 	.word	0x20000044
 8008f64:	20000628 	.word	0x20000628
 8008f68:	200002f8 	.word	0x200002f8
 8008f6c:	00100101 	.word	0x00100101
 8008f70:	ffffe250 	.word	0xffffe250
 8008f74:	51eb851f 	.word	0x51eb851f
 8008f78:	08009f70 	.word	0x08009f70

08008f7c <detectBoardTouch>:

void detectBoardTouch(volatile uint8_t* jk)
{
 8008f7c:	b590      	push	{r4, r7, lr}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
	//Esta função detecta em que célula do tabuleiro carregámos e preenche a célula com um quadrado

	uint16_t pos_x=0;
 8008f84:	2300      	movs	r3, #0
 8008f86:	81fb      	strh	r3, [r7, #14]
	uint16_t pos_y=0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	81bb      	strh	r3, [r7, #12]

	if(touchScreenFlag==1)
 8008f8c:	4b4e      	ldr	r3, [pc, #312]	; (80090c8 <detectBoardTouch+0x14c>)
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 8096 	beq.w	80090c2 <detectBoardTouch+0x146>
	{
		touchScreenFlag=0;
 8008f96:	4b4c      	ldr	r3, [pc, #304]	; (80090c8 <detectBoardTouch+0x14c>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	701a      	strb	r2, [r3, #0]

		if(TS_State.touchX[0]>10 && TS_State.touchX[0]<410 && TS_State.touchY[0]>50 && TS_State.touchY[0]<450)
 8008f9c:	4b4b      	ldr	r3, [pc, #300]	; (80090cc <detectBoardTouch+0x150>)
 8008f9e:	885b      	ldrh	r3, [r3, #2]
 8008fa0:	2b0a      	cmp	r3, #10
 8008fa2:	f240 808e 	bls.w	80090c2 <detectBoardTouch+0x146>
 8008fa6:	4b49      	ldr	r3, [pc, #292]	; (80090cc <detectBoardTouch+0x150>)
 8008fa8:	885b      	ldrh	r3, [r3, #2]
 8008faa:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8008fae:	f080 8088 	bcs.w	80090c2 <detectBoardTouch+0x146>
 8008fb2:	4b46      	ldr	r3, [pc, #280]	; (80090cc <detectBoardTouch+0x150>)
 8008fb4:	88db      	ldrh	r3, [r3, #6]
 8008fb6:	2b32      	cmp	r3, #50	; 0x32
 8008fb8:	f240 8083 	bls.w	80090c2 <detectBoardTouch+0x146>
 8008fbc:	4b43      	ldr	r3, [pc, #268]	; (80090cc <detectBoardTouch+0x150>)
 8008fbe:	88db      	ldrh	r3, [r3, #6]
 8008fc0:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8008fc4:	d27d      	bcs.n	80090c2 <detectBoardTouch+0x146>
		{
			// TS_State.touchX[0]-10 distância até ao limite do lado esquerdo do tabuleiro
			// (TS_State.touchX[0]-10)/50) número de quadrados até ao lado esquerdo do tabuleiro
			// 10+(TS_State.touchX[0]-10)/50)*50) multiplicamos por 50 para dar a distância até à celula pretendida
			colunaCelula = (TS_State.touchX[0]-10)/50;
 8008fc6:	4b41      	ldr	r3, [pc, #260]	; (80090cc <detectBoardTouch+0x150>)
 8008fc8:	885b      	ldrh	r3, [r3, #2]
 8008fca:	3b0a      	subs	r3, #10
 8008fcc:	4a40      	ldr	r2, [pc, #256]	; (80090d0 <detectBoardTouch+0x154>)
 8008fce:	fb82 1203 	smull	r1, r2, r2, r3
 8008fd2:	1112      	asrs	r2, r2, #4
 8008fd4:	17db      	asrs	r3, r3, #31
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	4b3e      	ldr	r3, [pc, #248]	; (80090d4 <detectBoardTouch+0x158>)
 8008fdc:	701a      	strb	r2, [r3, #0]
			linhaCelula  = (TS_State.touchY[0]-50)/50;
 8008fde:	4b3b      	ldr	r3, [pc, #236]	; (80090cc <detectBoardTouch+0x150>)
 8008fe0:	88db      	ldrh	r3, [r3, #6]
 8008fe2:	3b32      	subs	r3, #50	; 0x32
 8008fe4:	4a3a      	ldr	r2, [pc, #232]	; (80090d0 <detectBoardTouch+0x154>)
 8008fe6:	fb82 1203 	smull	r1, r2, r2, r3
 8008fea:	1112      	asrs	r2, r2, #4
 8008fec:	17db      	asrs	r3, r3, #31
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	4b39      	ldr	r3, [pc, #228]	; (80090d8 <detectBoardTouch+0x15c>)
 8008ff4:	701a      	strb	r2, [r3, #0]

			if(tabuleiroInicial[linhaCelula][colunaCelula]==0)
 8008ff6:	4b38      	ldr	r3, [pc, #224]	; (80090d8 <detectBoardTouch+0x15c>)
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	4b35      	ldr	r3, [pc, #212]	; (80090d4 <detectBoardTouch+0x158>)
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	4619      	mov	r1, r3
 8009002:	4a36      	ldr	r2, [pc, #216]	; (80090dc <detectBoardTouch+0x160>)
 8009004:	00c3      	lsls	r3, r0, #3
 8009006:	440b      	add	r3, r1
 8009008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d158      	bne.n	80090c2 <detectBoardTouch+0x146>
			{
				tabuleiroInicial[linhaCelula][colunaCelula]= *jk; //actualiza o tabuleiro
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	b2da      	uxtb	r2, r3
 8009016:	4b30      	ldr	r3, [pc, #192]	; (80090d8 <detectBoardTouch+0x15c>)
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	461c      	mov	r4, r3
 800901c:	4b2d      	ldr	r3, [pc, #180]	; (80090d4 <detectBoardTouch+0x158>)
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	4618      	mov	r0, r3
 8009022:	4611      	mov	r1, r2
 8009024:	4a2d      	ldr	r2, [pc, #180]	; (80090dc <detectBoardTouch+0x160>)
 8009026:	00e3      	lsls	r3, r4, #3
 8009028:	4403      	add	r3, r0
 800902a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

				pos_x=10+(colunaCelula)*50;
 800902e:	4b29      	ldr	r3, [pc, #164]	; (80090d4 <detectBoardTouch+0x158>)
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	b29b      	uxth	r3, r3
 8009034:	461a      	mov	r2, r3
 8009036:	0092      	lsls	r2, r2, #2
 8009038:	4413      	add	r3, r2
 800903a:	461a      	mov	r2, r3
 800903c:	0091      	lsls	r1, r2, #2
 800903e:	461a      	mov	r2, r3
 8009040:	460b      	mov	r3, r1
 8009042:	4413      	add	r3, r2
 8009044:	005b      	lsls	r3, r3, #1
 8009046:	b29b      	uxth	r3, r3
 8009048:	330a      	adds	r3, #10
 800904a:	81fb      	strh	r3, [r7, #14]
				pos_y=50+(linhaCelula)*50;
 800904c:	4b22      	ldr	r3, [pc, #136]	; (80090d8 <detectBoardTouch+0x15c>)
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	3301      	adds	r3, #1
 8009052:	b29b      	uxth	r3, r3
 8009054:	461a      	mov	r2, r3
 8009056:	0092      	lsls	r2, r2, #2
 8009058:	4413      	add	r3, r2
 800905a:	461a      	mov	r2, r3
 800905c:	0091      	lsls	r1, r2, #2
 800905e:	461a      	mov	r2, r3
 8009060:	460b      	mov	r3, r1
 8009062:	4413      	add	r3, r2
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	81bb      	strh	r3, [r7, #12]

				if(*jk==1)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b01      	cmp	r3, #1
 8009070:	d110      	bne.n	8009094 <detectBoardTouch+0x118>
				{
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009072:	481b      	ldr	r0, [pc, #108]	; (80090e0 <detectBoardTouch+0x164>)
 8009074:	f7f8 faac 	bl	80015d0 <BSP_LCD_SetTextColor>
					BSP_LCD_FillCircle(pos_x+25,pos_y+25,20);
 8009078:	89fb      	ldrh	r3, [r7, #14]
 800907a:	3319      	adds	r3, #25
 800907c:	b298      	uxth	r0, r3
 800907e:	89bb      	ldrh	r3, [r7, #12]
 8009080:	3319      	adds	r3, #25
 8009082:	b29b      	uxth	r3, r3
 8009084:	2214      	movs	r2, #20
 8009086:	4619      	mov	r1, r3
 8009088:	f7f8 fe7a 	bl	8001d80 <BSP_LCD_FillCircle>
					jogador=2;
 800908c:	4b15      	ldr	r3, [pc, #84]	; (80090e4 <detectBoardTouch+0x168>)
 800908e:	2202      	movs	r2, #2
 8009090:	701a      	strb	r2, [r3, #0]
					return;
 8009092:	e016      	b.n	80090c2 <detectBoardTouch+0x146>
				}

				if(*jk==2)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b02      	cmp	r3, #2
 800909c:	d111      	bne.n	80090c2 <detectBoardTouch+0x146>
				{
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800909e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80090a2:	f7f8 fa95 	bl	80015d0 <BSP_LCD_SetTextColor>
					BSP_LCD_FillCircle(pos_x+25,pos_y+25,20);
 80090a6:	89fb      	ldrh	r3, [r7, #14]
 80090a8:	3319      	adds	r3, #25
 80090aa:	b298      	uxth	r0, r3
 80090ac:	89bb      	ldrh	r3, [r7, #12]
 80090ae:	3319      	adds	r3, #25
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	2214      	movs	r2, #20
 80090b4:	4619      	mov	r1, r3
 80090b6:	f7f8 fe63 	bl	8001d80 <BSP_LCD_FillCircle>
					jogador=1;
 80090ba:	4b0a      	ldr	r3, [pc, #40]	; (80090e4 <detectBoardTouch+0x168>)
 80090bc:	2201      	movs	r2, #1
 80090be:	701a      	strb	r2, [r3, #0]
					return;
 80090c0:	bf00      	nop
				}
			}
		}
	}
}
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd90      	pop	{r4, r7, pc}
 80090c8:	200002f5 	.word	0x200002f5
 80090cc:	20000750 	.word	0x20000750
 80090d0:	51eb851f 	.word	0x51eb851f
 80090d4:	2000057c 	.word	0x2000057c
 80090d8:	20000670 	.word	0x20000670
 80090dc:	200002fc 	.word	0x200002fc
 80090e0:	ffff0000 	.word	0xffff0000
 80090e4:	200006f4 	.word	0x200006f4

080090e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80090e8:	b480      	push	{r7}
 80090ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80090ec:	bf00      	nop
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
	...

080090f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80090fe:	4b0f      	ldr	r3, [pc, #60]	; (800913c <HAL_MspInit+0x44>)
 8009100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009102:	4a0e      	ldr	r2, [pc, #56]	; (800913c <HAL_MspInit+0x44>)
 8009104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009108:	6413      	str	r3, [r2, #64]	; 0x40
 800910a:	4b0c      	ldr	r3, [pc, #48]	; (800913c <HAL_MspInit+0x44>)
 800910c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009112:	607b      	str	r3, [r7, #4]
 8009114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009116:	4b09      	ldr	r3, [pc, #36]	; (800913c <HAL_MspInit+0x44>)
 8009118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800911a:	4a08      	ldr	r2, [pc, #32]	; (800913c <HAL_MspInit+0x44>)
 800911c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009120:	6453      	str	r3, [r2, #68]	; 0x44
 8009122:	4b06      	ldr	r3, [pc, #24]	; (800913c <HAL_MspInit+0x44>)
 8009124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800912e:	bf00      	nop
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	40023800 	.word	0x40023800

08009140 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a0d      	ldr	r2, [pc, #52]	; (8009184 <HAL_ADC_MspInit+0x44>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d113      	bne.n	800917a <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009152:	4b0d      	ldr	r3, [pc, #52]	; (8009188 <HAL_ADC_MspInit+0x48>)
 8009154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009156:	4a0c      	ldr	r2, [pc, #48]	; (8009188 <HAL_ADC_MspInit+0x48>)
 8009158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800915c:	6453      	str	r3, [r2, #68]	; 0x44
 800915e:	4b0a      	ldr	r3, [pc, #40]	; (8009188 <HAL_ADC_MspInit+0x48>)
 8009160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800916a:	2200      	movs	r2, #0
 800916c:	2100      	movs	r1, #0
 800916e:	2012      	movs	r0, #18
 8009170:	f7fa f9f9 	bl	8003566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8009174:	2012      	movs	r0, #18
 8009176:	f7fa fa12 	bl	800359e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800917a:	bf00      	nop
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	40012000 	.word	0x40012000
 8009188:	40023800 	.word	0x40023800

0800918c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a0a      	ldr	r2, [pc, #40]	; (80091c4 <HAL_DMA2D_MspInit+0x38>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d10b      	bne.n	80091b6 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800919e:	4b0a      	ldr	r3, [pc, #40]	; (80091c8 <HAL_DMA2D_MspInit+0x3c>)
 80091a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a2:	4a09      	ldr	r2, [pc, #36]	; (80091c8 <HAL_DMA2D_MspInit+0x3c>)
 80091a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80091a8:	6313      	str	r3, [r2, #48]	; 0x30
 80091aa:	4b07      	ldr	r3, [pc, #28]	; (80091c8 <HAL_DMA2D_MspInit+0x3c>)
 80091ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091b2:	60fb      	str	r3, [r7, #12]
 80091b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80091b6:	bf00      	nop
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	4002b000 	.word	0x4002b000
 80091c8:	40023800 	.word	0x40023800

080091cc <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08a      	sub	sp, #40	; 0x28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091d4:	f107 0314 	add.w	r3, r7, #20
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	605a      	str	r2, [r3, #4]
 80091de:	609a      	str	r2, [r3, #8]
 80091e0:	60da      	str	r2, [r3, #12]
 80091e2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a17      	ldr	r2, [pc, #92]	; (8009248 <HAL_DSI_MspInit+0x7c>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d127      	bne.n	800923e <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80091ee:	4b17      	ldr	r3, [pc, #92]	; (800924c <HAL_DSI_MspInit+0x80>)
 80091f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f2:	4a16      	ldr	r2, [pc, #88]	; (800924c <HAL_DSI_MspInit+0x80>)
 80091f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091f8:	6453      	str	r3, [r2, #68]	; 0x44
 80091fa:	4b14      	ldr	r3, [pc, #80]	; (800924c <HAL_DSI_MspInit+0x80>)
 80091fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009202:	613b      	str	r3, [r7, #16]
 8009204:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009206:	4b11      	ldr	r3, [pc, #68]	; (800924c <HAL_DSI_MspInit+0x80>)
 8009208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920a:	4a10      	ldr	r2, [pc, #64]	; (800924c <HAL_DSI_MspInit+0x80>)
 800920c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009210:	6313      	str	r3, [r2, #48]	; 0x30
 8009212:	4b0e      	ldr	r3, [pc, #56]	; (800924c <HAL_DSI_MspInit+0x80>)
 8009214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800921e:	2304      	movs	r3, #4
 8009220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009222:	2302      	movs	r3, #2
 8009224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009226:	2300      	movs	r3, #0
 8009228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800922a:	2300      	movs	r3, #0
 800922c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800922e:	230d      	movs	r3, #13
 8009230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8009232:	f107 0314 	add.w	r3, r7, #20
 8009236:	4619      	mov	r1, r3
 8009238:	4805      	ldr	r0, [pc, #20]	; (8009250 <HAL_DSI_MspInit+0x84>)
 800923a:	f7fb fe9f 	bl	8004f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800923e:	bf00      	nop
 8009240:	3728      	adds	r7, #40	; 0x28
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	40016c00 	.word	0x40016c00
 800924c:	40023800 	.word	0x40023800
 8009250:	40022400 	.word	0x40022400

08009254 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a08      	ldr	r2, [pc, #32]	; (8009284 <HAL_DSI_MspDeInit+0x30>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d109      	bne.n	800927a <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8009266:	4b08      	ldr	r3, [pc, #32]	; (8009288 <HAL_DSI_MspDeInit+0x34>)
 8009268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800926a:	4a07      	ldr	r2, [pc, #28]	; (8009288 <HAL_DSI_MspDeInit+0x34>)
 800926c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8009270:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 8009272:	2104      	movs	r1, #4
 8009274:	4805      	ldr	r0, [pc, #20]	; (800928c <HAL_DSI_MspDeInit+0x38>)
 8009276:	f7fc f82b 	bl	80052d0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800927a:	bf00      	nop
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	40016c00 	.word	0x40016c00
 8009288:	40023800 	.word	0x40023800
 800928c:	40022400 	.word	0x40022400

08009290 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a0a      	ldr	r2, [pc, #40]	; (80092c8 <HAL_LTDC_MspInit+0x38>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d10b      	bne.n	80092ba <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80092a2:	4b0a      	ldr	r3, [pc, #40]	; (80092cc <HAL_LTDC_MspInit+0x3c>)
 80092a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a6:	4a09      	ldr	r2, [pc, #36]	; (80092cc <HAL_LTDC_MspInit+0x3c>)
 80092a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092ac:	6453      	str	r3, [r2, #68]	; 0x44
 80092ae:	4b07      	ldr	r3, [pc, #28]	; (80092cc <HAL_LTDC_MspInit+0x3c>)
 80092b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092b6:	60fb      	str	r3, [r7, #12]
 80092b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80092ba:	bf00      	nop
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	40016800 	.word	0x40016800
 80092cc:	40023800 	.word	0x40023800

080092d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a16      	ldr	r2, [pc, #88]	; (8009338 <HAL_TIM_Base_MspInit+0x68>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d10c      	bne.n	80092fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80092e2:	4b16      	ldr	r3, [pc, #88]	; (800933c <HAL_TIM_Base_MspInit+0x6c>)
 80092e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092e6:	4a15      	ldr	r2, [pc, #84]	; (800933c <HAL_TIM_Base_MspInit+0x6c>)
 80092e8:	f043 0301 	orr.w	r3, r3, #1
 80092ec:	6453      	str	r3, [r2, #68]	; 0x44
 80092ee:	4b13      	ldr	r3, [pc, #76]	; (800933c <HAL_TIM_Base_MspInit+0x6c>)
 80092f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	60fb      	str	r3, [r7, #12]
 80092f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80092fa:	e018      	b.n	800932e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a0f      	ldr	r2, [pc, #60]	; (8009340 <HAL_TIM_Base_MspInit+0x70>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d113      	bne.n	800932e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009306:	4b0d      	ldr	r3, [pc, #52]	; (800933c <HAL_TIM_Base_MspInit+0x6c>)
 8009308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930a:	4a0c      	ldr	r2, [pc, #48]	; (800933c <HAL_TIM_Base_MspInit+0x6c>)
 800930c:	f043 0310 	orr.w	r3, r3, #16
 8009310:	6413      	str	r3, [r2, #64]	; 0x40
 8009312:	4b0a      	ldr	r3, [pc, #40]	; (800933c <HAL_TIM_Base_MspInit+0x6c>)
 8009314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009316:	f003 0310 	and.w	r3, r3, #16
 800931a:	60bb      	str	r3, [r7, #8]
 800931c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800931e:	2200      	movs	r2, #0
 8009320:	2100      	movs	r1, #0
 8009322:	2036      	movs	r0, #54	; 0x36
 8009324:	f7fa f91f 	bl	8003566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009328:	2036      	movs	r0, #54	; 0x36
 800932a:	f7fa f938 	bl	800359e <HAL_NVIC_EnableIRQ>
}
 800932e:	bf00      	nop
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	40010000 	.word	0x40010000
 800933c:	40023800 	.word	0x40023800
 8009340:	40001000 	.word	0x40001000

08009344 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800934a:	1d3b      	adds	r3, r7, #4
 800934c:	2200      	movs	r2, #0
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	605a      	str	r2, [r3, #4]
 8009352:	609a      	str	r2, [r3, #8]
 8009354:	60da      	str	r2, [r3, #12]
 8009356:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8009358:	4b43      	ldr	r3, [pc, #268]	; (8009468 <HAL_FMC_MspInit+0x124>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d17e      	bne.n	800945e <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 8009360:	4b41      	ldr	r3, [pc, #260]	; (8009468 <HAL_FMC_MspInit+0x124>)
 8009362:	2201      	movs	r2, #1
 8009364:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8009366:	4b41      	ldr	r3, [pc, #260]	; (800946c <HAL_FMC_MspInit+0x128>)
 8009368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936a:	4a40      	ldr	r2, [pc, #256]	; (800946c <HAL_FMC_MspInit+0x128>)
 800936c:	f043 0301 	orr.w	r3, r3, #1
 8009370:	6393      	str	r3, [r2, #56]	; 0x38
 8009372:	4b3e      	ldr	r3, [pc, #248]	; (800946c <HAL_FMC_MspInit+0x128>)
 8009374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	603b      	str	r3, [r7, #0]
 800937c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 800937e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8009382:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10 
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009384:	2302      	movs	r3, #2
 8009386:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009388:	2300      	movs	r3, #0
 800938a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800938c:	2303      	movs	r3, #3
 800938e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009390:	230c      	movs	r3, #12
 8009392:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009394:	1d3b      	adds	r3, r7, #4
 8009396:	4619      	mov	r1, r3
 8009398:	4835      	ldr	r0, [pc, #212]	; (8009470 <HAL_FMC_MspInit+0x12c>)
 800939a:	f7fb fdef 	bl	8004f7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800939e:	2360      	movs	r3, #96	; 0x60
 80093a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093a2:	2302      	movs	r3, #2
 80093a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093a6:	2300      	movs	r3, #0
 80093a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093aa:	2303      	movs	r3, #3
 80093ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80093ae:	230c      	movs	r3, #12
 80093b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093b2:	1d3b      	adds	r3, r7, #4
 80093b4:	4619      	mov	r1, r3
 80093b6:	482f      	ldr	r0, [pc, #188]	; (8009474 <HAL_FMC_MspInit+0x130>)
 80093b8:	f7fb fde0 	bl	8004f7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 80093bc:	f248 1337 	movw	r3, #33079	; 0x8137
 80093c0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093c2:	2302      	movs	r3, #2
 80093c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093c6:	2300      	movs	r3, #0
 80093c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093ca:	2303      	movs	r3, #3
 80093cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80093ce:	230c      	movs	r3, #12
 80093d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80093d2:	1d3b      	adds	r3, r7, #4
 80093d4:	4619      	mov	r1, r3
 80093d6:	4828      	ldr	r0, [pc, #160]	; (8009478 <HAL_FMC_MspInit+0x134>)
 80093d8:	f7fb fdd0 	bl	8004f7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 80093dc:	f24c 7303 	movw	r3, #50947	; 0xc703
 80093e0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093e2:	2302      	movs	r3, #2
 80093e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093e6:	2300      	movs	r3, #0
 80093e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093ea:	2303      	movs	r3, #3
 80093ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80093ee:	230c      	movs	r3, #12
 80093f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80093f2:	1d3b      	adds	r3, r7, #4
 80093f4:	4619      	mov	r1, r3
 80093f6:	4821      	ldr	r0, [pc, #132]	; (800947c <HAL_FMC_MspInit+0x138>)
 80093f8:	f7fb fdc0 	bl	8004f7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5 
 80093fc:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8009400:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1 
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009402:	2302      	movs	r3, #2
 8009404:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009406:	2300      	movs	r3, #0
 8009408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800940a:	2303      	movs	r3, #3
 800940c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800940e:	230c      	movs	r3, #12
 8009410:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009412:	1d3b      	adds	r3, r7, #4
 8009414:	4619      	mov	r1, r3
 8009416:	481a      	ldr	r0, [pc, #104]	; (8009480 <HAL_FMC_MspInit+0x13c>)
 8009418:	f7fb fdb0 	bl	8004f7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800941c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8009420:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009422:	2302      	movs	r3, #2
 8009424:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009426:	2300      	movs	r3, #0
 8009428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800942a:	2303      	movs	r3, #3
 800942c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800942e:	230c      	movs	r3, #12
 8009430:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009432:	1d3b      	adds	r3, r7, #4
 8009434:	4619      	mov	r1, r3
 8009436:	4813      	ldr	r0, [pc, #76]	; (8009484 <HAL_FMC_MspInit+0x140>)
 8009438:	f7fb fda0 	bl	8004f7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 800943c:	f64f 7320 	movw	r3, #65312	; 0xff20
 8009440:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009442:	2302      	movs	r3, #2
 8009444:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009446:	2300      	movs	r3, #0
 8009448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800944a:	2303      	movs	r3, #3
 800944c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800944e:	230c      	movs	r3, #12
 8009450:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009452:	1d3b      	adds	r3, r7, #4
 8009454:	4619      	mov	r1, r3
 8009456:	480c      	ldr	r0, [pc, #48]	; (8009488 <HAL_FMC_MspInit+0x144>)
 8009458:	f7fb fd90 	bl	8004f7c <HAL_GPIO_Init>
 800945c:	e000      	b.n	8009460 <HAL_FMC_MspInit+0x11c>
    return;
 800945e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	200003fc 	.word	0x200003fc
 800946c:	40023800 	.word	0x40023800
 8009470:	40021000 	.word	0x40021000
 8009474:	40020400 	.word	0x40020400
 8009478:	40021800 	.word	0x40021800
 800947c:	40020c00 	.word	0x40020c00
 8009480:	40022000 	.word	0x40022000
 8009484:	40021400 	.word	0x40021400
 8009488:	40021c00 	.word	0x40021c00

0800948c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8009494:	f7ff ff56 	bl	8009344 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80094a0:	b480      	push	{r7}
 80094a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80094a4:	bf00      	nop
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr

080094ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80094ae:	b480      	push	{r7}
 80094b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80094b2:	e7fe      	b.n	80094b2 <HardFault_Handler+0x4>

080094b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80094b4:	b480      	push	{r7}
 80094b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80094b8:	e7fe      	b.n	80094b8 <MemManage_Handler+0x4>

080094ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80094ba:	b480      	push	{r7}
 80094bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80094be:	e7fe      	b.n	80094be <BusFault_Handler+0x4>

080094c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80094c0:	b480      	push	{r7}
 80094c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80094c4:	e7fe      	b.n	80094c4 <UsageFault_Handler+0x4>

080094c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80094c6:	b480      	push	{r7}
 80094c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80094ca:	bf00      	nop
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80094d4:	b480      	push	{r7}
 80094d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80094d8:	bf00      	nop
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80094e2:	b480      	push	{r7}
 80094e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80094e6:	bf00      	nop
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80094f4:	f7f9 fa68 	bl	80029c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80094f8:	bf00      	nop
 80094fa:	bd80      	pop	{r7, pc}

080094fc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8009500:	4802      	ldr	r0, [pc, #8]	; (800950c <ADC_IRQHandler+0x10>)
 8009502:	f7f9 fbb1 	bl	8002c68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8009506:	bf00      	nop
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	20000628 	.word	0x20000628

08009510 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8009514:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009518:	f7fc f818 	bl	800554c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800951c:	bf00      	nop
 800951e:	bd80      	pop	{r7, pc}

08009520 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009524:	4802      	ldr	r0, [pc, #8]	; (8009530 <TIM6_DAC_IRQHandler+0x10>)
 8009526:	f7fe f9a3 	bl	8007870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800952a:	bf00      	nop
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	20000674 	.word	0x20000674

08009534 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800953c:	4b11      	ldr	r3, [pc, #68]	; (8009584 <_sbrk+0x50>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d102      	bne.n	800954a <_sbrk+0x16>
		heap_end = &end;
 8009544:	4b0f      	ldr	r3, [pc, #60]	; (8009584 <_sbrk+0x50>)
 8009546:	4a10      	ldr	r2, [pc, #64]	; (8009588 <_sbrk+0x54>)
 8009548:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800954a:	4b0e      	ldr	r3, [pc, #56]	; (8009584 <_sbrk+0x50>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009550:	4b0c      	ldr	r3, [pc, #48]	; (8009584 <_sbrk+0x50>)
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4413      	add	r3, r2
 8009558:	466a      	mov	r2, sp
 800955a:	4293      	cmp	r3, r2
 800955c:	d907      	bls.n	800956e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800955e:	f000 f875 	bl	800964c <__errno>
 8009562:	4602      	mov	r2, r0
 8009564:	230c      	movs	r3, #12
 8009566:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009568:	f04f 33ff 	mov.w	r3, #4294967295
 800956c:	e006      	b.n	800957c <_sbrk+0x48>
	}

	heap_end += incr;
 800956e:	4b05      	ldr	r3, [pc, #20]	; (8009584 <_sbrk+0x50>)
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4413      	add	r3, r2
 8009576:	4a03      	ldr	r2, [pc, #12]	; (8009584 <_sbrk+0x50>)
 8009578:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800957a:	68fb      	ldr	r3, [r7, #12]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	20000400 	.word	0x20000400
 8009588:	20000798 	.word	0x20000798

0800958c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800958c:	b480      	push	{r7}
 800958e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009590:	4b15      	ldr	r3, [pc, #84]	; (80095e8 <SystemInit+0x5c>)
 8009592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009596:	4a14      	ldr	r2, [pc, #80]	; (80095e8 <SystemInit+0x5c>)
 8009598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800959c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80095a0:	4b12      	ldr	r3, [pc, #72]	; (80095ec <SystemInit+0x60>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a11      	ldr	r2, [pc, #68]	; (80095ec <SystemInit+0x60>)
 80095a6:	f043 0301 	orr.w	r3, r3, #1
 80095aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80095ac:	4b0f      	ldr	r3, [pc, #60]	; (80095ec <SystemInit+0x60>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80095b2:	4b0e      	ldr	r3, [pc, #56]	; (80095ec <SystemInit+0x60>)
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	490d      	ldr	r1, [pc, #52]	; (80095ec <SystemInit+0x60>)
 80095b8:	4b0d      	ldr	r3, [pc, #52]	; (80095f0 <SystemInit+0x64>)
 80095ba:	4013      	ands	r3, r2
 80095bc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80095be:	4b0b      	ldr	r3, [pc, #44]	; (80095ec <SystemInit+0x60>)
 80095c0:	4a0c      	ldr	r2, [pc, #48]	; (80095f4 <SystemInit+0x68>)
 80095c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80095c4:	4b09      	ldr	r3, [pc, #36]	; (80095ec <SystemInit+0x60>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a08      	ldr	r2, [pc, #32]	; (80095ec <SystemInit+0x60>)
 80095ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80095d0:	4b06      	ldr	r3, [pc, #24]	; (80095ec <SystemInit+0x60>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80095d6:	4b04      	ldr	r3, [pc, #16]	; (80095e8 <SystemInit+0x5c>)
 80095d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80095dc:	609a      	str	r2, [r3, #8]
#endif
}
 80095de:	bf00      	nop
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	e000ed00 	.word	0xe000ed00
 80095ec:	40023800 	.word	0x40023800
 80095f0:	fef6ffff 	.word	0xfef6ffff
 80095f4:	24003010 	.word	0x24003010

080095f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80095f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009630 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80095fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80095fe:	e003      	b.n	8009608 <LoopCopyDataInit>

08009600 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009600:	4b0c      	ldr	r3, [pc, #48]	; (8009634 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009602:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009604:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009606:	3104      	adds	r1, #4

08009608 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009608:	480b      	ldr	r0, [pc, #44]	; (8009638 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800960a:	4b0c      	ldr	r3, [pc, #48]	; (800963c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800960c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800960e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009610:	d3f6      	bcc.n	8009600 <CopyDataInit>
  ldr  r2, =_sbss
 8009612:	4a0b      	ldr	r2, [pc, #44]	; (8009640 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009614:	e002      	b.n	800961c <LoopFillZerobss>

08009616 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009616:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009618:	f842 3b04 	str.w	r3, [r2], #4

0800961c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800961c:	4b09      	ldr	r3, [pc, #36]	; (8009644 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800961e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009620:	d3f9      	bcc.n	8009616 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009622:	f7ff ffb3 	bl	800958c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009626:	f000 f817 	bl	8009658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800962a:	f7fe fe73 	bl	8008314 <main>
  bx  lr    
 800962e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009630:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 8009634:	0800c888 	.word	0x0800c888
  ldr  r0, =_sdata
 8009638:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800963c:	200000c8 	.word	0x200000c8
  ldr  r2, =_sbss
 8009640:	200000c8 	.word	0x200000c8
  ldr  r3, = _ebss
 8009644:	20000794 	.word	0x20000794

08009648 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009648:	e7fe      	b.n	8009648 <CAN1_RX0_IRQHandler>
	...

0800964c <__errno>:
 800964c:	4b01      	ldr	r3, [pc, #4]	; (8009654 <__errno+0x8>)
 800964e:	6818      	ldr	r0, [r3, #0]
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	20000064 	.word	0x20000064

08009658 <__libc_init_array>:
 8009658:	b570      	push	{r4, r5, r6, lr}
 800965a:	4e0d      	ldr	r6, [pc, #52]	; (8009690 <__libc_init_array+0x38>)
 800965c:	4c0d      	ldr	r4, [pc, #52]	; (8009694 <__libc_init_array+0x3c>)
 800965e:	1ba4      	subs	r4, r4, r6
 8009660:	10a4      	asrs	r4, r4, #2
 8009662:	2500      	movs	r5, #0
 8009664:	42a5      	cmp	r5, r4
 8009666:	d109      	bne.n	800967c <__libc_init_array+0x24>
 8009668:	4e0b      	ldr	r6, [pc, #44]	; (8009698 <__libc_init_array+0x40>)
 800966a:	4c0c      	ldr	r4, [pc, #48]	; (800969c <__libc_init_array+0x44>)
 800966c:	f000 fc26 	bl	8009ebc <_init>
 8009670:	1ba4      	subs	r4, r4, r6
 8009672:	10a4      	asrs	r4, r4, #2
 8009674:	2500      	movs	r5, #0
 8009676:	42a5      	cmp	r5, r4
 8009678:	d105      	bne.n	8009686 <__libc_init_array+0x2e>
 800967a:	bd70      	pop	{r4, r5, r6, pc}
 800967c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009680:	4798      	blx	r3
 8009682:	3501      	adds	r5, #1
 8009684:	e7ee      	b.n	8009664 <__libc_init_array+0xc>
 8009686:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800968a:	4798      	blx	r3
 800968c:	3501      	adds	r5, #1
 800968e:	e7f2      	b.n	8009676 <__libc_init_array+0x1e>
 8009690:	0800c880 	.word	0x0800c880
 8009694:	0800c880 	.word	0x0800c880
 8009698:	0800c880 	.word	0x0800c880
 800969c:	0800c884 	.word	0x0800c884

080096a0 <memset>:
 80096a0:	4402      	add	r2, r0
 80096a2:	4603      	mov	r3, r0
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d100      	bne.n	80096aa <memset+0xa>
 80096a8:	4770      	bx	lr
 80096aa:	f803 1b01 	strb.w	r1, [r3], #1
 80096ae:	e7f9      	b.n	80096a4 <memset+0x4>

080096b0 <siprintf>:
 80096b0:	b40e      	push	{r1, r2, r3}
 80096b2:	b500      	push	{lr}
 80096b4:	b09c      	sub	sp, #112	; 0x70
 80096b6:	ab1d      	add	r3, sp, #116	; 0x74
 80096b8:	9002      	str	r0, [sp, #8]
 80096ba:	9006      	str	r0, [sp, #24]
 80096bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096c0:	4809      	ldr	r0, [pc, #36]	; (80096e8 <siprintf+0x38>)
 80096c2:	9107      	str	r1, [sp, #28]
 80096c4:	9104      	str	r1, [sp, #16]
 80096c6:	4909      	ldr	r1, [pc, #36]	; (80096ec <siprintf+0x3c>)
 80096c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80096cc:	9105      	str	r1, [sp, #20]
 80096ce:	6800      	ldr	r0, [r0, #0]
 80096d0:	9301      	str	r3, [sp, #4]
 80096d2:	a902      	add	r1, sp, #8
 80096d4:	f000 f866 	bl	80097a4 <_svfiprintf_r>
 80096d8:	9b02      	ldr	r3, [sp, #8]
 80096da:	2200      	movs	r2, #0
 80096dc:	701a      	strb	r2, [r3, #0]
 80096de:	b01c      	add	sp, #112	; 0x70
 80096e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096e4:	b003      	add	sp, #12
 80096e6:	4770      	bx	lr
 80096e8:	20000064 	.word	0x20000064
 80096ec:	ffff0208 	.word	0xffff0208

080096f0 <__ssputs_r>:
 80096f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f4:	688e      	ldr	r6, [r1, #8]
 80096f6:	429e      	cmp	r6, r3
 80096f8:	4682      	mov	sl, r0
 80096fa:	460c      	mov	r4, r1
 80096fc:	4690      	mov	r8, r2
 80096fe:	4699      	mov	r9, r3
 8009700:	d837      	bhi.n	8009772 <__ssputs_r+0x82>
 8009702:	898a      	ldrh	r2, [r1, #12]
 8009704:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009708:	d031      	beq.n	800976e <__ssputs_r+0x7e>
 800970a:	6825      	ldr	r5, [r4, #0]
 800970c:	6909      	ldr	r1, [r1, #16]
 800970e:	1a6f      	subs	r7, r5, r1
 8009710:	6965      	ldr	r5, [r4, #20]
 8009712:	2302      	movs	r3, #2
 8009714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009718:	fb95 f5f3 	sdiv	r5, r5, r3
 800971c:	f109 0301 	add.w	r3, r9, #1
 8009720:	443b      	add	r3, r7
 8009722:	429d      	cmp	r5, r3
 8009724:	bf38      	it	cc
 8009726:	461d      	movcc	r5, r3
 8009728:	0553      	lsls	r3, r2, #21
 800972a:	d530      	bpl.n	800978e <__ssputs_r+0x9e>
 800972c:	4629      	mov	r1, r5
 800972e:	f000 fb2b 	bl	8009d88 <_malloc_r>
 8009732:	4606      	mov	r6, r0
 8009734:	b950      	cbnz	r0, 800974c <__ssputs_r+0x5c>
 8009736:	230c      	movs	r3, #12
 8009738:	f8ca 3000 	str.w	r3, [sl]
 800973c:	89a3      	ldrh	r3, [r4, #12]
 800973e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009742:	81a3      	strh	r3, [r4, #12]
 8009744:	f04f 30ff 	mov.w	r0, #4294967295
 8009748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800974c:	463a      	mov	r2, r7
 800974e:	6921      	ldr	r1, [r4, #16]
 8009750:	f000 faa8 	bl	8009ca4 <memcpy>
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800975a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800975e:	81a3      	strh	r3, [r4, #12]
 8009760:	6126      	str	r6, [r4, #16]
 8009762:	6165      	str	r5, [r4, #20]
 8009764:	443e      	add	r6, r7
 8009766:	1bed      	subs	r5, r5, r7
 8009768:	6026      	str	r6, [r4, #0]
 800976a:	60a5      	str	r5, [r4, #8]
 800976c:	464e      	mov	r6, r9
 800976e:	454e      	cmp	r6, r9
 8009770:	d900      	bls.n	8009774 <__ssputs_r+0x84>
 8009772:	464e      	mov	r6, r9
 8009774:	4632      	mov	r2, r6
 8009776:	4641      	mov	r1, r8
 8009778:	6820      	ldr	r0, [r4, #0]
 800977a:	f000 fa9e 	bl	8009cba <memmove>
 800977e:	68a3      	ldr	r3, [r4, #8]
 8009780:	1b9b      	subs	r3, r3, r6
 8009782:	60a3      	str	r3, [r4, #8]
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	441e      	add	r6, r3
 8009788:	6026      	str	r6, [r4, #0]
 800978a:	2000      	movs	r0, #0
 800978c:	e7dc      	b.n	8009748 <__ssputs_r+0x58>
 800978e:	462a      	mov	r2, r5
 8009790:	f000 fb54 	bl	8009e3c <_realloc_r>
 8009794:	4606      	mov	r6, r0
 8009796:	2800      	cmp	r0, #0
 8009798:	d1e2      	bne.n	8009760 <__ssputs_r+0x70>
 800979a:	6921      	ldr	r1, [r4, #16]
 800979c:	4650      	mov	r0, sl
 800979e:	f000 faa5 	bl	8009cec <_free_r>
 80097a2:	e7c8      	b.n	8009736 <__ssputs_r+0x46>

080097a4 <_svfiprintf_r>:
 80097a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	461d      	mov	r5, r3
 80097aa:	898b      	ldrh	r3, [r1, #12]
 80097ac:	061f      	lsls	r7, r3, #24
 80097ae:	b09d      	sub	sp, #116	; 0x74
 80097b0:	4680      	mov	r8, r0
 80097b2:	460c      	mov	r4, r1
 80097b4:	4616      	mov	r6, r2
 80097b6:	d50f      	bpl.n	80097d8 <_svfiprintf_r+0x34>
 80097b8:	690b      	ldr	r3, [r1, #16]
 80097ba:	b96b      	cbnz	r3, 80097d8 <_svfiprintf_r+0x34>
 80097bc:	2140      	movs	r1, #64	; 0x40
 80097be:	f000 fae3 	bl	8009d88 <_malloc_r>
 80097c2:	6020      	str	r0, [r4, #0]
 80097c4:	6120      	str	r0, [r4, #16]
 80097c6:	b928      	cbnz	r0, 80097d4 <_svfiprintf_r+0x30>
 80097c8:	230c      	movs	r3, #12
 80097ca:	f8c8 3000 	str.w	r3, [r8]
 80097ce:	f04f 30ff 	mov.w	r0, #4294967295
 80097d2:	e0c8      	b.n	8009966 <_svfiprintf_r+0x1c2>
 80097d4:	2340      	movs	r3, #64	; 0x40
 80097d6:	6163      	str	r3, [r4, #20]
 80097d8:	2300      	movs	r3, #0
 80097da:	9309      	str	r3, [sp, #36]	; 0x24
 80097dc:	2320      	movs	r3, #32
 80097de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097e2:	2330      	movs	r3, #48	; 0x30
 80097e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097e8:	9503      	str	r5, [sp, #12]
 80097ea:	f04f 0b01 	mov.w	fp, #1
 80097ee:	4637      	mov	r7, r6
 80097f0:	463d      	mov	r5, r7
 80097f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80097f6:	b10b      	cbz	r3, 80097fc <_svfiprintf_r+0x58>
 80097f8:	2b25      	cmp	r3, #37	; 0x25
 80097fa:	d13e      	bne.n	800987a <_svfiprintf_r+0xd6>
 80097fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8009800:	d00b      	beq.n	800981a <_svfiprintf_r+0x76>
 8009802:	4653      	mov	r3, sl
 8009804:	4632      	mov	r2, r6
 8009806:	4621      	mov	r1, r4
 8009808:	4640      	mov	r0, r8
 800980a:	f7ff ff71 	bl	80096f0 <__ssputs_r>
 800980e:	3001      	adds	r0, #1
 8009810:	f000 80a4 	beq.w	800995c <_svfiprintf_r+0x1b8>
 8009814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009816:	4453      	add	r3, sl
 8009818:	9309      	str	r3, [sp, #36]	; 0x24
 800981a:	783b      	ldrb	r3, [r7, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 809d 	beq.w	800995c <_svfiprintf_r+0x1b8>
 8009822:	2300      	movs	r3, #0
 8009824:	f04f 32ff 	mov.w	r2, #4294967295
 8009828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800982c:	9304      	str	r3, [sp, #16]
 800982e:	9307      	str	r3, [sp, #28]
 8009830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009834:	931a      	str	r3, [sp, #104]	; 0x68
 8009836:	462f      	mov	r7, r5
 8009838:	2205      	movs	r2, #5
 800983a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800983e:	4850      	ldr	r0, [pc, #320]	; (8009980 <_svfiprintf_r+0x1dc>)
 8009840:	f7f6 fcfe 	bl	8000240 <memchr>
 8009844:	9b04      	ldr	r3, [sp, #16]
 8009846:	b9d0      	cbnz	r0, 800987e <_svfiprintf_r+0xda>
 8009848:	06d9      	lsls	r1, r3, #27
 800984a:	bf44      	itt	mi
 800984c:	2220      	movmi	r2, #32
 800984e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009852:	071a      	lsls	r2, r3, #28
 8009854:	bf44      	itt	mi
 8009856:	222b      	movmi	r2, #43	; 0x2b
 8009858:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800985c:	782a      	ldrb	r2, [r5, #0]
 800985e:	2a2a      	cmp	r2, #42	; 0x2a
 8009860:	d015      	beq.n	800988e <_svfiprintf_r+0xea>
 8009862:	9a07      	ldr	r2, [sp, #28]
 8009864:	462f      	mov	r7, r5
 8009866:	2000      	movs	r0, #0
 8009868:	250a      	movs	r5, #10
 800986a:	4639      	mov	r1, r7
 800986c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009870:	3b30      	subs	r3, #48	; 0x30
 8009872:	2b09      	cmp	r3, #9
 8009874:	d94d      	bls.n	8009912 <_svfiprintf_r+0x16e>
 8009876:	b1b8      	cbz	r0, 80098a8 <_svfiprintf_r+0x104>
 8009878:	e00f      	b.n	800989a <_svfiprintf_r+0xf6>
 800987a:	462f      	mov	r7, r5
 800987c:	e7b8      	b.n	80097f0 <_svfiprintf_r+0x4c>
 800987e:	4a40      	ldr	r2, [pc, #256]	; (8009980 <_svfiprintf_r+0x1dc>)
 8009880:	1a80      	subs	r0, r0, r2
 8009882:	fa0b f000 	lsl.w	r0, fp, r0
 8009886:	4318      	orrs	r0, r3
 8009888:	9004      	str	r0, [sp, #16]
 800988a:	463d      	mov	r5, r7
 800988c:	e7d3      	b.n	8009836 <_svfiprintf_r+0x92>
 800988e:	9a03      	ldr	r2, [sp, #12]
 8009890:	1d11      	adds	r1, r2, #4
 8009892:	6812      	ldr	r2, [r2, #0]
 8009894:	9103      	str	r1, [sp, #12]
 8009896:	2a00      	cmp	r2, #0
 8009898:	db01      	blt.n	800989e <_svfiprintf_r+0xfa>
 800989a:	9207      	str	r2, [sp, #28]
 800989c:	e004      	b.n	80098a8 <_svfiprintf_r+0x104>
 800989e:	4252      	negs	r2, r2
 80098a0:	f043 0302 	orr.w	r3, r3, #2
 80098a4:	9207      	str	r2, [sp, #28]
 80098a6:	9304      	str	r3, [sp, #16]
 80098a8:	783b      	ldrb	r3, [r7, #0]
 80098aa:	2b2e      	cmp	r3, #46	; 0x2e
 80098ac:	d10c      	bne.n	80098c8 <_svfiprintf_r+0x124>
 80098ae:	787b      	ldrb	r3, [r7, #1]
 80098b0:	2b2a      	cmp	r3, #42	; 0x2a
 80098b2:	d133      	bne.n	800991c <_svfiprintf_r+0x178>
 80098b4:	9b03      	ldr	r3, [sp, #12]
 80098b6:	1d1a      	adds	r2, r3, #4
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	9203      	str	r2, [sp, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	bfb8      	it	lt
 80098c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80098c4:	3702      	adds	r7, #2
 80098c6:	9305      	str	r3, [sp, #20]
 80098c8:	4d2e      	ldr	r5, [pc, #184]	; (8009984 <_svfiprintf_r+0x1e0>)
 80098ca:	7839      	ldrb	r1, [r7, #0]
 80098cc:	2203      	movs	r2, #3
 80098ce:	4628      	mov	r0, r5
 80098d0:	f7f6 fcb6 	bl	8000240 <memchr>
 80098d4:	b138      	cbz	r0, 80098e6 <_svfiprintf_r+0x142>
 80098d6:	2340      	movs	r3, #64	; 0x40
 80098d8:	1b40      	subs	r0, r0, r5
 80098da:	fa03 f000 	lsl.w	r0, r3, r0
 80098de:	9b04      	ldr	r3, [sp, #16]
 80098e0:	4303      	orrs	r3, r0
 80098e2:	3701      	adds	r7, #1
 80098e4:	9304      	str	r3, [sp, #16]
 80098e6:	7839      	ldrb	r1, [r7, #0]
 80098e8:	4827      	ldr	r0, [pc, #156]	; (8009988 <_svfiprintf_r+0x1e4>)
 80098ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098ee:	2206      	movs	r2, #6
 80098f0:	1c7e      	adds	r6, r7, #1
 80098f2:	f7f6 fca5 	bl	8000240 <memchr>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d038      	beq.n	800996c <_svfiprintf_r+0x1c8>
 80098fa:	4b24      	ldr	r3, [pc, #144]	; (800998c <_svfiprintf_r+0x1e8>)
 80098fc:	bb13      	cbnz	r3, 8009944 <_svfiprintf_r+0x1a0>
 80098fe:	9b03      	ldr	r3, [sp, #12]
 8009900:	3307      	adds	r3, #7
 8009902:	f023 0307 	bic.w	r3, r3, #7
 8009906:	3308      	adds	r3, #8
 8009908:	9303      	str	r3, [sp, #12]
 800990a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800990c:	444b      	add	r3, r9
 800990e:	9309      	str	r3, [sp, #36]	; 0x24
 8009910:	e76d      	b.n	80097ee <_svfiprintf_r+0x4a>
 8009912:	fb05 3202 	mla	r2, r5, r2, r3
 8009916:	2001      	movs	r0, #1
 8009918:	460f      	mov	r7, r1
 800991a:	e7a6      	b.n	800986a <_svfiprintf_r+0xc6>
 800991c:	2300      	movs	r3, #0
 800991e:	3701      	adds	r7, #1
 8009920:	9305      	str	r3, [sp, #20]
 8009922:	4619      	mov	r1, r3
 8009924:	250a      	movs	r5, #10
 8009926:	4638      	mov	r0, r7
 8009928:	f810 2b01 	ldrb.w	r2, [r0], #1
 800992c:	3a30      	subs	r2, #48	; 0x30
 800992e:	2a09      	cmp	r2, #9
 8009930:	d903      	bls.n	800993a <_svfiprintf_r+0x196>
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0c8      	beq.n	80098c8 <_svfiprintf_r+0x124>
 8009936:	9105      	str	r1, [sp, #20]
 8009938:	e7c6      	b.n	80098c8 <_svfiprintf_r+0x124>
 800993a:	fb05 2101 	mla	r1, r5, r1, r2
 800993e:	2301      	movs	r3, #1
 8009940:	4607      	mov	r7, r0
 8009942:	e7f0      	b.n	8009926 <_svfiprintf_r+0x182>
 8009944:	ab03      	add	r3, sp, #12
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	4622      	mov	r2, r4
 800994a:	4b11      	ldr	r3, [pc, #68]	; (8009990 <_svfiprintf_r+0x1ec>)
 800994c:	a904      	add	r1, sp, #16
 800994e:	4640      	mov	r0, r8
 8009950:	f3af 8000 	nop.w
 8009954:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009958:	4681      	mov	r9, r0
 800995a:	d1d6      	bne.n	800990a <_svfiprintf_r+0x166>
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	065b      	lsls	r3, r3, #25
 8009960:	f53f af35 	bmi.w	80097ce <_svfiprintf_r+0x2a>
 8009964:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009966:	b01d      	add	sp, #116	; 0x74
 8009968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996c:	ab03      	add	r3, sp, #12
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	4622      	mov	r2, r4
 8009972:	4b07      	ldr	r3, [pc, #28]	; (8009990 <_svfiprintf_r+0x1ec>)
 8009974:	a904      	add	r1, sp, #16
 8009976:	4640      	mov	r0, r8
 8009978:	f000 f882 	bl	8009a80 <_printf_i>
 800997c:	e7ea      	b.n	8009954 <_svfiprintf_r+0x1b0>
 800997e:	bf00      	nop
 8009980:	0800c844 	.word	0x0800c844
 8009984:	0800c84a 	.word	0x0800c84a
 8009988:	0800c84e 	.word	0x0800c84e
 800998c:	00000000 	.word	0x00000000
 8009990:	080096f1 	.word	0x080096f1

08009994 <_printf_common>:
 8009994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009998:	4691      	mov	r9, r2
 800999a:	461f      	mov	r7, r3
 800999c:	688a      	ldr	r2, [r1, #8]
 800999e:	690b      	ldr	r3, [r1, #16]
 80099a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099a4:	4293      	cmp	r3, r2
 80099a6:	bfb8      	it	lt
 80099a8:	4613      	movlt	r3, r2
 80099aa:	f8c9 3000 	str.w	r3, [r9]
 80099ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099b2:	4606      	mov	r6, r0
 80099b4:	460c      	mov	r4, r1
 80099b6:	b112      	cbz	r2, 80099be <_printf_common+0x2a>
 80099b8:	3301      	adds	r3, #1
 80099ba:	f8c9 3000 	str.w	r3, [r9]
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	0699      	lsls	r1, r3, #26
 80099c2:	bf42      	ittt	mi
 80099c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80099c8:	3302      	addmi	r3, #2
 80099ca:	f8c9 3000 	strmi.w	r3, [r9]
 80099ce:	6825      	ldr	r5, [r4, #0]
 80099d0:	f015 0506 	ands.w	r5, r5, #6
 80099d4:	d107      	bne.n	80099e6 <_printf_common+0x52>
 80099d6:	f104 0a19 	add.w	sl, r4, #25
 80099da:	68e3      	ldr	r3, [r4, #12]
 80099dc:	f8d9 2000 	ldr.w	r2, [r9]
 80099e0:	1a9b      	subs	r3, r3, r2
 80099e2:	42ab      	cmp	r3, r5
 80099e4:	dc28      	bgt.n	8009a38 <_printf_common+0xa4>
 80099e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80099ea:	6822      	ldr	r2, [r4, #0]
 80099ec:	3300      	adds	r3, #0
 80099ee:	bf18      	it	ne
 80099f0:	2301      	movne	r3, #1
 80099f2:	0692      	lsls	r2, r2, #26
 80099f4:	d42d      	bmi.n	8009a52 <_printf_common+0xbe>
 80099f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099fa:	4639      	mov	r1, r7
 80099fc:	4630      	mov	r0, r6
 80099fe:	47c0      	blx	r8
 8009a00:	3001      	adds	r0, #1
 8009a02:	d020      	beq.n	8009a46 <_printf_common+0xb2>
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	68e5      	ldr	r5, [r4, #12]
 8009a08:	f8d9 2000 	ldr.w	r2, [r9]
 8009a0c:	f003 0306 	and.w	r3, r3, #6
 8009a10:	2b04      	cmp	r3, #4
 8009a12:	bf08      	it	eq
 8009a14:	1aad      	subeq	r5, r5, r2
 8009a16:	68a3      	ldr	r3, [r4, #8]
 8009a18:	6922      	ldr	r2, [r4, #16]
 8009a1a:	bf0c      	ite	eq
 8009a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a20:	2500      	movne	r5, #0
 8009a22:	4293      	cmp	r3, r2
 8009a24:	bfc4      	itt	gt
 8009a26:	1a9b      	subgt	r3, r3, r2
 8009a28:	18ed      	addgt	r5, r5, r3
 8009a2a:	f04f 0900 	mov.w	r9, #0
 8009a2e:	341a      	adds	r4, #26
 8009a30:	454d      	cmp	r5, r9
 8009a32:	d11a      	bne.n	8009a6a <_printf_common+0xd6>
 8009a34:	2000      	movs	r0, #0
 8009a36:	e008      	b.n	8009a4a <_printf_common+0xb6>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	4652      	mov	r2, sl
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	4630      	mov	r0, r6
 8009a40:	47c0      	blx	r8
 8009a42:	3001      	adds	r0, #1
 8009a44:	d103      	bne.n	8009a4e <_printf_common+0xba>
 8009a46:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a4e:	3501      	adds	r5, #1
 8009a50:	e7c3      	b.n	80099da <_printf_common+0x46>
 8009a52:	18e1      	adds	r1, r4, r3
 8009a54:	1c5a      	adds	r2, r3, #1
 8009a56:	2030      	movs	r0, #48	; 0x30
 8009a58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a5c:	4422      	add	r2, r4
 8009a5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a66:	3302      	adds	r3, #2
 8009a68:	e7c5      	b.n	80099f6 <_printf_common+0x62>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	4622      	mov	r2, r4
 8009a6e:	4639      	mov	r1, r7
 8009a70:	4630      	mov	r0, r6
 8009a72:	47c0      	blx	r8
 8009a74:	3001      	adds	r0, #1
 8009a76:	d0e6      	beq.n	8009a46 <_printf_common+0xb2>
 8009a78:	f109 0901 	add.w	r9, r9, #1
 8009a7c:	e7d8      	b.n	8009a30 <_printf_common+0x9c>
	...

08009a80 <_printf_i>:
 8009a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a84:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009a88:	460c      	mov	r4, r1
 8009a8a:	7e09      	ldrb	r1, [r1, #24]
 8009a8c:	b085      	sub	sp, #20
 8009a8e:	296e      	cmp	r1, #110	; 0x6e
 8009a90:	4617      	mov	r7, r2
 8009a92:	4606      	mov	r6, r0
 8009a94:	4698      	mov	r8, r3
 8009a96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a98:	f000 80b3 	beq.w	8009c02 <_printf_i+0x182>
 8009a9c:	d822      	bhi.n	8009ae4 <_printf_i+0x64>
 8009a9e:	2963      	cmp	r1, #99	; 0x63
 8009aa0:	d036      	beq.n	8009b10 <_printf_i+0x90>
 8009aa2:	d80a      	bhi.n	8009aba <_printf_i+0x3a>
 8009aa4:	2900      	cmp	r1, #0
 8009aa6:	f000 80b9 	beq.w	8009c1c <_printf_i+0x19c>
 8009aaa:	2958      	cmp	r1, #88	; 0x58
 8009aac:	f000 8083 	beq.w	8009bb6 <_printf_i+0x136>
 8009ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ab4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009ab8:	e032      	b.n	8009b20 <_printf_i+0xa0>
 8009aba:	2964      	cmp	r1, #100	; 0x64
 8009abc:	d001      	beq.n	8009ac2 <_printf_i+0x42>
 8009abe:	2969      	cmp	r1, #105	; 0x69
 8009ac0:	d1f6      	bne.n	8009ab0 <_printf_i+0x30>
 8009ac2:	6820      	ldr	r0, [r4, #0]
 8009ac4:	6813      	ldr	r3, [r2, #0]
 8009ac6:	0605      	lsls	r5, r0, #24
 8009ac8:	f103 0104 	add.w	r1, r3, #4
 8009acc:	d52a      	bpl.n	8009b24 <_printf_i+0xa4>
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6011      	str	r1, [r2, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	da03      	bge.n	8009ade <_printf_i+0x5e>
 8009ad6:	222d      	movs	r2, #45	; 0x2d
 8009ad8:	425b      	negs	r3, r3
 8009ada:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009ade:	486f      	ldr	r0, [pc, #444]	; (8009c9c <_printf_i+0x21c>)
 8009ae0:	220a      	movs	r2, #10
 8009ae2:	e039      	b.n	8009b58 <_printf_i+0xd8>
 8009ae4:	2973      	cmp	r1, #115	; 0x73
 8009ae6:	f000 809d 	beq.w	8009c24 <_printf_i+0x1a4>
 8009aea:	d808      	bhi.n	8009afe <_printf_i+0x7e>
 8009aec:	296f      	cmp	r1, #111	; 0x6f
 8009aee:	d020      	beq.n	8009b32 <_printf_i+0xb2>
 8009af0:	2970      	cmp	r1, #112	; 0x70
 8009af2:	d1dd      	bne.n	8009ab0 <_printf_i+0x30>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	f043 0320 	orr.w	r3, r3, #32
 8009afa:	6023      	str	r3, [r4, #0]
 8009afc:	e003      	b.n	8009b06 <_printf_i+0x86>
 8009afe:	2975      	cmp	r1, #117	; 0x75
 8009b00:	d017      	beq.n	8009b32 <_printf_i+0xb2>
 8009b02:	2978      	cmp	r1, #120	; 0x78
 8009b04:	d1d4      	bne.n	8009ab0 <_printf_i+0x30>
 8009b06:	2378      	movs	r3, #120	; 0x78
 8009b08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b0c:	4864      	ldr	r0, [pc, #400]	; (8009ca0 <_printf_i+0x220>)
 8009b0e:	e055      	b.n	8009bbc <_printf_i+0x13c>
 8009b10:	6813      	ldr	r3, [r2, #0]
 8009b12:	1d19      	adds	r1, r3, #4
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6011      	str	r1, [r2, #0]
 8009b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b20:	2301      	movs	r3, #1
 8009b22:	e08c      	b.n	8009c3e <_printf_i+0x1be>
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6011      	str	r1, [r2, #0]
 8009b28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b2c:	bf18      	it	ne
 8009b2e:	b21b      	sxthne	r3, r3
 8009b30:	e7cf      	b.n	8009ad2 <_printf_i+0x52>
 8009b32:	6813      	ldr	r3, [r2, #0]
 8009b34:	6825      	ldr	r5, [r4, #0]
 8009b36:	1d18      	adds	r0, r3, #4
 8009b38:	6010      	str	r0, [r2, #0]
 8009b3a:	0628      	lsls	r0, r5, #24
 8009b3c:	d501      	bpl.n	8009b42 <_printf_i+0xc2>
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	e002      	b.n	8009b48 <_printf_i+0xc8>
 8009b42:	0668      	lsls	r0, r5, #25
 8009b44:	d5fb      	bpl.n	8009b3e <_printf_i+0xbe>
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	4854      	ldr	r0, [pc, #336]	; (8009c9c <_printf_i+0x21c>)
 8009b4a:	296f      	cmp	r1, #111	; 0x6f
 8009b4c:	bf14      	ite	ne
 8009b4e:	220a      	movne	r2, #10
 8009b50:	2208      	moveq	r2, #8
 8009b52:	2100      	movs	r1, #0
 8009b54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b58:	6865      	ldr	r5, [r4, #4]
 8009b5a:	60a5      	str	r5, [r4, #8]
 8009b5c:	2d00      	cmp	r5, #0
 8009b5e:	f2c0 8095 	blt.w	8009c8c <_printf_i+0x20c>
 8009b62:	6821      	ldr	r1, [r4, #0]
 8009b64:	f021 0104 	bic.w	r1, r1, #4
 8009b68:	6021      	str	r1, [r4, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d13d      	bne.n	8009bea <_printf_i+0x16a>
 8009b6e:	2d00      	cmp	r5, #0
 8009b70:	f040 808e 	bne.w	8009c90 <_printf_i+0x210>
 8009b74:	4665      	mov	r5, ip
 8009b76:	2a08      	cmp	r2, #8
 8009b78:	d10b      	bne.n	8009b92 <_printf_i+0x112>
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	07db      	lsls	r3, r3, #31
 8009b7e:	d508      	bpl.n	8009b92 <_printf_i+0x112>
 8009b80:	6923      	ldr	r3, [r4, #16]
 8009b82:	6862      	ldr	r2, [r4, #4]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	bfde      	ittt	le
 8009b88:	2330      	movle	r3, #48	; 0x30
 8009b8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b92:	ebac 0305 	sub.w	r3, ip, r5
 8009b96:	6123      	str	r3, [r4, #16]
 8009b98:	f8cd 8000 	str.w	r8, [sp]
 8009b9c:	463b      	mov	r3, r7
 8009b9e:	aa03      	add	r2, sp, #12
 8009ba0:	4621      	mov	r1, r4
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	f7ff fef6 	bl	8009994 <_printf_common>
 8009ba8:	3001      	adds	r0, #1
 8009baa:	d14d      	bne.n	8009c48 <_printf_i+0x1c8>
 8009bac:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb0:	b005      	add	sp, #20
 8009bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bb6:	4839      	ldr	r0, [pc, #228]	; (8009c9c <_printf_i+0x21c>)
 8009bb8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009bbc:	6813      	ldr	r3, [r2, #0]
 8009bbe:	6821      	ldr	r1, [r4, #0]
 8009bc0:	1d1d      	adds	r5, r3, #4
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6015      	str	r5, [r2, #0]
 8009bc6:	060a      	lsls	r2, r1, #24
 8009bc8:	d50b      	bpl.n	8009be2 <_printf_i+0x162>
 8009bca:	07ca      	lsls	r2, r1, #31
 8009bcc:	bf44      	itt	mi
 8009bce:	f041 0120 	orrmi.w	r1, r1, #32
 8009bd2:	6021      	strmi	r1, [r4, #0]
 8009bd4:	b91b      	cbnz	r3, 8009bde <_printf_i+0x15e>
 8009bd6:	6822      	ldr	r2, [r4, #0]
 8009bd8:	f022 0220 	bic.w	r2, r2, #32
 8009bdc:	6022      	str	r2, [r4, #0]
 8009bde:	2210      	movs	r2, #16
 8009be0:	e7b7      	b.n	8009b52 <_printf_i+0xd2>
 8009be2:	064d      	lsls	r5, r1, #25
 8009be4:	bf48      	it	mi
 8009be6:	b29b      	uxthmi	r3, r3
 8009be8:	e7ef      	b.n	8009bca <_printf_i+0x14a>
 8009bea:	4665      	mov	r5, ip
 8009bec:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bf0:	fb02 3311 	mls	r3, r2, r1, r3
 8009bf4:	5cc3      	ldrb	r3, [r0, r3]
 8009bf6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	2900      	cmp	r1, #0
 8009bfe:	d1f5      	bne.n	8009bec <_printf_i+0x16c>
 8009c00:	e7b9      	b.n	8009b76 <_printf_i+0xf6>
 8009c02:	6813      	ldr	r3, [r2, #0]
 8009c04:	6825      	ldr	r5, [r4, #0]
 8009c06:	6961      	ldr	r1, [r4, #20]
 8009c08:	1d18      	adds	r0, r3, #4
 8009c0a:	6010      	str	r0, [r2, #0]
 8009c0c:	0628      	lsls	r0, r5, #24
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	d501      	bpl.n	8009c16 <_printf_i+0x196>
 8009c12:	6019      	str	r1, [r3, #0]
 8009c14:	e002      	b.n	8009c1c <_printf_i+0x19c>
 8009c16:	066a      	lsls	r2, r5, #25
 8009c18:	d5fb      	bpl.n	8009c12 <_printf_i+0x192>
 8009c1a:	8019      	strh	r1, [r3, #0]
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	6123      	str	r3, [r4, #16]
 8009c20:	4665      	mov	r5, ip
 8009c22:	e7b9      	b.n	8009b98 <_printf_i+0x118>
 8009c24:	6813      	ldr	r3, [r2, #0]
 8009c26:	1d19      	adds	r1, r3, #4
 8009c28:	6011      	str	r1, [r2, #0]
 8009c2a:	681d      	ldr	r5, [r3, #0]
 8009c2c:	6862      	ldr	r2, [r4, #4]
 8009c2e:	2100      	movs	r1, #0
 8009c30:	4628      	mov	r0, r5
 8009c32:	f7f6 fb05 	bl	8000240 <memchr>
 8009c36:	b108      	cbz	r0, 8009c3c <_printf_i+0x1bc>
 8009c38:	1b40      	subs	r0, r0, r5
 8009c3a:	6060      	str	r0, [r4, #4]
 8009c3c:	6863      	ldr	r3, [r4, #4]
 8009c3e:	6123      	str	r3, [r4, #16]
 8009c40:	2300      	movs	r3, #0
 8009c42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c46:	e7a7      	b.n	8009b98 <_printf_i+0x118>
 8009c48:	6923      	ldr	r3, [r4, #16]
 8009c4a:	462a      	mov	r2, r5
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	4630      	mov	r0, r6
 8009c50:	47c0      	blx	r8
 8009c52:	3001      	adds	r0, #1
 8009c54:	d0aa      	beq.n	8009bac <_printf_i+0x12c>
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	079b      	lsls	r3, r3, #30
 8009c5a:	d413      	bmi.n	8009c84 <_printf_i+0x204>
 8009c5c:	68e0      	ldr	r0, [r4, #12]
 8009c5e:	9b03      	ldr	r3, [sp, #12]
 8009c60:	4298      	cmp	r0, r3
 8009c62:	bfb8      	it	lt
 8009c64:	4618      	movlt	r0, r3
 8009c66:	e7a3      	b.n	8009bb0 <_printf_i+0x130>
 8009c68:	2301      	movs	r3, #1
 8009c6a:	464a      	mov	r2, r9
 8009c6c:	4639      	mov	r1, r7
 8009c6e:	4630      	mov	r0, r6
 8009c70:	47c0      	blx	r8
 8009c72:	3001      	adds	r0, #1
 8009c74:	d09a      	beq.n	8009bac <_printf_i+0x12c>
 8009c76:	3501      	adds	r5, #1
 8009c78:	68e3      	ldr	r3, [r4, #12]
 8009c7a:	9a03      	ldr	r2, [sp, #12]
 8009c7c:	1a9b      	subs	r3, r3, r2
 8009c7e:	42ab      	cmp	r3, r5
 8009c80:	dcf2      	bgt.n	8009c68 <_printf_i+0x1e8>
 8009c82:	e7eb      	b.n	8009c5c <_printf_i+0x1dc>
 8009c84:	2500      	movs	r5, #0
 8009c86:	f104 0919 	add.w	r9, r4, #25
 8009c8a:	e7f5      	b.n	8009c78 <_printf_i+0x1f8>
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1ac      	bne.n	8009bea <_printf_i+0x16a>
 8009c90:	7803      	ldrb	r3, [r0, #0]
 8009c92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c9a:	e76c      	b.n	8009b76 <_printf_i+0xf6>
 8009c9c:	0800c855 	.word	0x0800c855
 8009ca0:	0800c866 	.word	0x0800c866

08009ca4 <memcpy>:
 8009ca4:	b510      	push	{r4, lr}
 8009ca6:	1e43      	subs	r3, r0, #1
 8009ca8:	440a      	add	r2, r1
 8009caa:	4291      	cmp	r1, r2
 8009cac:	d100      	bne.n	8009cb0 <memcpy+0xc>
 8009cae:	bd10      	pop	{r4, pc}
 8009cb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cb8:	e7f7      	b.n	8009caa <memcpy+0x6>

08009cba <memmove>:
 8009cba:	4288      	cmp	r0, r1
 8009cbc:	b510      	push	{r4, lr}
 8009cbe:	eb01 0302 	add.w	r3, r1, r2
 8009cc2:	d807      	bhi.n	8009cd4 <memmove+0x1a>
 8009cc4:	1e42      	subs	r2, r0, #1
 8009cc6:	4299      	cmp	r1, r3
 8009cc8:	d00a      	beq.n	8009ce0 <memmove+0x26>
 8009cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cce:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009cd2:	e7f8      	b.n	8009cc6 <memmove+0xc>
 8009cd4:	4283      	cmp	r3, r0
 8009cd6:	d9f5      	bls.n	8009cc4 <memmove+0xa>
 8009cd8:	1881      	adds	r1, r0, r2
 8009cda:	1ad2      	subs	r2, r2, r3
 8009cdc:	42d3      	cmn	r3, r2
 8009cde:	d100      	bne.n	8009ce2 <memmove+0x28>
 8009ce0:	bd10      	pop	{r4, pc}
 8009ce2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ce6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009cea:	e7f7      	b.n	8009cdc <memmove+0x22>

08009cec <_free_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	4605      	mov	r5, r0
 8009cf0:	2900      	cmp	r1, #0
 8009cf2:	d045      	beq.n	8009d80 <_free_r+0x94>
 8009cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf8:	1f0c      	subs	r4, r1, #4
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	bfb8      	it	lt
 8009cfe:	18e4      	addlt	r4, r4, r3
 8009d00:	f000 f8d2 	bl	8009ea8 <__malloc_lock>
 8009d04:	4a1f      	ldr	r2, [pc, #124]	; (8009d84 <_free_r+0x98>)
 8009d06:	6813      	ldr	r3, [r2, #0]
 8009d08:	4610      	mov	r0, r2
 8009d0a:	b933      	cbnz	r3, 8009d1a <_free_r+0x2e>
 8009d0c:	6063      	str	r3, [r4, #4]
 8009d0e:	6014      	str	r4, [r2, #0]
 8009d10:	4628      	mov	r0, r5
 8009d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d16:	f000 b8c8 	b.w	8009eaa <__malloc_unlock>
 8009d1a:	42a3      	cmp	r3, r4
 8009d1c:	d90c      	bls.n	8009d38 <_free_r+0x4c>
 8009d1e:	6821      	ldr	r1, [r4, #0]
 8009d20:	1862      	adds	r2, r4, r1
 8009d22:	4293      	cmp	r3, r2
 8009d24:	bf04      	itt	eq
 8009d26:	681a      	ldreq	r2, [r3, #0]
 8009d28:	685b      	ldreq	r3, [r3, #4]
 8009d2a:	6063      	str	r3, [r4, #4]
 8009d2c:	bf04      	itt	eq
 8009d2e:	1852      	addeq	r2, r2, r1
 8009d30:	6022      	streq	r2, [r4, #0]
 8009d32:	6004      	str	r4, [r0, #0]
 8009d34:	e7ec      	b.n	8009d10 <_free_r+0x24>
 8009d36:	4613      	mov	r3, r2
 8009d38:	685a      	ldr	r2, [r3, #4]
 8009d3a:	b10a      	cbz	r2, 8009d40 <_free_r+0x54>
 8009d3c:	42a2      	cmp	r2, r4
 8009d3e:	d9fa      	bls.n	8009d36 <_free_r+0x4a>
 8009d40:	6819      	ldr	r1, [r3, #0]
 8009d42:	1858      	adds	r0, r3, r1
 8009d44:	42a0      	cmp	r0, r4
 8009d46:	d10b      	bne.n	8009d60 <_free_r+0x74>
 8009d48:	6820      	ldr	r0, [r4, #0]
 8009d4a:	4401      	add	r1, r0
 8009d4c:	1858      	adds	r0, r3, r1
 8009d4e:	4282      	cmp	r2, r0
 8009d50:	6019      	str	r1, [r3, #0]
 8009d52:	d1dd      	bne.n	8009d10 <_free_r+0x24>
 8009d54:	6810      	ldr	r0, [r2, #0]
 8009d56:	6852      	ldr	r2, [r2, #4]
 8009d58:	605a      	str	r2, [r3, #4]
 8009d5a:	4401      	add	r1, r0
 8009d5c:	6019      	str	r1, [r3, #0]
 8009d5e:	e7d7      	b.n	8009d10 <_free_r+0x24>
 8009d60:	d902      	bls.n	8009d68 <_free_r+0x7c>
 8009d62:	230c      	movs	r3, #12
 8009d64:	602b      	str	r3, [r5, #0]
 8009d66:	e7d3      	b.n	8009d10 <_free_r+0x24>
 8009d68:	6820      	ldr	r0, [r4, #0]
 8009d6a:	1821      	adds	r1, r4, r0
 8009d6c:	428a      	cmp	r2, r1
 8009d6e:	bf04      	itt	eq
 8009d70:	6811      	ldreq	r1, [r2, #0]
 8009d72:	6852      	ldreq	r2, [r2, #4]
 8009d74:	6062      	str	r2, [r4, #4]
 8009d76:	bf04      	itt	eq
 8009d78:	1809      	addeq	r1, r1, r0
 8009d7a:	6021      	streq	r1, [r4, #0]
 8009d7c:	605c      	str	r4, [r3, #4]
 8009d7e:	e7c7      	b.n	8009d10 <_free_r+0x24>
 8009d80:	bd38      	pop	{r3, r4, r5, pc}
 8009d82:	bf00      	nop
 8009d84:	20000404 	.word	0x20000404

08009d88 <_malloc_r>:
 8009d88:	b570      	push	{r4, r5, r6, lr}
 8009d8a:	1ccd      	adds	r5, r1, #3
 8009d8c:	f025 0503 	bic.w	r5, r5, #3
 8009d90:	3508      	adds	r5, #8
 8009d92:	2d0c      	cmp	r5, #12
 8009d94:	bf38      	it	cc
 8009d96:	250c      	movcc	r5, #12
 8009d98:	2d00      	cmp	r5, #0
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	db01      	blt.n	8009da2 <_malloc_r+0x1a>
 8009d9e:	42a9      	cmp	r1, r5
 8009da0:	d903      	bls.n	8009daa <_malloc_r+0x22>
 8009da2:	230c      	movs	r3, #12
 8009da4:	6033      	str	r3, [r6, #0]
 8009da6:	2000      	movs	r0, #0
 8009da8:	bd70      	pop	{r4, r5, r6, pc}
 8009daa:	f000 f87d 	bl	8009ea8 <__malloc_lock>
 8009dae:	4a21      	ldr	r2, [pc, #132]	; (8009e34 <_malloc_r+0xac>)
 8009db0:	6814      	ldr	r4, [r2, #0]
 8009db2:	4621      	mov	r1, r4
 8009db4:	b991      	cbnz	r1, 8009ddc <_malloc_r+0x54>
 8009db6:	4c20      	ldr	r4, [pc, #128]	; (8009e38 <_malloc_r+0xb0>)
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	b91b      	cbnz	r3, 8009dc4 <_malloc_r+0x3c>
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f000 f863 	bl	8009e88 <_sbrk_r>
 8009dc2:	6020      	str	r0, [r4, #0]
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	f000 f85e 	bl	8009e88 <_sbrk_r>
 8009dcc:	1c43      	adds	r3, r0, #1
 8009dce:	d124      	bne.n	8009e1a <_malloc_r+0x92>
 8009dd0:	230c      	movs	r3, #12
 8009dd2:	6033      	str	r3, [r6, #0]
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f000 f868 	bl	8009eaa <__malloc_unlock>
 8009dda:	e7e4      	b.n	8009da6 <_malloc_r+0x1e>
 8009ddc:	680b      	ldr	r3, [r1, #0]
 8009dde:	1b5b      	subs	r3, r3, r5
 8009de0:	d418      	bmi.n	8009e14 <_malloc_r+0x8c>
 8009de2:	2b0b      	cmp	r3, #11
 8009de4:	d90f      	bls.n	8009e06 <_malloc_r+0x7e>
 8009de6:	600b      	str	r3, [r1, #0]
 8009de8:	50cd      	str	r5, [r1, r3]
 8009dea:	18cc      	adds	r4, r1, r3
 8009dec:	4630      	mov	r0, r6
 8009dee:	f000 f85c 	bl	8009eaa <__malloc_unlock>
 8009df2:	f104 000b 	add.w	r0, r4, #11
 8009df6:	1d23      	adds	r3, r4, #4
 8009df8:	f020 0007 	bic.w	r0, r0, #7
 8009dfc:	1ac3      	subs	r3, r0, r3
 8009dfe:	d0d3      	beq.n	8009da8 <_malloc_r+0x20>
 8009e00:	425a      	negs	r2, r3
 8009e02:	50e2      	str	r2, [r4, r3]
 8009e04:	e7d0      	b.n	8009da8 <_malloc_r+0x20>
 8009e06:	428c      	cmp	r4, r1
 8009e08:	684b      	ldr	r3, [r1, #4]
 8009e0a:	bf16      	itet	ne
 8009e0c:	6063      	strne	r3, [r4, #4]
 8009e0e:	6013      	streq	r3, [r2, #0]
 8009e10:	460c      	movne	r4, r1
 8009e12:	e7eb      	b.n	8009dec <_malloc_r+0x64>
 8009e14:	460c      	mov	r4, r1
 8009e16:	6849      	ldr	r1, [r1, #4]
 8009e18:	e7cc      	b.n	8009db4 <_malloc_r+0x2c>
 8009e1a:	1cc4      	adds	r4, r0, #3
 8009e1c:	f024 0403 	bic.w	r4, r4, #3
 8009e20:	42a0      	cmp	r0, r4
 8009e22:	d005      	beq.n	8009e30 <_malloc_r+0xa8>
 8009e24:	1a21      	subs	r1, r4, r0
 8009e26:	4630      	mov	r0, r6
 8009e28:	f000 f82e 	bl	8009e88 <_sbrk_r>
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	d0cf      	beq.n	8009dd0 <_malloc_r+0x48>
 8009e30:	6025      	str	r5, [r4, #0]
 8009e32:	e7db      	b.n	8009dec <_malloc_r+0x64>
 8009e34:	20000404 	.word	0x20000404
 8009e38:	20000408 	.word	0x20000408

08009e3c <_realloc_r>:
 8009e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3e:	4607      	mov	r7, r0
 8009e40:	4614      	mov	r4, r2
 8009e42:	460e      	mov	r6, r1
 8009e44:	b921      	cbnz	r1, 8009e50 <_realloc_r+0x14>
 8009e46:	4611      	mov	r1, r2
 8009e48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e4c:	f7ff bf9c 	b.w	8009d88 <_malloc_r>
 8009e50:	b922      	cbnz	r2, 8009e5c <_realloc_r+0x20>
 8009e52:	f7ff ff4b 	bl	8009cec <_free_r>
 8009e56:	4625      	mov	r5, r4
 8009e58:	4628      	mov	r0, r5
 8009e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e5c:	f000 f826 	bl	8009eac <_malloc_usable_size_r>
 8009e60:	42a0      	cmp	r0, r4
 8009e62:	d20f      	bcs.n	8009e84 <_realloc_r+0x48>
 8009e64:	4621      	mov	r1, r4
 8009e66:	4638      	mov	r0, r7
 8009e68:	f7ff ff8e 	bl	8009d88 <_malloc_r>
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d0f2      	beq.n	8009e58 <_realloc_r+0x1c>
 8009e72:	4631      	mov	r1, r6
 8009e74:	4622      	mov	r2, r4
 8009e76:	f7ff ff15 	bl	8009ca4 <memcpy>
 8009e7a:	4631      	mov	r1, r6
 8009e7c:	4638      	mov	r0, r7
 8009e7e:	f7ff ff35 	bl	8009cec <_free_r>
 8009e82:	e7e9      	b.n	8009e58 <_realloc_r+0x1c>
 8009e84:	4635      	mov	r5, r6
 8009e86:	e7e7      	b.n	8009e58 <_realloc_r+0x1c>

08009e88 <_sbrk_r>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	4c06      	ldr	r4, [pc, #24]	; (8009ea4 <_sbrk_r+0x1c>)
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	4605      	mov	r5, r0
 8009e90:	4608      	mov	r0, r1
 8009e92:	6023      	str	r3, [r4, #0]
 8009e94:	f7ff fb4e 	bl	8009534 <_sbrk>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d102      	bne.n	8009ea2 <_sbrk_r+0x1a>
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	b103      	cbz	r3, 8009ea2 <_sbrk_r+0x1a>
 8009ea0:	602b      	str	r3, [r5, #0]
 8009ea2:	bd38      	pop	{r3, r4, r5, pc}
 8009ea4:	20000790 	.word	0x20000790

08009ea8 <__malloc_lock>:
 8009ea8:	4770      	bx	lr

08009eaa <__malloc_unlock>:
 8009eaa:	4770      	bx	lr

08009eac <_malloc_usable_size_r>:
 8009eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb0:	1f18      	subs	r0, r3, #4
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	bfbc      	itt	lt
 8009eb6:	580b      	ldrlt	r3, [r1, r0]
 8009eb8:	18c0      	addlt	r0, r0, r3
 8009eba:	4770      	bx	lr

08009ebc <_init>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	bf00      	nop
 8009ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec2:	bc08      	pop	{r3}
 8009ec4:	469e      	mov	lr, r3
 8009ec6:	4770      	bx	lr

08009ec8 <_fini>:
 8009ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eca:	bf00      	nop
 8009ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ece:	bc08      	pop	{r3}
 8009ed0:	469e      	mov	lr, r3
 8009ed2:	4770      	bx	lr
